import { LeetCodeProblemDetail } from "./types";

export async function getRandomProblem(): Promise<LeetCodeProblemDetail> {
  const randomIndex = Math.floor(Math.random() * mockProblems.length);
  return mockProblems[randomIndex];
}

export const mockProblems: LeetCodeProblemDetail[] = [
  {
    "questionId": 1,
    "title": "Two Sum",
    "titleSlug": "two-sum",
    "content": "<p>Given an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to `target`.</p>\n<p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>\n<p>You can return the answer in any order.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def two_sum(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [2,7,11,15], target = 9",
        "output": "[0,1]"
      },
      {
        "input": "nums = [3,2,4], target = 6",
        "output": "[1,2]"
      },
      {
        "input": "nums = [3,3], target = 6",
        "output": "[0,1]"
      }
    ],
    "constraints": [
      "2 <= nums.length <= 103",
      "-109 <= nums[i] <= 109",
      "-109 <= target <= 109",
      "Only one valid answer exists."
    ]
  },
  {
    "questionId": 2,
    "title": "Add Two Numbers",
    "titleSlug": "add-two-numbers",
    "content": "<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p>\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def add_two_numbers(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "l1 = [2,4,3], l2 = [5,6,4]",
        "output": "[7,0,8]",
        "explanation": "342 + 465 = 807."
      },
      {
        "input": "l1 = [0], l2 = [0]",
        "output": "[0]"
      },
      {
        "input": "l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]",
        "output": "[8,9,9,9,0,0,0,1]"
      }
    ],
    "constraints": [
      "The number of nodes in each linked list is in the range [1, 100].",
      "0 <= Node.val <= 9",
      "It is guaranteed that the list represents a number that does not have leading zeros."
    ]
  },
  {
    "questionId": 3,
    "title": "Longest Substring Without Repeating Characters",
    "titleSlug": "longest-substring-without-repeating-characters",
    "content": "<p>Given a string `s`, find the length of the longest substring without repeating characters.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_substring_without_repeating_characters(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"abcabcbb\"",
        "output": "3",
        "explanation": "The answer is \"abc\", with the length of 3."
      },
      {
        "input": "s = \"bbbbb\"",
        "output": "1",
        "explanation": "The answer is \"b\", with the length of 1."
      },
      {
        "input": "s = \"pwwkew\"",
        "output": "3",
        "explanation": "The answer is \"wke\", with the length of 3."
      },
      {
        "input": "s = \"\"",
        "output": "0"
      }
    ],
    "constraints": [
      "0 <= s.length <= 5 * 104",
      "s consists of English letters, digits, symbols and spaces."
    ]
  },
  {
    "questionId": 5,
    "title": "Longest Palindromic Substring",
    "titleSlug": "longest-palindromic-substring",
    "content": "<p>Given a string `s`, return the longest palindromic substring in `s`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_palindromic_substring(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"babad\"",
        "output": "\"bab\""
      },
      {
        "input": "s = \"cbbd\"",
        "output": "\"bb\""
      },
      {
        "input": "s = \"a\"",
        "output": "\"a\""
      },
      {
        "input": "s = \"ac\"",
        "output": "\"a\""
      }
    ],
    "constraints": [
      "1 <= s.length <= 1000",
      "s consist of only digits and English letters (lower-case and/or upper-case),"
    ]
  },
  {
    "questionId": 6,
    "title": "ZigZag Conversion",
    "titleSlug": "zigzag-conversion",
    "content": "<p>The string `\"PAYPALISHIRING\"` is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\nP   A   H   N\nA P L S I I G\nY   I   R\nAnd then read line by line: `\"PAHNAPLSIIGYIR\"`\nWrite the code that will take a string and make this conversion given a number of rows:\nstring convert(string s, int numRows);</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def zigzag_conversion(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"PAYPALISHIRING\", numRows = 3",
        "output": "\"PAHNAPLSIIGYIR\""
      },
      {
        "input": "s = \"PAYPALISHIRING\", numRows = 4",
        "output": "\"PINALSIGYAHRPI\"",
        "explanation": "P     I    N"
      },
      {
        "input": "s = \"A\", numRows = 1",
        "output": "\"A\""
      }
    ],
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of English letters (lower-case and upper-case), ',' and '.'.",
      "1 <= numRows <= 1000"
    ]
  },
  {
    "questionId": 7,
    "title": "Reverse Integer",
    "titleSlug": "reverse-integer",
    "content": "<p>Given a signed 32-bit integer `x`, return `x` with its digits reversed. If reversing `x` causes the value to go outside the signed 32-bit integer range `[-231, 231 - 1]`, then return `0`.</p>\n<p>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def reverse_integer(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "x = 123",
        "output": "321"
      },
      {
        "input": "x = -123",
        "output": "-321"
      },
      {
        "input": "x = 120",
        "output": "21"
      },
      {
        "input": "x = 0",
        "output": "0"
      }
    ],
    "constraints": [
      "-231 <= x <= 231 - 1"
    ]
  },
  {
    "questionId": 8,
    "title": "String to Integer (atoi)",
    "titleSlug": "string-to-integer-atoi",
    "content": "<p>Implement the `myAtoi(string s)` function, which converts a string to a 32-bit signed integer (similar to C/C++'s `atoi` function).</p>\n<p>The algorithm for `myAtoi(string s)` is as follows:\nRead in and ignore any leading whitespace.</p>\n<p>Check if the next character (if not already at the end of the string) is `'-'` or `'+'`. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.</p>\n<p>Read in next the characters until the next non-digit charcter or the end of the input is reached. The rest of the string is ignored.</p>\n<p>Convert these digits into an integer (i.e. `\"123\" -> 123`, `\"0032\" -> 32`). If no digits were read, then the integer is `0`. Change the sign as necessary (from step 2).</p>\n<p>If the integer is out of the 32-bit signed integer range `[-231, 231 - 1]`, then clamp the integer so that it remains in the range. Specifically, integers less than `-231` should be clamped to `-231`, and integers greater than `231 - 1` should be clamped to `231 - 1`.</p>\n<p>Return the integer as the final result.</p>\n<p>Note:\nOnly the space character `' '` is considered a whitespace character.</p>\n<p>Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def string_to_integer_atoi(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"42\"",
        "output": "42",
        "explanation": "The underlined characters are what is read in, the caret is the current reader position."
      },
      {
        "input": "s = \"   -42\"",
        "output": "-42",
        "explanation": "Step 1: \"   -42\" (leading whitespace is read and ignored)"
      },
      {
        "input": "s = \"4193 with words\"",
        "output": "4193",
        "explanation": "Step 1: \"4193 with words\" (no characters read because there is no leading whitespace)"
      },
      {
        "input": "s = \"words and 987\"",
        "output": "0",
        "explanation": "Step 1: \"words and 987\" (no characters read because there is no leading whitespace)"
      },
      {
        "input": "s = \"-91283472332\"",
        "output": "-2147483648",
        "explanation": "Step 1: \"-91283472332\" (no characters read because there is no leading whitespace)"
      }
    ],
    "constraints": [
      "0 <= s.length <= 200",
      "s consists of English letters (lower-case and upper-case), digits (0-9), ' ', '+', '-', and '.'."
    ]
  },
  {
    "questionId": 9,
    "title": "Palindrome Number",
    "titleSlug": "palindrome-number",
    "content": "<p>Given an integer `x`, return `true` if `x` is palindrome integer.</p>\n<p>An integer is a palindrome when it reads the same backward as forward. For example, `121` is palindrome while `123` is not.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def palindrome_number(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "x = 121",
        "output": "true"
      },
      {
        "input": "x = -121",
        "output": "false",
        "explanation": "From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome."
      },
      {
        "input": "x = 10",
        "output": "false",
        "explanation": "Reads 01 from right to left. Therefore it is not a palindrome."
      },
      {
        "input": "x = -101",
        "output": "false"
      }
    ],
    "constraints": [
      "-231 <= x <= 231 - 1",
      "Follow up: Could you solve it without converting the integer to a string?"
    ]
  },
  {
    "questionId": 11,
    "title": "Container With Most Water",
    "titleSlug": "container-with-most-water",
    "content": "<p>Given `n` non-negative integers `a1, a2, ..., an` , where each represents a point at coordinate `(i, ai)`. `n` vertical lines are drawn such that the two endpoints of the line `i` is at `(i, ai)` and `(i, 0)`. Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.</p>\n<p>Notice that you may not slant the container.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def container_with_most_water(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "height = [1,8,6,2,5,4,8,3,7]",
        "output": "49",
        "explanation": "The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49."
      },
      {
        "input": "height = [1,1]",
        "output": "1"
      },
      {
        "input": "height = [4,3,2,1,4]",
        "output": "16"
      },
      {
        "input": "height = [1,2,1]",
        "output": "2"
      }
    ],
    "constraints": [
      "n == height.length",
      "2 <= n <= 105",
      "0 <= height[i] <= 104"
    ]
  },
  {
    "questionId": 12,
    "title": "Integer to Roman",
    "titleSlug": "integer-to-roman",
    "content": "<p>Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`.</p>\n<p>Symbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, `2` is written as `II` in Roman numeral, just two one's added together. `12` is written as `XII`, which is simply `X + II`. The number `27` is written as `XXVII`, which is `XX + V + II`.</p>\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used:\n`I` can be placed before `V` (5) and `X` (10) to make 4 and 9. \n`X` can be placed before `L` (50) and `C` (100) to make 40 and 90. \n`C` can be placed before `D` (500) and `M` (1000) to make 400 and 900.</p>\n<p>Given an integer, convert it to a roman numeral.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def integer_to_roman(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "num = 3",
        "output": "\"III\""
      },
      {
        "input": "num = 4",
        "output": "\"IV\""
      },
      {
        "input": "num = 9",
        "output": "\"IX\""
      },
      {
        "input": "num = 58",
        "output": "\"LVIII\"",
        "explanation": "L = 50, V = 5, III = 3."
      },
      {
        "input": "num = 1994",
        "output": "\"MCMXCIV\"",
        "explanation": "M = 1000, CM = 900, XC = 90 and IV = 4."
      }
    ],
    "constraints": [
      "1 <= num <= 3999"
    ]
  },
  {
    "questionId": 13,
    "title": "Roman to Integer",
    "titleSlug": "roman-to-integer",
    "content": "<p>Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`.</p>\n<p>Symbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, `2` is written as `II` in Roman numeral, just two one's added together. `12` is written as `XII`, which is simply `X + II`. The number `27` is written as `XXVII`, which is `XX + V + II`.</p>\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used:\n`I` can be placed before `V` (5) and `X` (10) to make 4 and 9. \n`X` can be placed before `L` (50) and `C` (100) to make 40 and 90. \n`C` can be placed before `D` (500) and `M` (1000) to make 400 and 900.</p>\n<p>Given a roman numeral, convert it to an integer.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def roman_to_integer(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"III\"",
        "output": "3"
      },
      {
        "input": "s = \"IV\"",
        "output": "4"
      },
      {
        "input": "s = \"IX\"",
        "output": "9"
      },
      {
        "input": "s = \"LVIII\"",
        "output": "58",
        "explanation": "L = 50, V= 5, III = 3."
      },
      {
        "input": "s = \"MCMXCIV\"",
        "output": "1994",
        "explanation": "M = 1000, CM = 900, XC = 90 and IV = 4."
      }
    ],
    "constraints": [
      "1 <= s.length <= 15",
      "s contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').",
      "It is guaranteed that s is a valid roman numeral in the range [1, 3999]."
    ]
  },
  {
    "questionId": 14,
    "title": "Longest Common Prefix",
    "titleSlug": "longest-common-prefix",
    "content": "<p>Write a function to find the longest common prefix string amongst an array of strings.</p>\n<p>If there is no common prefix, return an empty string `\"\"`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_common_prefix(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "strs = [\"flower\",\"flow\",\"flight\"]",
        "output": "\"fl\""
      },
      {
        "input": "strs = [\"dog\",\"racecar\",\"car\"]",
        "output": "\"\"",
        "explanation": "There is no common prefix among the input strings."
      }
    ],
    "constraints": [
      "0 <= strs.length <= 200",
      "0 <= strs[i].length <= 200",
      "strs[i] consists of only lower-case English letters."
    ]
  },
  {
    "questionId": 15,
    "title": "3Sum",
    "titleSlug": "3sum",
    "content": "<p>Given an integer array nums, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`.</p>\n<p>Notice that the solution set must not contain duplicate triplets.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def 3sum(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [-1,0,1,2,-1,-4]",
        "output": "[[-1,-1,2],[-1,0,1]]"
      },
      {
        "input": "nums = []",
        "output": "[]"
      },
      {
        "input": "nums = [0]",
        "output": "[]"
      }
    ],
    "constraints": [
      "0 <= nums.length <= 3000",
      "-105 <= nums[i] <= 105"
    ]
  },
  {
    "questionId": 16,
    "title": "3Sum Closest",
    "titleSlug": "3sum-closest",
    "content": "<p>Given an array `nums` of n integers and an integer `target`, find three integers in `nums` such that the sum is closest to `target`. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def 3sum_closest(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [-1,2,1,-4], target = 1",
        "output": "2",
        "explanation": "The sum that is closest to the target is 2. (-1 + 2 + 1 = 2)."
      }
    ],
    "constraints": [
      "3 <= nums.length <= 10^3",
      "-10^3 <= nums[i] <= 10^3",
      "-10^4 <= target <= 10^4"
    ]
  },
  {
    "questionId": 17,
    "title": "Letter Combinations of a Phone Number",
    "titleSlug": "letter-combinations-of-a-phone-number",
    "content": "<p>Given a string containing digits from `2-9` inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.</p>\n<p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def letter_combinations_of_a_phone_number(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "digits = \"23\"",
        "output": "[\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]"
      },
      {
        "input": "digits = \"\"",
        "output": "[]"
      },
      {
        "input": "digits = \"2\"",
        "output": "[\"a\",\"b\",\"c\"]"
      }
    ],
    "constraints": [
      "0 <= digits.length <= 4",
      "digits[i] is a digit in the range ['2', '9']."
    ]
  },
  {
    "questionId": 18,
    "title": "4Sum",
    "titleSlug": "4sum",
    "content": "<p>Given an array `nums` of n integers and an integer `target`, are there elements a, b, c, and d in `nums` such that a + b + c + d = `target`? Find all unique quadruplets in the array which gives the sum of `target`.</p>\n<p>Notice that the solution set must not contain duplicate quadruplets.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def 4sum(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,0,-1,0,-2,2], target = 0",
        "output": "[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]"
      },
      {
        "input": "nums = [], target = 0",
        "output": "[]"
      }
    ],
    "constraints": [
      "0 <= nums.length <= 200",
      "-109 <= nums[i] <= 109",
      "-109 <= target <= 109"
    ]
  },
  {
    "questionId": 19,
    "title": "Remove Nth Node From End of List",
    "titleSlug": "remove-nth-node-from-end-of-list",
    "content": "<p>Given the `head` of a linked list, remove the `nth` node from the end of the list and return its head.</p>\n<p>Follow up: Could you do this in one pass?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def remove_nth_node_from_end_of_list(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [1,2,3,4,5], n = 2",
        "output": "[1,2,3,5]"
      },
      {
        "input": "head = [1], n = 1",
        "output": "[]"
      },
      {
        "input": "head = [1,2], n = 1",
        "output": "[1]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is sz.",
      "1 <= sz <= 30",
      "0 <= Node.val <= 100",
      "1 <= n <= sz"
    ]
  },
  {
    "questionId": 20,
    "title": "Valid Parentheses",
    "titleSlug": "valid-parentheses",
    "content": "<p>Given a string `s` containing just the characters `'('`, `')'`, `'{'`, `'}'`, `'['` and `']'`, determine if the input string is valid.</p>\n<p>An input string is valid if:\nOpen brackets must be closed by the same type of brackets.</p>\n<p>Open brackets must be closed in the correct order.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def valid_parentheses(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"()\"",
        "output": "true"
      },
      {
        "input": "s = \"()[]{}\"",
        "output": "true"
      },
      {
        "input": "s = \"(]\"",
        "output": "false"
      },
      {
        "input": "s = \"([)]\"",
        "output": "false"
      },
      {
        "input": "s = \"{[]}\"",
        "output": "true"
      }
    ],
    "constraints": [
      "1 <= s.length <= 104",
      "s consists of parentheses only '()[]{}'."
    ]
  },
  {
    "questionId": 21,
    "title": "Merge Two Sorted Lists",
    "titleSlug": "merge-two-sorted-lists",
    "content": "<p>Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def merge_two_sorted_lists(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "l1 = [1,2,4], l2 = [1,3,4]",
        "output": "[1,1,2,3,4,4]"
      },
      {
        "input": "l1 = [], l2 = []",
        "output": "[]"
      },
      {
        "input": "l1 = [], l2 = [0]",
        "output": "[0]"
      }
    ],
    "constraints": [
      "The number of nodes in both lists is in the range [0, 50].",
      "-100 <= Node.val <= 100",
      "Both l1 and l2 are sorted in non-decreasing order."
    ]
  },
  {
    "questionId": 22,
    "title": "Generate Parentheses",
    "titleSlug": "generate-parentheses",
    "content": "<p>Given `n` pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def generate_parentheses(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 3",
        "output": "[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]"
      },
      {
        "input": "n = 1",
        "output": "[\"()\"]"
      }
    ],
    "constraints": [
      "1 <= n <= 8"
    ]
  },
  {
    "questionId": 24,
    "title": "Swap Nodes in Pairs",
    "titleSlug": "swap-nodes-in-pairs",
    "content": "<p>Given a linked list, swap every two adjacent nodes and return its head.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def swap_nodes_in_pairs(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [1,2,3,4]",
        "output": "[2,1,4,3]"
      },
      {
        "input": "head = []",
        "output": "[]"
      },
      {
        "input": "head = [1]",
        "output": "[1]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range [0, 100].",
      "0 <= Node.val <= 100",
      "Follow up: Can you solve the problem without modifying the values in the list's nodes? (i.e., Only nodes themselves may be changed.)"
    ]
  },
  {
    "questionId": 26,
    "title": "Remove Duplicates from Sorted Array",
    "titleSlug": "remove-duplicates-from-sorted-array",
    "content": "<p>Given a sorted array nums, remove the duplicates in-place such that each element appears only once and returns the new length.</p>\n<p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p>\n<p>Clarification:\nConfused why the returned value is an integer but your answer is an array?\nNote that the input array is passed in by reference, which means a modification to the input array will be known to the caller as well.</p>\n<p>Internally you can think of this:\n// nums is passed in by reference. (i.e., without making a copy)\nint len = removeDuplicates(nums);\n// any modification to nums in your function would be known by the caller.</p>\n<p>// using the length returned by your function, it prints the first len elements.</p>\n<p>for (int i = 0; i < len; i++) {\n    print(nums[i]);\n}</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def remove_duplicates_from_sorted_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,1,2]",
        "output": "2, nums = [1,2]",
        "explanation": "Your function should return length = `2`, with the first two elements of `nums` being `1` and `2` respectively. It doesn't matter what you leave beyond the returned length."
      },
      {
        "input": "nums = [0,0,1,1,1,2,2,3,3,4]",
        "output": "5, nums = [0,1,2,3,4]",
        "explanation": "Your function should return length = `5`, with the first five elements of `nums` being modified to `0`, `1`, `2`, `3`, and `4` respectively. It doesn't matter what values are set beyond the returned length."
      }
    ],
    "constraints": [
      "0 <= nums.length <= 3 * 104",
      "-104 <= nums[i] <= 104",
      "nums is sorted in ascending order."
    ]
  },
  {
    "questionId": 27,
    "title": "Remove Element",
    "titleSlug": "remove-element",
    "content": "<p>Given an array nums and a value `val`, remove all instances of that value in-place and return the new length.</p>\n<p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with `O(1)` extra memory.</p>\n<p>The order of elements can be changed. It doesn't matter what you leave beyond the new length.</p>\n<p>Clarification:\nConfused why the returned value is an integer but your answer is an array?\nNote that the input array is passed in by reference, which means a modification to the input array will be known to the caller as well.</p>\n<p>Internally you can think of this:\n// nums is passed in by reference. (i.e., without making a copy)\nint len = removeElement(nums, val);\n// any modification to nums in your function would be known by the caller.</p>\n<p>// using the length returned by your function, it prints the first len elements.</p>\n<p>for (int i = 0; i < len; i++) {\n    print(nums[i]);\n}</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def remove_element(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [3,2,2,3], val = 3",
        "output": "2, nums = [2,2]",
        "explanation": "Your function should return length = 2, with the first two elements of nums being 2."
      },
      {
        "input": "nums = [0,1,2,2,3,0,4,2], val = 2",
        "output": "5, nums = [0,1,4,0,3]",
        "explanation": "Your function should return length = `5`, with the first five elements of `nums` containing `0`, `1`, `3`, `0`, and 4. Note that the order of those five elements can be arbitrary. It doesn't matter what values are set beyond the returned length."
      }
    ],
    "constraints": [
      "0 <= nums.length <= 100",
      "0 <= nums[i] <= 50",
      "0 <= val <= 100"
    ]
  },
  {
    "questionId": 28,
    "title": "Implement strStr()",
    "titleSlug": "implement-strstr",
    "content": "<p>Implement strStr().</p>\n<p>Return the index of the first occurrence of needle in haystack, or `-1` if `needle` is not part of `haystack`.</p>\n<p>Clarification:\nWhat should we return when `needle` is an empty string? This is a great question to ask during an interview.</p>\n<p>For the purpose of this problem, we will return 0 when `needle` is an empty string. This is consistent to C's strstr() and Java's indexOf().</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def implement_strstr(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "haystack = \"hello\", needle = \"ll\"",
        "output": "2"
      },
      {
        "input": "haystack = \"aaaaa\", needle = \"bba\"",
        "output": "-1"
      },
      {
        "input": "haystack = \"\", needle = \"\"",
        "output": "0"
      }
    ],
    "constraints": [
      "0 <= haystack.length, needle.length <= 5 * 104",
      "haystack and needle consist of only lower-case English characters."
    ]
  },
  {
    "questionId": 29,
    "title": "Divide Two Integers",
    "titleSlug": "divide-two-integers",
    "content": "<p>Given two integers `dividend` and `divisor`, divide two integers without using multiplication, division, and mod operator.</p>\n<p>Return the quotient after dividing `dividend` by `divisor`.</p>\n<p>The integer division should truncate toward zero, which means losing its fractional part. For example, `truncate(8.345) = 8` and `truncate(-2.7335) = -2`.</p>\n<p>Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: `[\u2212231, 231 \u2212 1]`. For this problem, assume that your function returns `231 \u2212 1` when the division result overflows.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def divide_two_integers(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "dividend = 10, divisor = 3",
        "output": "3",
        "explanation": "10/3 = truncate(3.33333..) = 3."
      },
      {
        "input": "dividend = 7, divisor = -3",
        "output": "-2",
        "explanation": "7/-3 = truncate(-2.33333..) = -2."
      },
      {
        "input": "dividend = 0, divisor = 1",
        "output": "0"
      },
      {
        "input": "dividend = 1, divisor = 1",
        "output": "1"
      }
    ],
    "constraints": [
      "-231 <= dividend, divisor <= 231 - 1",
      "divisor != 0"
    ]
  },
  {
    "questionId": 31,
    "title": "Next Permutation",
    "titleSlug": "next-permutation",
    "content": "<p>Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.</p>\n<p>If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).</p>\n<p>The replacement must be in place and use only constant extra memory.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def next_permutation(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3]",
        "output": "[1,3,2]"
      },
      {
        "input": "nums = [3,2,1]",
        "output": "[1,2,3]"
      },
      {
        "input": "nums = [1,1,5]",
        "output": "[1,5,1]"
      },
      {
        "input": "nums = [1]",
        "output": "[1]"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 100",
      "0 <= nums[i] <= 100"
    ]
  },
  {
    "questionId": 33,
    "title": "Search in Rotated Sorted Array",
    "titleSlug": "search-in-rotated-sorted-array",
    "content": "<p>There is an integer array `nums` sorted in ascending order (with distinct values).</p>\n<p>Prior to being passed to your function, `nums` is rotated at an unknown pivot index `k` (`0 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (0-indexed). For example, `[0,1,2,4,5,6,7]` might be rotated at pivot index `3` and become `[4,5,6,7,0,1,2]`.</p>\n<p>Given the array `nums` after the rotation and an integer `target`, return the index of `target` if it is in `nums`, or `-1` if it is not in `nums`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def search_in_rotated_sorted_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [4,5,6,7,0,1,2], target = 0",
        "output": "4"
      },
      {
        "input": "nums = [4,5,6,7,0,1,2], target = 3",
        "output": "-1"
      },
      {
        "input": "nums = [1], target = 0",
        "output": "-1"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 5000",
      "-104 <= nums[i] <= 104",
      "All values of nums are unique.",
      "nums is guaranteed to be rotated at some pivot.",
      "-104 <= target <= 104",
      "Follow up: Can you achieve this in O(log n) time complexity?"
    ]
  },
  {
    "questionId": 34,
    "title": "Find First and Last Position of Element in Sorted Array",
    "titleSlug": "find-first-and-last-position-of-element-in-sorted-array",
    "content": "<p>Given an array of integers `nums` sorted in ascending order, find the starting and ending position of a given `target` value.</p>\n<p>If `target` is not found in the array, return `[-1, -1]`.</p>\n<p>Follow up: Could you write an algorithm with `O(log n)` runtime complexity?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_first_and_last_position_of_element_in_sorted_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [5,7,7,8,8,10], target = 8",
        "output": "[3,4]"
      },
      {
        "input": "nums = [5,7,7,8,8,10], target = 6",
        "output": "[-1,-1]"
      },
      {
        "input": "nums = [], target = 0",
        "output": "[-1,-1]"
      }
    ],
    "constraints": [
      "0 <= nums.length <= 105",
      "-109 <= nums[i] <= 109",
      "nums is a non-decreasing array.",
      "-109 <= target <= 109"
    ]
  },
  {
    "questionId": 35,
    "title": "Search Insert Position",
    "titleSlug": "search-insert-position",
    "content": "<p>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def search_insert_position(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,3,5,6], target = 5",
        "output": "2"
      },
      {
        "input": "nums = [1,3,5,6], target = 2",
        "output": "1"
      },
      {
        "input": "nums = [1,3,5,6], target = 7",
        "output": "4"
      },
      {
        "input": "nums = [1,3,5,6], target = 0",
        "output": "0"
      },
      {
        "input": "nums = [1], target = 0",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 104",
      "-104 <= nums[i] <= 104",
      "nums contains distinct values sorted in ascending order.",
      "-104 <= target <= 104"
    ]
  },
  {
    "questionId": 36,
    "title": "Valid Sudoku",
    "titleSlug": "valid-sudoku",
    "content": "<p>Determine if a `9 x 9` Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\nEach row must contain the digits `1-9` without repetition.</p>\n<p>Each column must contain the digits `1-9` without repetition.</p>\n<p>Each of the nine `3 x 3` sub-boxes of the grid must contain the digits `1-9` without repetition.</p>\n<p>Note:\nA Sudoku board (partially filled) could be valid but is not necessarily solvable.</p>\n<p>Only the filled cells need to be validated according to the mentioned rules.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def valid_sudoku(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "board =",
        "output": "true"
      },
      {
        "input": "board =",
        "output": "false",
        "explanation": "Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid."
      }
    ],
    "constraints": [
      "board.length == 9",
      "board[i].length == 9",
      "board[i][j] is a digit or '.'."
    ]
  },
  {
    "questionId": 38,
    "title": "Count and Say",
    "titleSlug": "count-and-say",
    "content": "<p>The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\n`countAndSay(1) = \"1\"`\n`countAndSay(n)` is the way you would \"say\" the digit string from `countAndSay(n-1)`, which is then converted into a different digit string.</p>\n<p>To determine how you \"say\" a digit string, split it into the minimal number of groups so that each group is a contiguous section all of the same character. Then for each group, say the number of characters, then say the character. To convert the saying into a digit string, replace the counts with a number and concatenate every saying.</p>\n<p>For example, the saying and conversion for digit string `\"3322251\"`:\nGiven a positive integer `n`, return the `nth` term of the count-and-say sequence.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_and_say(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 1",
        "output": "\"1\"",
        "explanation": "This is the base case."
      },
      {
        "input": "n = 4",
        "output": "\"1211\"",
        "explanation": "countAndSay(1) = \"1\""
      }
    ],
    "constraints": [
      "1 <= n <= 30"
    ]
  },
  {
    "questionId": 39,
    "title": "Combination Sum",
    "titleSlug": "combination-sum",
    "content": "<p>Given an array of distinct integers `candidates` and a target integer `target`, return a list of all unique combinations of `candidates` where the chosen numbers sum to `target`. You may return the combinations in any order.</p>\n<p>The same number may be chosen from `candidates` an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.</p>\n<p>It is guaranteed that the number of unique combinations that sum up to `target` is less than `150` combinations for the given input.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def combination_sum(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "candidates = [2,3,6,7], target = 7",
        "output": "[[2,2,3],[7]]",
        "explanation": "2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times."
      },
      {
        "input": "candidates = [2,3,5], target = 8",
        "output": "[[2,2,2,2],[2,3,3],[3,5]]"
      },
      {
        "input": "candidates = [2], target = 1",
        "output": "[]"
      },
      {
        "input": "candidates = [1], target = 1",
        "output": "[[1]]"
      },
      {
        "input": "candidates = [1], target = 2",
        "output": "[[1,1]]"
      }
    ],
    "constraints": [
      "1 <= candidates.length <= 30",
      "1 <= candidates[i] <= 200",
      "All elements of candidates are distinct.",
      "1 <= target <= 500"
    ]
  },
  {
    "questionId": 40,
    "title": "Combination Sum II",
    "titleSlug": "combination-sum-ii",
    "content": "<p>Given a collection of candidate numbers (`candidates`) and a target number (`target`), find all unique combinations in `candidates` where the candidate numbers sum to `target`.</p>\n<p>Each number in `candidates` may only be used once in the combination.</p>\n<p>Note: The solution set must not contain duplicate combinations.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def combination_sum_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "candidates = [10,1,2,7,6,1,5], target = 8",
        "output": "["
      },
      {
        "input": "candidates = [2,5,2,1,2], target = 5",
        "output": "["
      }
    ],
    "constraints": [
      "1 <= candidates.length <= 100",
      "1 <= candidates[i] <= 50",
      "1 <= target <= 30"
    ]
  },
  {
    "questionId": 43,
    "title": "Multiply Strings",
    "titleSlug": "multiply-strings",
    "content": "<p>Given two non-negative integers `num1` and `num2` represented as strings, return the product of `num1` and `num2`, also represented as a string.</p>\n<p>Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def multiply_strings(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "num1 = \"2\", num2 = \"3\"",
        "output": "\"6\""
      },
      {
        "input": "num1 = \"123\", num2 = \"456\"",
        "output": "\"56088\""
      }
    ],
    "constraints": [
      "1 <= num1.length, num2.length <= 200",
      "num1 and num2 consist of digits only.",
      "Both num1 and num2 do not contain any leading zero, except the number 0 itself."
    ]
  },
  {
    "questionId": 45,
    "title": "Jump Game II",
    "titleSlug": "jump-game-ii",
    "content": "<p>Given an array of non-negative integers `nums`, you are initially positioned at the first index of the array.</p>\n<p>Each element in the array represents your maximum jump length at that position.</p>\n<p>Your goal is to reach the last index in the minimum number of jumps.</p>\n<p>You can assume that you can always reach the last index.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def jump_game_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [2,3,1,1,4]",
        "output": "2",
        "explanation": "The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index."
      },
      {
        "input": "nums = [2,3,0,1,4]",
        "output": "2"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 1000",
      "0 <= nums[i] <= 105"
    ]
  },
  {
    "questionId": 46,
    "title": "Permutations",
    "titleSlug": "permutations",
    "content": "<p>Given an array `nums` of distinct integers, return all the possible permutations. You can return the answer in any order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def permutations(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3]",
        "output": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]"
      },
      {
        "input": "nums = [0,1]",
        "output": "[[0,1],[1,0]]"
      },
      {
        "input": "nums = [1]",
        "output": "[[1]]"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 6",
      "-10 <= nums[i] <= 10",
      "All the integers of nums are unique."
    ]
  },
  {
    "questionId": 47,
    "title": "Permutations II",
    "titleSlug": "permutations-ii",
    "content": "<p>Given a collection of numbers, `nums`, that might contain duplicates, return all possible unique permutations in any order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def permutations_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,1,2]",
        "output": "[[1,1,2],"
      },
      {
        "input": "nums = [1,2,3]",
        "output": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 8",
      "-10 <= nums[i] <= 10"
    ]
  },
  {
    "questionId": 48,
    "title": "Rotate Image",
    "titleSlug": "rotate-image",
    "content": "<p>You are given an n x n 2D `matrix` representing an image, rotate the image by 90 degrees (clockwise).</p>\n<p>You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def rotate_image(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
        "output": "[[7,4,1],[8,5,2],[9,6,3]]"
      },
      {
        "input": "matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]",
        "output": "[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]"
      },
      {
        "input": "matrix = [[1]]",
        "output": "[[1]]"
      },
      {
        "input": "matrix = [[1,2],[3,4]]",
        "output": "[[3,1],[4,2]]"
      }
    ],
    "constraints": [
      "matrix.length == n",
      "matrix[i].length == n",
      "1 <= n <= 20",
      "-1000 <= matrix[i][j] <= 1000"
    ]
  },
  {
    "questionId": 49,
    "title": "Group Anagrams",
    "titleSlug": "group-anagrams",
    "content": "<p>Given an array of strings `strs`, group the anagrams together. You can return the answer in any order.</p>\n<p>An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def group_anagrams(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]",
        "output": "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]"
      },
      {
        "input": "strs = [\"\"]",
        "output": "[[\"\"]]"
      },
      {
        "input": "strs = [\"a\"]",
        "output": "[[\"a\"]]"
      }
    ],
    "constraints": [
      "1 <= strs.length <= 104",
      "0 <= strs[i].length <= 100",
      "strs[i] consists of lower-case English letters."
    ]
  },
  {
    "questionId": 50,
    "title": "Pow(x, n)",
    "titleSlug": "powx-n",
    "content": "<p>Implement pow(x, n), which calculates `x` raised to the power `n` (i.e., `xn`).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def powx_n(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "x = 2.00000, n = 10",
        "output": "1024.00000"
      },
      {
        "input": "x = 2.10000, n = 3",
        "output": "9.26100"
      },
      {
        "input": "x = 2.00000, n = -2",
        "output": "0.25000",
        "explanation": "2-2 = 1/22 = 1/4 = 0.25"
      }
    ],
    "constraints": [
      "-100.0 < x < 100.0",
      "-231 <= n <= 231-1",
      "-104 <= xn <= 104"
    ]
  },
  {
    "questionId": 53,
    "title": "Maximum Subarray",
    "titleSlug": "maximum-subarray",
    "content": "<p>Given an integer array `nums`, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_subarray(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
        "output": "6",
        "explanation": "[4,-1,2,1] has the largest sum = 6."
      },
      {
        "input": "nums = [1]",
        "output": "1"
      },
      {
        "input": "nums = [5,4,-1,7,8]",
        "output": "23"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 3 * 104",
      "-105 <= nums[i] <= 105",
      "Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle."
    ]
  },
  {
    "questionId": 54,
    "title": "Spiral Matrix",
    "titleSlug": "spiral-matrix",
    "content": "<p>Given an `m x n` `matrix`, return all elements of the `matrix` in spiral order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def spiral_matrix(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
        "output": "[1,2,3,6,9,8,7,4,5]"
      },
      {
        "input": "matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]",
        "output": "[1,2,3,4,8,12,11,10,9,5,6,7]"
      }
    ],
    "constraints": [
      "m == matrix.length",
      "n == matrix[i].length",
      "1 <= m, n <= 10",
      "-100 <= matrix[i][j] <= 100"
    ]
  },
  {
    "questionId": 55,
    "title": "Jump Game",
    "titleSlug": "jump-game",
    "content": "<p>Given an array of non-negative integers `nums`, you are initially positioned at the first index of the array.</p>\n<p>Each element in the array represents your maximum jump length at that position.</p>\n<p>Determine if you are able to reach the last index.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def jump_game(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [2,3,1,1,4]",
        "output": "true",
        "explanation": "Jump 1 step from index 0 to 1, then 3 steps to the last index."
      },
      {
        "input": "nums = [3,2,1,0,4]",
        "output": "false",
        "explanation": "You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 3 * 104",
      "0 <= nums[i] <= 105"
    ]
  },
  {
    "questionId": 56,
    "title": "Merge Intervals",
    "titleSlug": "merge-intervals",
    "content": "<p>Given an array of `intervals` where `intervals[i] = [starti, endi]`, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def merge_intervals(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
        "output": "[[1,6],[8,10],[15,18]]",
        "explanation": "Since intervals [1,3] and [2,6] overlaps, merge them into [1,6]."
      },
      {
        "input": "intervals = [[1,4],[4,5]]",
        "output": "[[1,5]]",
        "explanation": "Intervals [1,4] and [4,5] are considered overlapping."
      }
    ],
    "constraints": [
      "1 <= intervals.length <= 104",
      "intervals[i].length == 2",
      "0 <= starti <= endi <= 104"
    ]
  },
  {
    "questionId": 57,
    "title": "Insert Interval",
    "titleSlug": "insert-interval",
    "content": "<p>Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).</p>\n<p>You may assume that the intervals were initially sorted according to their start times.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def insert_interval(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "intervals = [[1,3],[6,9]], newInterval = [2,5]",
        "output": "[[1,5],[6,9]]"
      },
      {
        "input": "intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]",
        "output": "[[1,2],[3,10],[12,16]]",
        "explanation": "Because the new interval `[4,8]` overlaps with `[3,5],[6,7],[8,10]`."
      },
      {
        "input": "intervals = [], newInterval = [5,7]",
        "output": "[[5,7]]"
      },
      {
        "input": "intervals = [[1,5]], newInterval = [2,3]",
        "output": "[[1,5]]"
      },
      {
        "input": "intervals = [[1,5]], newInterval = [2,7]",
        "output": "[[1,7]]"
      }
    ],
    "constraints": [
      "0 <= intervals.length <= 104",
      "intervals[i].length == 2",
      "0 <= intervals[i][0] <= intervals[i][1] <= 105",
      "intervals is sorted by intervals[i][0] in ascending order.",
      "newInterval.length == 2",
      "0 <= newInterval[0] <= newInterval[1] <= 105"
    ]
  },
  {
    "questionId": 58,
    "title": "Length of Last Word",
    "titleSlug": "length-of-last-word",
    "content": "<p>Given a string `s` consists of some words separated by spaces, return the length of the last word in the string. If the last word does not exist, return `0`.</p>\n<p>A word is a maximal substring consisting of non-space characters only.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def length_of_last_word(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"Hello World\"",
        "output": "5"
      },
      {
        "input": "s = \" \"",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= s.length <= 104",
      "s consists of only English letters and spaces ' '."
    ]
  },
  {
    "questionId": 59,
    "title": "Spiral Matrix II",
    "titleSlug": "spiral-matrix-ii",
    "content": "<p>Given a positive integer `n`, generate an `n x n` `matrix` filled with elements from `1` to `n2` in spiral order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def spiral_matrix_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 3",
        "output": "[[1,2,3],[8,9,4],[7,6,5]]"
      },
      {
        "input": "n = 1",
        "output": "[[1]]"
      }
    ],
    "constraints": [
      "1 <= n <= 20"
    ]
  },
  {
    "questionId": 61,
    "title": "Rotate List",
    "titleSlug": "rotate-list",
    "content": "<p>Given the `head` of a linked list, rotate the list to the right by `k` places.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def rotate_list(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [1,2,3,4,5], k = 2",
        "output": "[4,5,1,2,3]"
      },
      {
        "input": "head = [0,1,2], k = 4",
        "output": "[2,0,1]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range [0, 500].",
      "-100 <= Node.val <= 100",
      "0 <= k <= 2 * 109"
    ]
  },
  {
    "questionId": 62,
    "title": "Unique Paths",
    "titleSlug": "unique-paths",
    "content": "<p>A robot is located at the top-left corner of a `m x n` grid (marked 'Start' in the diagram below).</p>\n<p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).</p>\n<p>How many possible unique paths are there?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def unique_paths(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "m = 3, n = 7",
        "output": "28"
      },
      {
        "input": "m = 3, n = 2",
        "output": "3",
        "explanation": "From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:"
      },
      {
        "input": "m = 7, n = 3",
        "output": "28"
      },
      {
        "input": "m = 3, n = 3",
        "output": "6"
      }
    ],
    "constraints": [
      "1 <= m, n <= 100",
      "It's guaranteed that the answer will be less than or equal to 2 * 109."
    ]
  },
  {
    "questionId": 63,
    "title": "Unique Paths II",
    "titleSlug": "unique-paths-ii",
    "content": "<p>A robot is located at the top-left corner of a `m x n` grid (marked 'Start' in the diagram below).</p>\n<p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).</p>\n<p>Now consider if some obstacles are added to the grids. How many unique paths would there be?\nAn obstacle and space is marked as `1` and `0` respectively in the grid.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def unique_paths_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]",
        "output": "2",
        "explanation": "There is one obstacle in the middle of the 3x3 grid above."
      },
      {
        "input": "obstacleGrid = [[0,1],[0,0]]",
        "output": "1"
      }
    ],
    "constraints": [
      "m == obstacleGrid.length",
      "n == obstacleGrid[i].length",
      "1 <= m, n <= 100",
      "obstacleGrid[i][j] is 0 or 1."
    ]
  },
  {
    "questionId": 64,
    "title": "Minimum Path Sum",
    "titleSlug": "minimum-path-sum",
    "content": "<p>Given a `m x n` `grid` filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.</p>\n<p>Note: You can only move either down or right at any point in time.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_path_sum(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "grid = [[1,3,1],[1,5,1],[4,2,1]]",
        "output": "7",
        "explanation": "Because the path 1 \u2192 3 \u2192 1 \u2192 1 \u2192 1 minimizes the sum."
      },
      {
        "input": "grid = [[1,2,3],[4,5,6]]",
        "output": "12"
      }
    ],
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m, n <= 200",
      "0 <= grid[i][j] <= 100"
    ]
  },
  {
    "questionId": 66,
    "title": "Plus One",
    "titleSlug": "plus-one",
    "content": "<p>Given a non-empty array of decimal digits representing a non-negative integer, increment one to the integer.</p>\n<p>The digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.</p>\n<p>You may assume the integer does not contain any leading zero, except the number 0 itself.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def plus_one(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "digits = [1,2,3]",
        "output": "[1,2,4]",
        "explanation": "The array represents the integer 123."
      },
      {
        "input": "digits = [4,3,2,1]",
        "output": "[4,3,2,2]",
        "explanation": "The array represents the integer 4321."
      },
      {
        "input": "digits = [0]",
        "output": "[1]"
      }
    ],
    "constraints": [
      "1 <= digits.length <= 100",
      "0 <= digits[i] <= 9"
    ]
  },
  {
    "questionId": 67,
    "title": "Add Binary",
    "titleSlug": "add-binary",
    "content": "<p>Given two binary strings `a` and `b`, return their sum as a binary string.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def add_binary(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "a = \"11\", b = \"1\"",
        "output": "\"100\""
      },
      {
        "input": "a = \"1010\", b = \"1011\"",
        "output": "\"10101\""
      }
    ],
    "constraints": [
      "1 <= a.length, b.length <= 104",
      "a and b consist only of '0' or '1' characters.",
      "Each string does not contain leading zeros except for the zero itself."
    ]
  },
  {
    "questionId": 69,
    "title": "Sqrt(x)",
    "titleSlug": "sqrtx",
    "content": "<p>Given a non-negative integer `x`, compute and return the square root of `x`.</p>\n<p>Since the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sqrtx(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "x = 4",
        "output": "2"
      },
      {
        "input": "x = 8",
        "output": "2",
        "explanation": "The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned."
      }
    ],
    "constraints": [
      "0 <= x <= 231 - 1"
    ]
  },
  {
    "questionId": 70,
    "title": "Climbing Stairs",
    "titleSlug": "climbing-stairs",
    "content": "<p>You are climbing a staircase. It takes `n` steps to reach the top.</p>\n<p>Each time you can either climb `1` or `2` steps. In how many distinct ways can you climb to the top?</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def climbing_stairs(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 2",
        "output": "2",
        "explanation": "There are two ways to climb to the top."
      },
      {
        "input": "n = 3",
        "output": "3",
        "explanation": "There are three ways to climb to the top."
      }
    ],
    "constraints": [
      "1 <= n <= 45"
    ]
  },
  {
    "questionId": 71,
    "title": "Simplify Path",
    "titleSlug": "simplify-path",
    "content": "<p>Given a string `path`, which is an absolute path (starting with a slash `'/'`) to a file or directory in a Unix-style file system, convert it to the simplified canonical path.</p>\n<p>In a Unix-style file system, a period `'.'` refers to the current directory, a double period `'..'` refers to the directory up a level, and any multiple consecutive slashes (i.e. `'//'`) are treated as a single slash `'/'`. For this problem, any other format of periods such as `'...'` are treated as file/directory names.</p>\n<p>The canonical path should have the following format:\nThe path starts with a single slash `'/'`.</p>\n<p>Any two directories are separated by a single slash `'/'`.</p>\n<p>The path does not end with a trailing `'/'`.</p>\n<p>The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period `'.'` or double period `'..'`)\nReturn the simplified canonical path.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def simplify_path(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "path = \"/home/\"",
        "output": "\"/home\"",
        "explanation": "Note that there is no trailing slash after the last directory name."
      },
      {
        "input": "path = \"/../\"",
        "output": "\"/\"",
        "explanation": "Going one level up from the root directory is a no-op, as the root level is the highest level you can go."
      },
      {
        "input": "path = \"/home//foo/\"",
        "output": "\"/home/foo\"",
        "explanation": "In the canonical path, multiple consecutive slashes are replaced by a single one."
      },
      {
        "input": "path = \"/a/./b/../../c/\"",
        "output": "\"/c\""
      }
    ],
    "constraints": [
      "1 <= path.length <= 3000",
      "path consists of English letters, digits, period '.', slash '/' or '_'.",
      "path is a valid absolute Unix path."
    ]
  },
  {
    "questionId": 73,
    "title": "Set Matrix Zeroes",
    "titleSlug": "set-matrix-zeroes",
    "content": "<p>Given an `m x n` matrix. If an element is 0, set its entire row and column to 0. Do it in-place.</p>\n<p>Follow up:\nA straight forward solution using O(mn) space is probably a bad idea.</p>\n<p>A simple improvement uses O(m + n) space, but still not the best solution.</p>\n<p>Could you devise a constant space solution?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def set_matrix_zeroes(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "matrix = [[1,1,1],[1,0,1],[1,1,1]]",
        "output": "[[1,0,1],[0,0,0],[1,0,1]]"
      },
      {
        "input": "matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]",
        "output": "[[0,0,0,0],[0,4,5,0],[0,3,1,0]]"
      }
    ],
    "constraints": [
      "m == matrix.length",
      "n == matrix[0].length",
      "1 <= m, n <= 200",
      "-231 <= matrix[i][j] <= 231 - 1"
    ]
  },
  {
    "questionId": 74,
    "title": "Search a 2D Matrix",
    "titleSlug": "search-a-2d-matrix",
    "content": "<p>Write an efficient algorithm that searches for a value in an `m x n` matrix. This matrix has the following properties:\nIntegers in each row are sorted from left to right.</p>\n<p>The first integer of each row is greater than the last integer of the previous row.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def search_a_2d_matrix(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3",
        "output": "true"
      },
      {
        "input": "matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13",
        "output": "false"
      }
    ],
    "constraints": [
      "m == matrix.length",
      "n == matrix[i].length",
      "1 <= m, n <= 100",
      "-104 <= matrix[i][j], target <= 104"
    ]
  },
  {
    "questionId": 75,
    "title": "Sort Colors",
    "titleSlug": "sort-colors",
    "content": "<p>Given an array `nums` with `n` objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.</p>\n<p>We will use the integers `0`, `1`, and `2` to represent the color red, white, and blue, respectively.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sort_colors(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [2,0,2,1,1,0]",
        "output": "[0,0,1,1,2,2]"
      },
      {
        "input": "nums = [2,0,1]",
        "output": "[0,1,2]"
      },
      {
        "input": "nums = [0]",
        "output": "[0]"
      },
      {
        "input": "nums = [1]",
        "output": "[1]"
      }
    ],
    "constraints": [
      "n == nums.length",
      "1 <= n <= 300",
      "nums[i] is 0, 1, or 2.",
      "Follow up:",
      "Could you solve this problem without using the library's sort function?",
      "Could you come up with a one-pass algorithm using only O(1) constant space?"
    ]
  },
  {
    "questionId": 77,
    "title": "Combinations",
    "titleSlug": "combinations",
    "content": "<p>Given two integers `n` and `k`, return all possible combinations of `k` numbers out of the range `[1, n]`.</p>\n<p>You may return the answer in any order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def combinations(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 4, k = 2",
        "output": "["
      },
      {
        "input": "n = 1, k = 1",
        "output": "[[1]]"
      }
    ],
    "constraints": [
      "1 <= n <= 20",
      "1 <= k <= n"
    ]
  },
  {
    "questionId": 78,
    "title": "Subsets",
    "titleSlug": "subsets",
    "content": "<p>Given an integer array `nums` of unique elements, return all possible subsets (the power set).</p>\n<p>The solution set must not contain duplicate subsets. Return the solution in any order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def subsets(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3]",
        "output": "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]"
      },
      {
        "input": "nums = [0]",
        "output": "[[],[0]]"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10",
      "-10 <= nums[i] <= 10",
      "All the numbers of nums are unique."
    ]
  },
  {
    "questionId": 79,
    "title": "Word Search",
    "titleSlug": "word-search",
    "content": "<p>Given an `m x n` grid of characters `board` and a string `word`, return `true` if `word` exists in the grid.</p>\n<p>The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def word_search(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"",
        "output": "true"
      },
      {
        "input": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"",
        "output": "true"
      },
      {
        "input": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"",
        "output": "false"
      }
    ],
    "constraints": [
      "m == board.length",
      "n = board[i].length",
      "1 <= m, n <= 6",
      "1 <= word.length <= 15",
      "board and word consists of only lowercase and uppercase English letters.",
      "Follow up: Could you use search pruning to make your solution faster with a larger board?"
    ]
  },
  {
    "questionId": 80,
    "title": "Remove Duplicates from Sorted Array II",
    "titleSlug": "remove-duplicates-from-sorted-array-ii",
    "content": "<p>Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.</p>\n<p>Do not allocate extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory.</p>\n<p>Clarification:\nConfused why the returned value is an integer, but your answer is an array?\nNote that the input array is passed in by reference, which means a modification to the input array will be known to the caller.</p>\n<p>Internally you can think of this:\n// nums is passed in by reference. (i.e., without making a copy)\nint len = removeDuplicates(nums);\n// any modification to nums in your function would be known by the caller.</p>\n<p>// using the length returned by your function, it prints the first len elements.</p>\n<p>for (int i = 0; i < len; i++) {\n    print(nums[i]);\n}</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def remove_duplicates_from_sorted_array_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,1,1,2,2,3]",
        "output": "5, nums = [1,1,2,2,3]",
        "explanation": "Your function should return length = `5`, with the first five elements of `nums` being `1, 1, 2, 2` and 3 respectively. It doesn't matter what you leave beyond the returned length."
      },
      {
        "input": "nums = [0,0,1,1,1,1,2,3,3]",
        "output": "7, nums = [0,0,1,1,2,3,3]",
        "explanation": "Your function should return length = `7`, with the first seven elements of `nums` being modified to `0`, 0, 1, 1, 2, 3 and 3 respectively. It doesn't matter what values are set beyond the returned length."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 3 * 104",
      "-104 <= nums[i] <= 104",
      "nums is sorted in ascending order."
    ]
  },
  {
    "questionId": 81,
    "title": "Search in Rotated Sorted Array II",
    "titleSlug": "search-in-rotated-sorted-array-ii",
    "content": "<p>There is an integer array `nums` sorted in non-decreasing order (not necessarily with distinct values).</p>\n<p>Before being passed to your function, `nums` is rotated at an unknown pivot index `k` (`0 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (0-indexed). For example, `[0,1,2,4,4,4,5,6,6,7]` might be rotated at pivot index `5` and become `[4,5,6,6,7,0,1,2,4,4]`.</p>\n<p>Given the array `nums` after the rotation and an integer `target`, return `true` if `target` is in `nums`, or `false` if it is not in `nums`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def search_in_rotated_sorted_array_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [2,5,6,0,0,1,2], target = 0",
        "output": "true"
      },
      {
        "input": "nums = [2,5,6,0,0,1,2], target = 3",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 5000",
      "-104 <= nums[i] <= 104",
      "nums is guaranteed to be rotated at some pivot.",
      "-104 <= target <= 104",
      "Follow up: This problem is the same as Search in Rotated Sorted Array, where nums may contain duplicates. Would this affect the runtime complexity? How and why?"
    ]
  },
  {
    "questionId": 82,
    "title": "Remove Duplicates from Sorted List II",
    "titleSlug": "remove-duplicates-from-sorted-list-ii",
    "content": "<p>Given the `head` of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def remove_duplicates_from_sorted_list_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [1,2,3,3,4,4,5]",
        "output": "[1,2,5]"
      },
      {
        "input": "head = [1,1,1,2,3]",
        "output": "[2,3]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range [0, 300].",
      "-100 <= Node.val <= 100",
      "The list is guaranteed to be sorted in ascending order."
    ]
  },
  {
    "questionId": 83,
    "title": "Remove Duplicates from Sorted List",
    "titleSlug": "remove-duplicates-from-sorted-list",
    "content": "<p>Given the `head` of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def remove_duplicates_from_sorted_list(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [1,1,2]",
        "output": "[1,2]"
      },
      {
        "input": "head = [1,1,2,3,3]",
        "output": "[1,2,3]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range [0, 300].",
      "-100 <= Node.val <= 100",
      "The list is guaranteed to be sorted in ascending order."
    ]
  },
  {
    "questionId": 86,
    "title": "Partition List",
    "titleSlug": "partition-list",
    "content": "<p>Given the `head` of a linked list and a value `x`, partition it such that all nodes less than `x` come before nodes greater than or equal to `x`.</p>\n<p>You should preserve the original relative order of the nodes in each of the two partitions.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def partition_list(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [1,4,3,2,5,2], x = 3",
        "output": "[1,2,2,4,3,5]"
      },
      {
        "input": "head = [2,1], x = 2",
        "output": "[1,2]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range [0, 200].",
      "-100 <= Node.val <= 100",
      "-200 <= x <= 200"
    ]
  },
  {
    "questionId": 88,
    "title": "Merge Sorted Array",
    "titleSlug": "merge-sorted-array",
    "content": "<p>Given two sorted integer arrays `nums1` and `nums2`, merge `nums2` into `nums1` as one sorted array.</p>\n<p>The number of elements initialized in `nums1` and `nums2` are `m` and `n` respectively. You may assume that `nums1` has a size equal to `m + n` such that it has enough space to hold additional elements from `nums2`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def merge_sorted_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3",
        "output": "[1,2,2,3,5,6]"
      },
      {
        "input": "nums1 = [1], m = 1, nums2 = [], n = 0",
        "output": "[1]"
      }
    ],
    "constraints": [
      "nums1.length == m + n",
      "nums2.length == n",
      "0 <= m, n <= 200",
      "1 <= m + n <= 200",
      "-109 <= nums1[i], nums2[i] <= 109"
    ]
  },
  {
    "questionId": 89,
    "title": "Gray Code",
    "titleSlug": "gray-code",
    "content": "<p>The gray code is a binary numeral system where two successive values differ in only one bit.</p>\n<p>Given an integer `n` representing the total number of bits in the code, return any sequence of gray code.</p>\n<p>A gray code sequence must begin with `0`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def gray_code(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 2",
        "output": "[0,1,3,2]",
        "explanation": "00 - 0"
      },
      {
        "input": "n = 1",
        "output": "[0,1]"
      }
    ],
    "constraints": [
      "1 <= n <= 16"
    ]
  },
  {
    "questionId": 90,
    "title": "Subsets II",
    "titleSlug": "subsets-ii",
    "content": "<p>Given an integer array `nums` that may contain duplicates, return all possible subsets (the power set).</p>\n<p>The solution set must not contain duplicate subsets. Return the solution in any order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def subsets_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,2]",
        "output": "[[],[1],[1,2],[1,2,2],[2],[2,2]]"
      },
      {
        "input": "nums = [0]",
        "output": "[[],[0]]"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10",
      "-10 <= nums[i] <= 10"
    ]
  },
  {
    "questionId": 91,
    "title": "Decode Ways",
    "titleSlug": "decode-ways",
    "content": "<p>A message containing letters from `A-Z` can be encoded into numbers using the following mapping:\n'A' -> \"1\"\n'B' -> \"2\"\n...</p>\n<p>'Z' -> \"26\"\nTo decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, `\"11106\"` can be mapped into:\n`\"AAJF\"` with the grouping `(1 1 10 6)`\n`\"KJF\"` with the grouping `(11 10 6)`\nNote that the grouping `(1 11 06)` is invalid because `\"06\"` cannot be mapped into `'F'` since `\"6\"` is different from `\"06\"`.</p>\n<p>Given a string `s` containing only digits, return the number of ways to decode it.</p>\n<p>The answer is guaranteed to fit in a 32-bit integer.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def decode_ways(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"12\"",
        "output": "2",
        "explanation": "\"12\" could be decoded as \"AB\" (1 2) or \"L\" (12)."
      },
      {
        "input": "s = \"226\"",
        "output": "3",
        "explanation": "\"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6)."
      },
      {
        "input": "s = \"0\"",
        "output": "0",
        "explanation": "There is no character that is mapped to a number starting with 0."
      },
      {
        "input": "s = \"06\"",
        "output": "0",
        "explanation": "\"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\")."
      }
    ],
    "constraints": [
      "1 <= s.length <= 100",
      "s contains only digits and may contain leading zero(s)."
    ]
  },
  {
    "questionId": 92,
    "title": "Reverse Linked List II",
    "titleSlug": "reverse-linked-list-ii",
    "content": "<p>Given the `head` of a singly linked list and two integers `left` and `right` where `left <= right`, reverse the nodes of the list from position `left` to position `right`, and return the reversed list.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def reverse_linked_list_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [1,2,3,4,5], left = 2, right = 4",
        "output": "[1,4,3,2,5]"
      },
      {
        "input": "head = [5], left = 1, right = 1",
        "output": "[5]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is n.",
      "1 <= n <= 500",
      "-500 <= Node.val <= 500",
      "1 <= left <= right <= n",
      "Follow up: Could you do it in one pass?"
    ]
  },
  {
    "questionId": 93,
    "title": "Restore IP Addresses",
    "titleSlug": "restore-ip-addresses",
    "content": "<p>Given a string `s` containing only digits, return all possible valid IP addresses that can be obtained from `s`. You can return them in any order.</p>\n<p>A valid IP address consists of exactly four integers, each integer is between `0` and `255`, separated by single dots and cannot have leading zeros. For example, \"0.1.2.201\" and \"192.168.1.1\" are valid IP addresses and \"0.011.255.245\", \"192.168.1.312\" and \"192.168@1.1\" are invalid IP addresses.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def restore_ip_addresses(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"25525511135\"",
        "output": "[\"255.255.11.135\",\"255.255.111.35\"]"
      },
      {
        "input": "s = \"0000\"",
        "output": "[\"0.0.0.0\"]"
      },
      {
        "input": "s = \"1111\"",
        "output": "[\"1.1.1.1\"]"
      },
      {
        "input": "s = \"010010\"",
        "output": "[\"0.10.0.10\",\"0.100.1.0\"]"
      },
      {
        "input": "s = \"101023\"",
        "output": "[\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]"
      }
    ],
    "constraints": [
      "0 <= s.length <= 3000",
      "s consists of digits only."
    ]
  },
  {
    "questionId": 94,
    "title": "Binary Tree Inorder Traversal",
    "titleSlug": "binary-tree-inorder-traversal",
    "content": "<p>Given the `root` of a binary tree, return the inorder traversal of its nodes' values.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def binary_tree_inorder_traversal(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,null,2,3]",
        "output": "[1,3,2]"
      },
      {
        "input": "root = []",
        "output": "[]"
      },
      {
        "input": "root = [1]",
        "output": "[1]"
      },
      {
        "input": "root = [1,2]",
        "output": "[2,1]"
      },
      {
        "input": "root = [1,null,2]",
        "output": "[1,2]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 100].",
      "-100 <= Node.val <= 100",
      "Follow up:",
      "Recursive solution is trivial, could you do it iteratively?"
    ]
  },
  {
    "questionId": 95,
    "title": "Unique Binary Search Trees II",
    "titleSlug": "unique-binary-search-trees-ii",
    "content": "<p>Given an integer `n`, return all the structurally unique BST's (binary search trees), which has exactly `n` nodes of unique values from `1` to `n`. Return the answer in any order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def unique_binary_search_trees_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 3",
        "output": "[[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]"
      },
      {
        "input": "n = 1",
        "output": "[[1]]"
      }
    ],
    "constraints": [
      "1 <= n <= 8"
    ]
  },
  {
    "questionId": 96,
    "title": "Unique Binary Search Trees",
    "titleSlug": "unique-binary-search-trees",
    "content": "<p>Given an integer `n`, return the number of structurally unique BST's (binary search trees) which has exactly `n` nodes of unique values from `1` to `n`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def unique_binary_search_trees(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 3",
        "output": "5"
      },
      {
        "input": "n = 1",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= n <= 19"
    ]
  },
  {
    "questionId": 97,
    "title": "Interleaving String",
    "titleSlug": "interleaving-string",
    "content": "<p>Given strings `s1`, `s2`, and `s3`, find whether `s3` is formed by an interleaving of `s1` and `s2`.</p>\n<p>An interleaving of two strings `s` and `t` is a configuration where they are divided into non-empty substrings such that:\n`s = s1 + s2 + ... + sn`\n`t = t1 + t2 + ... + tm`\n`|n - m| <= 1`\nThe interleaving is `s1 + t1 + s2 + t2 + s3 + t3 + ...` or `t1 + s1 + t2 + s2 + t3 + s3 + ...`\nNote: `a + b` is the concatenation of strings `a` and `b`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def interleaving_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"",
        "output": "true"
      },
      {
        "input": "s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"",
        "output": "false"
      },
      {
        "input": "s1 = \"\", s2 = \"\", s3 = \"\"",
        "output": "true"
      }
    ],
    "constraints": [
      "0 <= s1.length, s2.length <= 100",
      "0 <= s3.length <= 200",
      "s1, s2, and s3 consist of lowercase English letters.",
      "Follow up: Could you solve it using only O(s2.length) additional memory space?"
    ]
  },
  {
    "questionId": 98,
    "title": "Validate Binary Search Tree",
    "titleSlug": "validate-binary-search-tree",
    "content": "<p>Given the `root` of a binary tree, determine if it is a valid binary search tree (BST).</p>\n<p>A valid BST is defined as follows:\nThe left subtree of a node contains only nodes with keys less than the node's key.</p>\n<p>The right subtree of a node contains only nodes with keys greater than the node's key.</p>\n<p>Both the left and right subtrees must also be binary search trees.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def validate_binary_search_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [2,1,3]",
        "output": "true"
      },
      {
        "input": "root = [5,1,4,null,null,3,6]",
        "output": "false",
        "explanation": "The root node's value is 5 but its right child's value is 4."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 104].",
      "-231 <= Node.val <= 231 - 1"
    ]
  },
  {
    "questionId": 100,
    "title": "Same Tree",
    "titleSlug": "same-tree",
    "content": "<p>Given the roots of two binary trees `p` and `q`, write a function to check if they are the same or not.</p>\n<p>Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def same_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "p = [1,2,3], q = [1,2,3]",
        "output": "true"
      },
      {
        "input": "p = [1,2], q = [1,null,2]",
        "output": "false"
      },
      {
        "input": "p = [1,2,1], q = [1,1,2]",
        "output": "false"
      }
    ],
    "constraints": [
      "The number of nodes in both trees is in the range [0, 100].",
      "-104 <= Node.val <= 104"
    ]
  },
  {
    "questionId": 101,
    "title": "Symmetric Tree",
    "titleSlug": "symmetric-tree",
    "content": "<p>Given the `root` of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def symmetric_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2,2,3,4,4,3]",
        "output": "true"
      },
      {
        "input": "root = [1,2,2,null,3,null,3]",
        "output": "false"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 1000].",
      "-100 <= Node.val <= 100",
      "Follow up: Could you solve it both recursively and iteratively?"
    ]
  },
  {
    "questionId": 102,
    "title": "Binary Tree Level Order Traversal",
    "titleSlug": "binary-tree-level-order-traversal",
    "content": "<p>Given the `root` of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def binary_tree_level_order_traversal(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [3,9,20,null,null,15,7]",
        "output": "[[3],[9,20],[15,7]]"
      },
      {
        "input": "root = [1]",
        "output": "[[1]]"
      },
      {
        "input": "root = []",
        "output": "[]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 2000].",
      "-1000 <= Node.val <= 1000"
    ]
  },
  {
    "questionId": 103,
    "title": "Binary Tree Zigzag Level Order Traversal",
    "titleSlug": "binary-tree-zigzag-level-order-traversal",
    "content": "<p>Given the `root` of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def binary_tree_zigzag_level_order_traversal(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [3,9,20,null,null,15,7]",
        "output": "[[3],[20,9],[15,7]]"
      },
      {
        "input": "root = [1]",
        "output": "[[1]]"
      },
      {
        "input": "root = []",
        "output": "[]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 2000].",
      "-100 <= Node.val <= 100"
    ]
  },
  {
    "questionId": 104,
    "title": "Maximum Depth of Binary Tree",
    "titleSlug": "maximum-depth-of-binary-tree",
    "content": "<p>Given the `root` of a binary tree, return its maximum depth.</p>\n<p>A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_depth_of_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [3,9,20,null,null,15,7]",
        "output": "3"
      },
      {
        "input": "root = [1,null,2]",
        "output": "2"
      },
      {
        "input": "root = []",
        "output": "0"
      },
      {
        "input": "root = [0]",
        "output": "1"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 104].",
      "-100 <= Node.val <= 100"
    ]
  },
  {
    "questionId": 105,
    "title": "Construct Binary Tree from Preorder and Inorder Traversal",
    "titleSlug": "construct-binary-tree-from-preorder-and-inorder-traversal",
    "content": "<p>Given two integer arrays `preorder` and `inorder` where `preorder` is the preorder traversal of a binary tree and `inorder` is the inorder traversal of the same tree, construct and return the binary tree.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def construct_binary_tree_from_preorder_and_inorder_traversal(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]",
        "output": "[3,9,20,null,null,15,7]"
      },
      {
        "input": "preorder = [-1], inorder = [-1]",
        "output": "[-1]"
      }
    ],
    "constraints": [
      "1 <= preorder.length <= 3000",
      "inorder.length == preorder.length",
      "-3000 <= preorder[i], inorder[i] <= 3000",
      "preorder and inorder consist of unique values.",
      "Each value of inorder also appears in preorder.",
      "preorder is guaranteed to be the preorder traversal of the tree.",
      "inorder is guaranteed to be the inorder traversal of the tree."
    ]
  },
  {
    "questionId": 106,
    "title": "Construct Binary Tree from Inorder and Postorder Traversal",
    "titleSlug": "construct-binary-tree-from-inorder-and-postorder-traversal",
    "content": "<p>Given two integer arrays `inorder` and `postorder` where `inorder` is the inorder traversal of a binary tree and `postorder` is the postorder traversal of the same tree, construct and return the binary tree.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def construct_binary_tree_from_inorder_and_postorder_traversal(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]",
        "output": "[3,9,20,null,null,15,7]"
      },
      {
        "input": "inorder = [-1], postorder = [-1]",
        "output": "[-1]"
      }
    ],
    "constraints": [
      "1 <= inorder.length <= 3000",
      "postorder.length == inorder.length",
      "-3000 <= inorder[i], postorder[i] <= 3000",
      "inorder and postorder consist of unique values.",
      "Each value of postorder also appears in inorder.",
      "inorder is guaranteed to be the inorder traversal of the tree.",
      "postorder is guaranteed to be the postorder traversal of the tree."
    ]
  },
  {
    "questionId": 107,
    "title": "Binary Tree Level Order Traversal II",
    "titleSlug": "binary-tree-level-order-traversal-ii",
    "content": "<p>Given the `root` of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def binary_tree_level_order_traversal_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [3,9,20,null,null,15,7]",
        "output": "[[15,7],[9,20],[3]]"
      },
      {
        "input": "root = [1]",
        "output": "[[1]]"
      },
      {
        "input": "root = []",
        "output": "[]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 2000].",
      "-1000 <= Node.val <= 1000"
    ]
  },
  {
    "questionId": 108,
    "title": "Convert Sorted Array to Binary Search Tree",
    "titleSlug": "convert-sorted-array-to-binary-search-tree",
    "content": "<p>Given an integer array `nums` where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.</p>\n<p>A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def convert_sorted_array_to_binary_search_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [-10,-3,0,5,9]",
        "output": "[0,-3,9,-10,null,5]",
        "explanation": "[0,-10,5,null,-3,null,9] is also accepted:"
      },
      {
        "input": "nums = [1,3]",
        "output": "[3,1]",
        "explanation": "[1,3] and [3,1] are both a height-balanced BSTs."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 104",
      "-104 <= nums[i] <= 104",
      "nums is sorted in a strictly increasing order."
    ]
  },
  {
    "questionId": 109,
    "title": "Convert Sorted List to Binary Search Tree",
    "titleSlug": "convert-sorted-list-to-binary-search-tree",
    "content": "<p>Given the `head` of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.</p>\n<p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def convert_sorted_list_to_binary_search_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [-10,-3,0,5,9]",
        "output": "[0,-3,9,-10,null,5]",
        "explanation": "One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST."
      },
      {
        "input": "head = []",
        "output": "[]"
      },
      {
        "input": "head = [0]",
        "output": "[0]"
      },
      {
        "input": "head = [1,3]",
        "output": "[3,1]"
      }
    ],
    "constraints": [
      "The number of nodes in head is in the range [0, 2 * 104].",
      "-10^5 <= Node.val <= 10^5"
    ]
  },
  {
    "questionId": 110,
    "title": "Balanced Binary Tree",
    "titleSlug": "balanced-binary-tree",
    "content": "<p>Given a binary tree, determine if it is height-balanced.</p>\n<p>For this problem, a height-balanced binary tree is defined as:\na binary tree in which the left and right subtrees of every node differ in height by no more than 1.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def balanced_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [3,9,20,null,null,15,7]",
        "output": "true"
      },
      {
        "input": "root = [1,2,2,3,3,null,null,4,4]",
        "output": "false"
      },
      {
        "input": "root = []",
        "output": "true"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 5000].",
      "-104 <= Node.val <= 104"
    ]
  },
  {
    "questionId": 111,
    "title": "Minimum Depth of Binary Tree",
    "titleSlug": "minimum-depth-of-binary-tree",
    "content": "<p>Given a binary tree, find its minimum depth.</p>\n<p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p>\n<p>Note: A leaf is a node with no children.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_depth_of_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [3,9,20,null,null,15,7]",
        "output": "2"
      },
      {
        "input": "root = [2,null,3,null,4,null,5,null,6]",
        "output": "5"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 105].",
      "-1000 <= Node.val <= 1000"
    ]
  },
  {
    "questionId": 112,
    "title": "Path Sum",
    "titleSlug": "path-sum",
    "content": "<p>Given the `root` of a binary tree and an integer `targetSum`, return `true` if the tree has a root-to-leaf path such that adding up all the values along the path equals `targetSum`.</p>\n<p>A leaf is a node with no children.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def path_sum(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22",
        "output": "true"
      },
      {
        "input": "root = [1,2,3], targetSum = 5",
        "output": "false"
      },
      {
        "input": "root = [1,2], targetSum = 0",
        "output": "false"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 5000].",
      "-1000 <= Node.val <= 1000",
      "-1000 <= targetSum <= 1000"
    ]
  },
  {
    "questionId": 113,
    "title": "Path Sum II",
    "titleSlug": "path-sum-ii",
    "content": "<p>Given the `root` of a binary tree and an integer `targetSum`, return all root-to-leaf paths where each path's sum equals `targetSum`.</p>\n<p>A leaf is a node with no children.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def path_sum_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22",
        "output": "[[5,4,11,2],[5,8,4,5]]"
      },
      {
        "input": "root = [1,2,3], targetSum = 5",
        "output": "[]"
      },
      {
        "input": "root = [1,2], targetSum = 0",
        "output": "[]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 5000].",
      "-1000 <= Node.val <= 1000",
      "-1000 <= targetSum <= 1000"
    ]
  },
  {
    "questionId": 114,
    "title": "Flatten Binary Tree to Linked List",
    "titleSlug": "flatten-binary-tree-to-linked-list",
    "content": "<p>Given the `root` of a binary tree, flatten the tree into a \"linked list\":\nThe \"linked list\" should use the same `TreeNode` class where the `right` child pointer points to the next node in the list and the `left` child pointer is always `null`.</p>\n<p>The \"linked list\" should be in the same order as a pre-order traversal of the binary tree.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def flatten_binary_tree_to_linked_list(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2,5,3,4,null,6]",
        "output": "[1,null,2,null,3,null,4,null,5,null,6]"
      },
      {
        "input": "root = []",
        "output": "[]"
      },
      {
        "input": "root = [0]",
        "output": "[0]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 2000].",
      "-100 <= Node.val <= 100",
      "Follow up: Can you flatten the tree in-place (with O(1) extra space)?"
    ]
  },
  {
    "questionId": 116,
    "title": "Populating Next Right Pointers in Each Node",
    "titleSlug": "populating-next-right-pointers-in-each-node",
    "content": "<p>You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`.</p>\n<p>Initially, all next pointers are set to `NULL`.</p>\n<p>Follow up:\nYou may only use constant extra space.</p>\n<p>Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def populating_next_right_pointers_in_each_node(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2,3,4,5,6,7]",
        "output": "[1,#,2,3,#,4,5,6,7,#]",
        "explanation": "Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level."
      }
    ],
    "constraints": [
      "The number of nodes in the given tree is less than 4096.",
      "-1000 <= node.val <= 1000"
    ]
  },
  {
    "questionId": 117,
    "title": "Populating Next Right Pointers in Each Node II",
    "titleSlug": "populating-next-right-pointers-in-each-node-ii",
    "content": "<p>Given a binary tree\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`.</p>\n<p>Initially, all next pointers are set to `NULL`.</p>\n<p>Follow up:\nYou may only use constant extra space.</p>\n<p>Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def populating_next_right_pointers_in_each_node_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2,3,4,5,null,7]",
        "output": "[1,#,2,3,#,4,5,7,#]",
        "explanation": "Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level."
      }
    ],
    "constraints": [
      "The number of nodes in the given tree is less than 6000.",
      "-100 <= node.val <= 100"
    ]
  },
  {
    "questionId": 118,
    "title": "Pascal's Triangle",
    "titleSlug": "pascals-triangle",
    "content": "<p>Given an integer `numRows`, return the first numRows of Pascal's triangle.</p>\n<p>In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def pascals_triangle(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "numRows = 5",
        "output": "[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]"
      },
      {
        "input": "numRows = 1",
        "output": "[[1]]"
      }
    ],
    "constraints": [
      "1 <= numRows <= 30"
    ]
  },
  {
    "questionId": 119,
    "title": "Pascal's Triangle II",
    "titleSlug": "pascals-triangle-ii",
    "content": "<p>Given an integer `rowIndex`, return the `rowIndexth` (0-indexed) row of the Pascal's triangle.</p>\n<p>In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def pascals_triangle_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "rowIndex = 3",
        "output": "[1,3,3,1]"
      },
      {
        "input": "rowIndex = 0",
        "output": "[1]"
      },
      {
        "input": "rowIndex = 1",
        "output": "[1,1]"
      }
    ],
    "constraints": [
      "0 <= rowIndex <= 33",
      "Follow up: Could you optimize your algorithm to use only O(rowIndex) extra space?"
    ]
  },
  {
    "questionId": 120,
    "title": "Triangle",
    "titleSlug": "triangle",
    "content": "<p>Given a `triangle` array, return the minimum path sum from top to bottom.</p>\n<p>For each step, you may move to an adjacent number of the row below. More formally, if you are on index `i` on the current row, you may move to either index `i` or index `i + 1` on the next row.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def triangle(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]",
        "output": "11",
        "explanation": "The triangle looks like:"
      },
      {
        "input": "triangle = [[-10]]",
        "output": "-10"
      }
    ],
    "constraints": [
      "1 <= triangle.length <= 200",
      "triangle[0].length == 1",
      "triangle[i].length == triangle[i - 1].length + 1",
      "-104 <= triangle[i][j] <= 104",
      "Follow up: Could you do this using only O(n) extra space, where n is the total number of rows in the triangle?"
    ]
  },
  {
    "questionId": 121,
    "title": "Best Time to Buy and Sell Stock",
    "titleSlug": "best-time-to-buy-and-sell-stock",
    "content": "<p>You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.</p>\n<p>You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.</p>\n<p>Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return `0`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def best_time_to_buy_and_sell_stock(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "prices = [7,1,5,3,6,4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5."
      },
      {
        "input": "prices = [7,6,4,3,1]",
        "output": "0",
        "explanation": "In this case, no transactions are done and the max profit = 0."
      }
    ],
    "constraints": [
      "1 <= prices.length <= 105",
      "0 <= prices[i] <= 104"
    ]
  },
  {
    "questionId": 122,
    "title": "Best Time to Buy and Sell Stock II",
    "titleSlug": "best-time-to-buy-and-sell-stock-ii",
    "content": "<p>You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.</p>\n<p>Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).</p>\n<p>Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def best_time_to_buy_and_sell_stock_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "prices = [7,1,5,3,6,4]",
        "output": "7",
        "explanation": "Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4."
      },
      {
        "input": "prices = [1,2,3,4,5]",
        "output": "4",
        "explanation": "Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4."
      },
      {
        "input": "prices = [7,6,4,3,1]",
        "output": "0",
        "explanation": "In this case, no transaction is done, i.e., max profit = 0."
      }
    ],
    "constraints": [
      "1 <= prices.length <= 3 * 104",
      "0 <= prices[i] <= 104"
    ]
  },
  {
    "questionId": 125,
    "title": "Valid Palindrome",
    "titleSlug": "valid-palindrome",
    "content": "<p>Given a string `s`, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def valid_palindrome(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"A man, a plan, a canal: Panama\"",
        "output": "true",
        "explanation": "\"amanaplanacanalpanama\" is a palindrome."
      },
      {
        "input": "s = \"race a car\"",
        "output": "false",
        "explanation": "\"raceacar\" is not a palindrome."
      }
    ],
    "constraints": [
      "1 <= s.length <= 2 * 105",
      "s consists only of printable ASCII characters."
    ]
  },
  {
    "questionId": 129,
    "title": "Sum Root to Leaf Numbers",
    "titleSlug": "sum-root-to-leaf-numbers",
    "content": "<p>You are given the `root` of a binary tree containing digits from `0` to `9` only.</p>\n<p>Each root-to-leaf path in the tree represents a number.</p>\n<p>For example, the root-to-leaf path `1 -> 2 -> 3` represents the number `123`.</p>\n<p>Return the total sum of all root-to-leaf numbers.</p>\n<p>A leaf node is a node with no children.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sum_root_to_leaf_numbers(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2,3]",
        "output": "25",
        "explanation": "The root-to-leaf path `1->2` represents the number `12`."
      },
      {
        "input": "root = [4,9,0,5,1]",
        "output": "1026",
        "explanation": "The root-to-leaf path `4->9->5` represents the number 495."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 1000].",
      "0 <= Node.val <= 9",
      "The depth of the tree will not exceed 10."
    ]
  },
  {
    "questionId": 130,
    "title": "Surrounded Regions",
    "titleSlug": "surrounded-regions",
    "content": "<p>Given an `m x n` matrix `board` containing `'X'` and `'O'`, capture all regions surrounded by `'X'`.</p>\n<p>A region is captured by flipping all `'O'`s into `'X'`s in that surrounded region.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def surrounded_regions(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]",
        "output": "[[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]",
        "explanation": "Surrounded regions should not be on the border, which means that any 'O' on the border of the board are not flipped to 'X'. Any 'O' that is not on the border and it is not connected to an 'O' on the border will be flipped to 'X'. Two cells are connected if they are adjacent cells connected horizontally or vertically."
      },
      {
        "input": "board = [[\"X\"]]",
        "output": "[[\"X\"]]"
      }
    ],
    "constraints": [
      "m == board.length",
      "n == board[i].length",
      "1 <= m, n <= 200",
      "board[i][j] is 'X' or 'O'."
    ]
  },
  {
    "questionId": 131,
    "title": "Palindrome Partitioning",
    "titleSlug": "palindrome-partitioning",
    "content": "<p>Given a string `s`, partition `s` such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of `s`.</p>\n<p>A palindrome string is a string that reads the same backward as forward.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def palindrome_partitioning(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"aab\"",
        "output": "[[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]"
      },
      {
        "input": "s = \"a\"",
        "output": "[[\"a\"]]"
      }
    ],
    "constraints": [
      "1 <= s.length <= 16",
      "s contains only lowercase English letters."
    ]
  },
  {
    "questionId": 133,
    "title": "Clone Graph",
    "titleSlug": "clone-graph",
    "content": "<p>Given a reference of a node in a connected undirected graph.</p>\n<p>Return a deep copy (clone) of the graph.</p>\n<p>Each node in the graph contains a val (`int`) and a list (`List[Node]`) of its neighbors.</p>\n<p>class Node {\n    public int val;\n    public List<Node> neighbors;\n}\nTest case format:\nFor simplicity sake, each node's value is the same as the node's index (1-indexed). For example, the first node with `val = 1`, the second node with `val = 2`, and so on. The graph is represented in the test case using an adjacency list.</p>\n<p>Adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.</p>\n<p>The given node will always be the first node with `val = 1`. You must return the copy of the given node as a reference to the cloned graph.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def clone_graph(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "adjList = [[2,4],[1,3],[2,4],[1,3]]",
        "output": "[[2,4],[1,3],[2,4],[1,3]]",
        "explanation": "There are 4 nodes in the graph."
      },
      {
        "input": "adjList = [[]]",
        "output": "[[]]",
        "explanation": "Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors."
      },
      {
        "input": "adjList = []",
        "output": "[]",
        "explanation": "This an empty graph, it does not have any nodes."
      },
      {
        "input": "adjList = [[2],[1]]",
        "output": "[[2],[1]]"
      }
    ],
    "constraints": [
      "1 <= Node.val <= 100",
      "Node.val is unique for each node.",
      "Number of Nodes will not exceed 100.",
      "There is no repeated edges and no self-loops in the graph.",
      "The Graph is connected and all nodes can be visited starting from the given node."
    ]
  },
  {
    "questionId": 134,
    "title": "Gas Station",
    "titleSlug": "gas-station",
    "content": "<p>There are `n` gas stations along a circular route, where the amount of gas at the `ith` station is `gas[i]`.</p>\n<p>You have a car with an unlimited gas tank and it costs `cost[i]` of gas to travel from the `ith` station to its next `(i + 1)th` station. You begin the journey with an empty tank at one of the gas stations.</p>\n<p>Given two integer arrays `gas` and `cost`, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return `-1`. If there exists a solution, it is guaranteed to be unique</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def gas_station(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "gas = [1,2,3,4,5], cost = [3,4,5,1,2]",
        "output": "3",
        "explanation": "Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4"
      },
      {
        "input": "gas = [2,3,4], cost = [3,4,3]",
        "output": "-1",
        "explanation": "You can't start at station 0 or 1, as there is not enough gas to travel to the next station."
      }
    ],
    "constraints": [
      "gas.length == n",
      "cost.length == n",
      "1 <= n <= 104",
      "0 <= gas[i], cost[i] <= 104"
    ]
  },
  {
    "questionId": 136,
    "title": "Single Number",
    "titleSlug": "single-number",
    "content": "<p>Given a non-empty array of integers `nums`, every element appears twice except for one. Find that single one.</p>\n<p>Follow up: Could you implement a solution with a linear runtime complexity and without using extra memory?</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def single_number(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [2,2,1]",
        "output": "1"
      },
      {
        "input": "nums = [4,1,2,1,2]",
        "output": "4"
      },
      {
        "input": "nums = [1]",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 3 * 104",
      "-3 * 104 <= nums[i] <= 3 * 104",
      "Each element in the array appears twice except for one element which appears only once."
    ]
  },
  {
    "questionId": 137,
    "title": "Single Number II",
    "titleSlug": "single-number-ii",
    "content": "<p>Given an integer array `nums` where every element appears three times except for one, which appears exactly once. Find the single element and return it.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def single_number_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [2,2,3,2]",
        "output": "3"
      },
      {
        "input": "nums = [0,1,0,1,0,1,99]",
        "output": "99"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 3 * 104",
      "-231 <= nums[i] <= 231 - 1",
      "Each element in nums appears exactly three times except for one element which appears once.",
      "Follow up: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?"
    ]
  },
  {
    "questionId": 138,
    "title": "Copy List with Random Pointer",
    "titleSlug": "copy-list-with-random-pointer",
    "content": "<p>A linked list of length `n` is given such that each node contains an additional random pointer, which could point to any node in the list, or `null`.</p>\n<p>Construct a deep copy of the list. The deep copy should consist of exactly `n` brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the `next` and `random` pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.</p>\n<p>For example, if there are two nodes `X` and `Y` in the original list, where `X.random --> Y`, then for the corresponding two nodes `x` and `y` in the copied list, `x.random --> y`.</p>\n<p>Return the head of the copied linked list.</p>\n<p>The linked list is represented in the input/output as a list of `n` nodes. Each node is represented as a pair of `[val, random_index]` where:\n`val`: an integer representing `Node.val`\n`random_index`: the index of the node (range from `0` to `n-1`) that the `random` pointer points to, or `null` if it does not point to any node.</p>\n<p>Your code will only be given the `head` of the original linked list.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def copy_list_with_random_pointer(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [[7,null],[13,0],[11,4],[10,2],[1,0]]",
        "output": "[[7,null],[13,0],[11,4],[10,2],[1,0]]"
      },
      {
        "input": "head = [[1,1],[2,1]]",
        "output": "[[1,1],[2,1]]"
      },
      {
        "input": "head = [[3,null],[3,0],[3,null]]",
        "output": "[[3,null],[3,0],[3,null]]"
      },
      {
        "input": "head = []",
        "output": "[]",
        "explanation": "The given linked list is empty (null pointer), so return null."
      }
    ],
    "constraints": [
      "0 <= n <= 1000",
      "-10000 <= Node.val <= 10000",
      "Node.random is null or is pointing to some node in the linked list."
    ]
  },
  {
    "questionId": 139,
    "title": "Word Break",
    "titleSlug": "word-break",
    "content": "<p>Given a string `s` and a dictionary of strings `wordDict`, return `true` if `s` can be segmented into a space-separated sequence of one or more dictionary words.</p>\n<p>Note that the same word in the dictionary may be reused multiple times in the segmentation.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def word_break(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"leetcode\", wordDict = [\"leet\",\"code\"]",
        "output": "true",
        "explanation": "Return true because \"leetcode\" can be segmented as \"leet code\"."
      },
      {
        "input": "s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]",
        "output": "true",
        "explanation": "Return true because \"applepenapple\" can be segmented as \"apple pen apple\"."
      },
      {
        "input": "s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= s.length <= 300",
      "1 <= wordDict.length <= 1000",
      "1 <= wordDict[i].length <= 20",
      "s and wordDict[i] consist of only lowercase English letters.",
      "All the strings of wordDict are unique."
    ]
  },
  {
    "questionId": 141,
    "title": "Linked List Cycle",
    "titleSlug": "linked-list-cycle",
    "content": "<p>Given `head`, the head of a linked list, determine if the linked list has a cycle in it.</p>\n<p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to. Note that `pos` is not passed as a parameter.</p>\n<p>Return `true` if there is a cycle in the linked list. Otherwise, return `false`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def linked_list_cycle(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [3,2,0,-4], pos = 1",
        "output": "true",
        "explanation": "There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed)."
      },
      {
        "input": "head = [1,2], pos = 0",
        "output": "true",
        "explanation": "There is a cycle in the linked list, where the tail connects to the 0th node."
      },
      {
        "input": "head = [1], pos = -1",
        "output": "false",
        "explanation": "There is no cycle in the linked list."
      }
    ],
    "constraints": [
      "The number of the nodes in the list is in the range [0, 104].",
      "-105 <= Node.val <= 105",
      "pos is -1 or a valid index in the linked-list.",
      "Follow up: Can you solve it using O(1) (i.e. constant) memory?"
    ]
  },
  {
    "questionId": 142,
    "title": "Linked List Cycle II",
    "titleSlug": "linked-list-cycle-ii",
    "content": "<p>Given a linked list, return the node where the cycle begins. If there is no cycle, return `null`.</p>\n<p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to. Note that `pos` is not passed as a parameter.</p>\n<p>Notice that you should not modify the linked list.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def linked_list_cycle_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [3,2,0,-4], pos = 1",
        "output": "tail connects to node index 1",
        "explanation": "There is a cycle in the linked list, where tail connects to the second node."
      },
      {
        "input": "head = [1,2], pos = 0",
        "output": "tail connects to node index 0",
        "explanation": "There is a cycle in the linked list, where tail connects to the first node."
      },
      {
        "input": "head = [1], pos = -1",
        "output": "no cycle",
        "explanation": "There is no cycle in the linked list."
      }
    ],
    "constraints": [
      "The number of the nodes in the list is in the range [0, 104].",
      "-105 <= Node.val <= 105",
      "pos is -1 or a valid index in the linked-list.",
      "Follow up: Can you solve it using O(1) (i.e. constant) memory?"
    ]
  },
  {
    "questionId": 143,
    "title": "Reorder List",
    "titleSlug": "reorder-list",
    "content": "<p>You are given the head of a singly linked-list. The list can be represented as:\nL0 \u2192 L1 \u2192 ... \u2192 Ln - 1 \u2192 Ln\nReorder the list to be on the following form:\nL0 \u2192 Ln \u2192 L1 \u2192 Ln - 1 \u2192 L2 \u2192 Ln - 2 \u2192 ...</p>\n<p>You may not modify the values in the list's nodes. Only nodes themselves may be changed.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def reorder_list(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [1,2,3,4]",
        "output": "[1,4,2,3]"
      },
      {
        "input": "head = [1,2,3,4,5]",
        "output": "[1,5,2,4,3]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range [1, 5 * 104].",
      "1 <= Node.val <= 1000"
    ]
  },
  {
    "questionId": 144,
    "title": "Binary Tree Preorder Traversal",
    "titleSlug": "binary-tree-preorder-traversal",
    "content": "<p>Given the `root` of a binary tree, return the preorder traversal of its nodes' values.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def binary_tree_preorder_traversal(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,null,2,3]",
        "output": "[1,2,3]"
      },
      {
        "input": "root = []",
        "output": "[]"
      },
      {
        "input": "root = [1]",
        "output": "[1]"
      },
      {
        "input": "root = [1,2]",
        "output": "[1,2]"
      },
      {
        "input": "root = [1,null,2]",
        "output": "[1,2]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 100].",
      "-100 <= Node.val <= 100",
      "Follow up: Recursive solution is trivial, could you do it iteratively?"
    ]
  },
  {
    "questionId": 145,
    "title": "Binary Tree Postorder Traversal",
    "titleSlug": "binary-tree-postorder-traversal",
    "content": "<p>Given the `root` of a binary tree, return the postorder traversal of its nodes' values.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def binary_tree_postorder_traversal(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,null,2,3]",
        "output": "[3,2,1]"
      },
      {
        "input": "root = []",
        "output": "[]"
      },
      {
        "input": "root = [1]",
        "output": "[1]"
      },
      {
        "input": "root = [1,2]",
        "output": "[2,1]"
      },
      {
        "input": "root = [1,null,2]",
        "output": "[2,1]"
      }
    ],
    "constraints": [
      "The number of the nodes in the tree is in the range [0, 100].",
      "-100 <= Node.val <= 100",
      "Follow up:",
      "Recursive solution is trivial, could you do it iteratively?"
    ]
  },
  {
    "questionId": 146,
    "title": "LRU Cache",
    "titleSlug": "lru-cache",
    "content": "<p>Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.</p>\n<p>Implement the `LRUCache` class:\n`LRUCache(int capacity)` Initialize the LRU cache with positive size `capacity`.</p>\n<p>`int get(int key)` Return the value of the `key` if the key exists, otherwise return `-1`.</p>\n<p>`void put(int key, int value)` Update the value of the `key` if the `key` exists. Otherwise, add the `key-value` pair to the cache. If the number of keys exceeds the `capacity` from this operation, evict the least recently used key.</p>\n<p>Follow up:\nCould you do `get` and `put` in `O(1)` time complexity?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def lru_cache(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= capacity <= 3000",
      "0 <= key <= 3000",
      "0 <= value <= 104",
      "At most 3 * 104 calls will be made to get and put."
    ]
  },
  {
    "questionId": 147,
    "title": "Insertion Sort List",
    "titleSlug": "insertion-sort-list",
    "content": "<p>Given the `head` of a singly linked list, sort the list using insertion sort, and return the sorted list's head.</p>\n<p>The steps of the insertion sort algorithm:\nInsertion sort iterates, consuming one input element each repetition and growing a sorted output list.</p>\n<p>At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.</p>\n<p>It repeats until no input elements remain.</p>\n<p>The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def insertion_sort_list(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [4,2,1,3]",
        "output": "[1,2,3,4]"
      },
      {
        "input": "head = [-1,5,3,4,0]",
        "output": "[-1,0,3,4,5]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range [1, 5000].",
      "-5000 <= Node.val <= 5000"
    ]
  },
  {
    "questionId": 148,
    "title": "Sort List",
    "titleSlug": "sort-list",
    "content": "<p>Given the `head` of a linked list, return the list after sorting it in ascending order.</p>\n<p>Follow up: Can you sort the linked list in `O(n logn)` time and `O(1)` memory (i.e. constant space)?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sort_list(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [4,2,1,3]",
        "output": "[1,2,3,4]"
      },
      {
        "input": "head = [-1,5,3,4,0]",
        "output": "[-1,0,3,4,5]"
      },
      {
        "input": "head = []",
        "output": "[]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range [0, 5 * 104].",
      "-105 <= Node.val <= 105"
    ]
  },
  {
    "questionId": 150,
    "title": "Evaluate Reverse Polish Notation",
    "titleSlug": "evaluate-reverse-polish-notation",
    "content": "<p>Evaluate the value of an arithmetic expression in Reverse Polish Notation.</p>\n<p>Valid operators are `+`, `-`, `*`, and `/`. Each operand may be an integer or another expression.</p>\n<p>Note that division between two integers should truncate toward zero.</p>\n<p>It is guaranteed that the given RPN expression is always valid. That means the expression would always evaluate to a result, and there will not be any division by zero operation.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def evaluate_reverse_polish_notation(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]",
        "output": "9",
        "explanation": "((2 + 1) * 3) = 9"
      },
      {
        "input": "tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]",
        "output": "6",
        "explanation": "(4 + (13 / 5)) = 6"
      },
      {
        "input": "tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]",
        "output": "22",
        "explanation": "((10 * (6 / ((9 + 3) * -11))) + 17) + 5"
      }
    ],
    "constraints": [
      "1 <= tokens.length <= 104",
      "tokens[i] is either an operator: \"+\", \"-\", \"*\", or \"/\", or an integer in the range [-200, 200]."
    ]
  },
  {
    "questionId": 151,
    "title": "Reverse Words in a String",
    "titleSlug": "reverse-words-in-a-string",
    "content": "<p>Given an input string `s`, reverse the order of the words.</p>\n<p>A word is defined as a sequence of non-space characters. The words in `s` will be separated by at least one space.</p>\n<p>Return a string of the words in reverse order concatenated by a single space.</p>\n<p>Note that `s` may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def reverse_words_in_a_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"the sky is blue\"",
        "output": "\"blue is sky the\""
      },
      {
        "input": "s = \"  hello world  \"",
        "output": "\"world hello\"",
        "explanation": "Your reversed string should not contain leading or trailing spaces."
      },
      {
        "input": "s = \"a good   example\"",
        "output": "\"example good a\"",
        "explanation": "You need to reduce multiple spaces between two words to a single space in the reversed string."
      },
      {
        "input": "s = \"  Bob    Loves  Alice   \"",
        "output": "\"Alice Loves Bob\""
      },
      {
        "input": "s = \"Alice does not even like bob\"",
        "output": "\"bob like even not does Alice\""
      }
    ],
    "constraints": [
      "1 <= s.length <= 104",
      "s contains English letters (upper-case and lower-case), digits, and spaces ' '.",
      "There is at least one word in s.",
      "Follow up: Could you solve it in-place with O(1) extra space?"
    ]
  },
  {
    "questionId": 152,
    "title": "Maximum Product Subarray",
    "titleSlug": "maximum-product-subarray",
    "content": "<p>Given an integer array `nums`, find a contiguous non-empty subarray within the array that has the largest product, and return the product.</p>\n<p>It is guaranteed that the answer will fit in a 32-bit integer.</p>\n<p>A subarray is a contiguous subsequence of the array.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_product_subarray(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [2,3,-2,4]",
        "output": "6",
        "explanation": "[2,3] has the largest product 6."
      },
      {
        "input": "nums = [-2,0,-1]",
        "output": "0",
        "explanation": "The result cannot be 2, because [-2,-1] is not a subarray."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 2 * 104",
      "-10 <= nums[i] <= 10",
      "The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer."
    ]
  },
  {
    "questionId": 153,
    "title": "Find Minimum in Rotated Sorted Array",
    "titleSlug": "find-minimum-in-rotated-sorted-array",
    "content": "<p>Suppose an array of length `n` sorted in ascending order is rotated between `1` and `n` times. For example, the array `nums = [0,1,2,4,5,6,7]` might become:\n`[4,5,6,7,0,1,2]` if it was rotated `4` times.</p>\n<p>`[0,1,2,4,5,6,7]` if it was rotated `7` times.</p>\n<p>Notice that rotating an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.</p>\n<p>Given the sorted rotated array `nums` of unique elements, return the minimum element of this array.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_minimum_in_rotated_sorted_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [3,4,5,1,2]",
        "output": "1",
        "explanation": "The original array was [1,2,3,4,5] rotated 3 times."
      },
      {
        "input": "nums = [4,5,6,7,0,1,2]",
        "output": "0",
        "explanation": "The original array was [0,1,2,4,5,6,7] and it was rotated 4 times."
      },
      {
        "input": "nums = [11,13,15,17]",
        "output": "11",
        "explanation": "The original array was [11,13,15,17] and it was rotated 4 times."
      }
    ],
    "constraints": [
      "n == nums.length",
      "1 <= n <= 5000",
      "-5000 <= nums[i] <= 5000",
      "All the integers of nums are unique.",
      "nums is sorted and rotated between 1 and n times."
    ]
  },
  {
    "questionId": 155,
    "title": "Min Stack",
    "titleSlug": "min-stack",
    "content": "<p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p>\n<p>Implement the `MinStack` class:\n`MinStack()` initializes the stack object.</p>\n<p>`void push(val)` pushes the element `val` onto the stack.</p>\n<p>`void pop()` removes the element on the top of the stack.</p>\n<p>`int top()` gets the top element of the stack.</p>\n<p>`int getMin()` retrieves the minimum element in the stack.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def min_stack(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "-231 <= val <= 231 - 1",
      "Methods pop, top and getMin operations will always be called on non-empty stacks.",
      "At most 3 * 104 calls will be made to push, pop, top, and getMin."
    ]
  },
  {
    "questionId": 156,
    "title": "Binary Tree Upside Down",
    "titleSlug": "binary-tree-upside-down",
    "content": "<p>Given the `root` of a binary tree, turn the tree upside down and return the new root.</p>\n<p>You can turn a binary tree upside down with the following steps:\nThe original left child becomes the new root.</p>\n<p>The original root becomes the new right child.</p>\n<p>The original right child becomes the new left child.</p>\n<p>The mentioned steps are done level by level, it is guaranteed that every node in the given tree has either 0 or 2 children.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def binary_tree_upside_down(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2,3,4,5]",
        "output": "[4,5,2,null,null,3,1]"
      },
      {
        "input": "root = []",
        "output": "[]"
      },
      {
        "input": "root = [1]",
        "output": "[1]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree will be in the range [0, 10].",
      "1 <= Node.val <= 10",
      "Every node has either 0 or 2 children."
    ]
  },
  {
    "questionId": 157,
    "title": "Read N Characters Given Read4",
    "titleSlug": "read-n-characters-given-read4",
    "content": "<p>Given a `file` and assume that you can only read the file using a given method `read4`, implement a method to read `n` characters.</p>\n<p>Method read4: \nThe API `read4` reads four consecutive characters from `file`, then writes those characters into the buffer array `buf4`.</p>\n<p>The return value is the number of actual characters read.</p>\n<p>Note that `read4()` has its own file pointer, much like `FILE *fp` in C.</p>\n<p>Definition of read4:\n    Parameter:  char[] buf4\n    Returns:    int\nbuf4[] is a destination, not a source. The results from read4 will be copied to buf4[].</p>\n<p>Below is a high-level example of how `read4` works:\nFile file(\"abcde`\"); // File is \"`abcde`\", initially file pointer (fp) points to 'a'\nchar[] buf4 = new char[4]; // Create buffer with enough space to store characters\nread4(buf4); // read4 returns 4. Now buf4 = \"abcd\", fp points to 'e'\nread4(buf4); // read4 returns 1. Now buf4 = \"e\", fp points to end of file\nread4(buf4); // read4 returns 0. Now buf4 = \"\", fp points to end of file`\nMethod read:\nBy using the `read4` method, implement the method read that reads `n` characters from `file` and store it in the buffer array `buf`. Consider that you cannot manipulate `file` directly.</p>\n<p>The return value is the number of actual characters read.</p>\n<p>Definition of read: \n    Parameters:\tchar[] buf, int n\n    Returns:\tint\nbuf[] is a destination, not a source. You will need to write the results to buf[].</p>\n<p>Note:\nConsider that you cannot manipulate the file directly. The file is only accessible for `read4` but not for `read`.</p>\n<p>The `read` function will only be called once for each test case.</p>\n<p>You may assume the destination buffer array, `buf`, is guaranteed to have enough space for storing `n` characters.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def read_n_characters_given_read4(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "file = \"abc\", n = 4",
        "output": "3",
        "explanation": "After calling your read method, buf should contain \"abc\". We read a total of 3 characters from the file, so return 3."
      },
      {
        "input": "file = \"abcde\", n = 5",
        "output": "5",
        "explanation": "After calling your read method, buf should contain \"abcde\". We read a total of 5 characters from the file, so return 5."
      },
      {
        "input": "file = \"abcdABCD1234\", n = 12",
        "output": "12",
        "explanation": "After calling your read method, buf should contain \"abcdABCD1234\". We read a total of 12 characters from the file, so return 12."
      },
      {
        "input": "file = \"leetcode\", n = 5",
        "output": "5",
        "explanation": "After calling your read method, buf should contain \"leetc\". We read a total of 5 characters from the file, so return 5."
      }
    ],
    "constraints": [
      "1 <= file.length <= 500",
      "file consist of English letters and digits.",
      "1 <= n <= 1000"
    ]
  },
  {
    "questionId": 159,
    "title": "Longest Substring with At Most Two Distinct Characters",
    "titleSlug": "longest-substring-with-at-most-two-distinct-characters",
    "content": "<p>Given a string `s`, return the length of the longest substring that contains at most two distinct characters.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_substring_with_at_most_two_distinct_characters(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"eceba\"",
        "output": "3",
        "explanation": "The substring is \"ece\" which its length is 3."
      },
      {
        "input": "s = \"ccaabbb\"",
        "output": "5",
        "explanation": "The substring is \"aabbb\" which its length is 5."
      }
    ],
    "constraints": [
      "1 <= s.length <= 104",
      "s consists of English letters."
    ]
  },
  {
    "questionId": 160,
    "title": "Intersection of Two Linked Lists",
    "titleSlug": "intersection-of-two-linked-lists",
    "content": "<p>Given the heads of two singly linked-lists `headA` and `headB`, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return `null`.</p>\n<p>For example, the following two linked lists begin to intersect at node `c1`:\nIt is guaranteed that there are no cycles anywhere in the entire linked structure.</p>\n<p>Note that the linked lists must retain their original structure after the function returns.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def intersection_of_two_linked_lists(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3",
        "output": "Intersected at '8'",
        "explanation": "The intersected node's value is 8 (note that this must not be 0 if the two lists intersect)."
      },
      {
        "input": "intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1",
        "output": "Intersected at '2'",
        "explanation": "The intersected node's value is 2 (note that this must not be 0 if the two lists intersect)."
      },
      {
        "input": "intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2",
        "output": "No intersection",
        "explanation": "From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values."
      }
    ],
    "constraints": [
      "The number of nodes of listA is in the m.",
      "The number of nodes of listB is in the n.",
      "0 <= m, n <= 3 * 104",
      "1 <= Node.val <= 105",
      "0 <= skipA <= m",
      "0 <= skipB <= n",
      "intersectVal is 0 if listA and listB do not intersect.",
      "intersectVal == listA[skipA + 1] == listB[skipB + 1] if listA and listB intersect.",
      "Follow up: Could you write a solution that runs in O(n) time and use only O(1) memory?"
    ]
  },
  {
    "questionId": 161,
    "title": "One Edit Distance",
    "titleSlug": "one-edit-distance",
    "content": "<p>Given two strings `s` and `t`, return `true` if they are both one edit distance apart, otherwise return `false`.</p>\n<p>A string `s` is said to be one distance apart from a string `t` if you can:\nInsert exactly one character into `s` to get `t`.</p>\n<p>Delete exactly one character from `s` to get `t`.</p>\n<p>Replace exactly one character of `s` with a different character to get `t`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def one_edit_distance(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"ab\", t = \"acb\"",
        "output": "true",
        "explanation": "We can insert 'c' into s to get t."
      },
      {
        "input": "s = \"\", t = \"\"",
        "output": "false",
        "explanation": "We cannot get t from s by only one step."
      },
      {
        "input": "s = \"a\", t = \"\"",
        "output": "true"
      },
      {
        "input": "s = \"\", t = \"A\"",
        "output": "true"
      }
    ],
    "constraints": [
      "0 <= s.length <= 104",
      "0 <= t.length <= 104",
      "s and t consist of lower-case letters, upper-case letters and/or digits."
    ]
  },
  {
    "questionId": 162,
    "title": "Find Peak Element",
    "titleSlug": "find-peak-element",
    "content": "<p>A peak element is an element that is strictly greater than its neighbors.</p>\n<p>Given an integer array `nums`, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.</p>\n<p>You may imagine that `nums[-1] = nums[n] = -\u221e`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_peak_element(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3,1]",
        "output": "2",
        "explanation": "3 is a peak element and your function should return the index number 2."
      },
      {
        "input": "nums = [1,2,1,3,5,6,4]",
        "output": "5",
        "explanation": "Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 1000",
      "-231 <= nums[i] <= 231 - 1",
      "nums[i] != nums[i + 1] for all valid i.",
      "Follow up: Could you implement a solution with logarithmic complexity?"
    ]
  },
  {
    "questionId": 163,
    "title": "Missing Ranges",
    "titleSlug": "missing-ranges",
    "content": "<p>You are given an inclusive range `[lower, upper]` and a sorted unique integer array `nums`, where all elements are in the inclusive range.</p>\n<p>A number `x` is considered missing if `x` is in the range `[lower, upper]` and `x` is not in `nums`.</p>\n<p>Return the smallest sorted list of ranges that cover every missing number exactly. That is, no element of `nums` is in any of the ranges, and each missing number is in one of the ranges.</p>\n<p>Each range `[a,b]` in the list should be output as:\n`\"a->b\"` if `a != b`\n`\"a\"` if `a == b`</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def missing_ranges(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [0,1,3,50,75], lower = 0, upper = 99",
        "output": "[\"2\",\"4->49\",\"51->74\",\"76->99\"]",
        "explanation": "The ranges are:"
      },
      {
        "input": "nums = [], lower = 1, upper = 1",
        "output": "[\"1\"]",
        "explanation": "The only missing range is [1,1], which becomes \"1\"."
      },
      {
        "input": "nums = [], lower = -3, upper = -1",
        "output": "[\"-3->-1\"]",
        "explanation": "The only missing range is [-3,-1], which becomes \"-3->-1\"."
      },
      {
        "input": "nums = [-1], lower = -1, upper = -1",
        "output": "[]",
        "explanation": "There are no missing ranges since there are no missing numbers."
      },
      {
        "input": "nums = [-1], lower = -2, upper = -1",
        "output": "[\"-2\"]"
      }
    ],
    "constraints": [
      "-109 <= lower <= upper <= 109",
      "0 <= nums.length <= 100",
      "lower <= nums[i] <= upper",
      "All the values of nums are unique."
    ]
  },
  {
    "questionId": 165,
    "title": "Compare Version Numbers",
    "titleSlug": "compare-version-numbers",
    "content": "<p>Given two version numbers, `version1` and `version2`, compare them.</p>\n<p>Version numbers consist of one or more revisions joined by a dot `'.'`. Each revision consists of digits and may contain leading zeros. Every revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example `2.5.33` and `0.1` are valid version numbers.</p>\n<p>To compare version numbers, compare their revisions in left-to-right order. Revisions are compared using their integer value ignoring any leading zeros. This means that revisions `1` and `001` are considered equal. If a version number does not specify a revision at an index, then treat the revision as `0`. For example, version `1.0` is less than version `1.1` because their revision 0s are the same, but their revision 1s are `0` and `1` respectively, and `0 < 1`.</p>\n<p>Return the following:\nIf `version1 < version2`, return `-1`.</p>\n<p>If `version1 > version2`, return `1`.</p>\n<p>Otherwise, return `0`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def compare_version_numbers(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "version1 = \"1.01\", version2 = \"1.001\"",
        "output": "0",
        "explanation": "Ignoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\"."
      },
      {
        "input": "version1 = \"1.0\", version2 = \"1.0.0\"",
        "output": "0",
        "explanation": "version1 does not specify revision 2, which means it is treated as \"0\"."
      },
      {
        "input": "version1 = \"0.1\", version2 = \"1.1\"",
        "output": "-1",
        "explanation": "version1's revision 0 is \"0\", while version2's revision 0 is \"1\". 0 < 1, so version1 < version2."
      },
      {
        "input": "version1 = \"1.0.1\", version2 = \"1\"",
        "output": "1"
      },
      {
        "input": "version1 = \"7.5.2.4\", version2 = \"7.5.3\"",
        "output": "-1"
      }
    ],
    "constraints": [
      "1 <= version1.length, version2.length <= 500",
      "version1 and version2 only contain digits and '.'.",
      "version1 and version2 are valid version numbers.",
      "All the given revisions in version1 and version2 can be stored in a 32-bit integer."
    ]
  },
  {
    "questionId": 166,
    "title": "Fraction to Recurring Decimal",
    "titleSlug": "fraction-to-recurring-decimal",
    "content": "<p>Given two integers representing the `numerator` and `denominator` of a fraction, return the fraction in string format.</p>\n<p>If the fractional part is repeating, enclose the repeating part in parentheses.</p>\n<p>If multiple answers are possible, return any of them.</p>\n<p>It is guaranteed that the length of the answer string is less than `104` for all the given inputs.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def fraction_to_recurring_decimal(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "numerator = 1, denominator = 2",
        "output": "\"0.5\""
      },
      {
        "input": "numerator = 2, denominator = 1",
        "output": "\"2\""
      },
      {
        "input": "numerator = 2, denominator = 3",
        "output": "\"0.(6)\""
      },
      {
        "input": "numerator = 4, denominator = 333",
        "output": "\"0.(012)\""
      },
      {
        "input": "numerator = 1, denominator = 5",
        "output": "\"0.2\""
      }
    ],
    "constraints": [
      "-231 <= numerator, denominator <= 231 - 1",
      "denominator != 0"
    ]
  },
  {
    "questionId": 167,
    "title": "Two Sum II - Input array is sorted",
    "titleSlug": "two-sum-ii---input-array-is-sorted",
    "content": "<p>Given an array of integers `numbers` that is already sorted in ascending order, find two numbers such that they add up to a specific `target` number.</p>\n<p>Return the indices of the two numbers (1-indexed) as an integer array `answer` of size `2`, where `1 <= answer[0] < answer[1] <= numbers.length`.</p>\n<p>You may assume that each input would have exactly one solution and you may not use the same element twice.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def two_sum_ii___input_array_is_sorted(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "numbers = [2,7,11,15], target = 9",
        "output": "[1,2]",
        "explanation": "The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2."
      },
      {
        "input": "numbers = [2,3,4], target = 6",
        "output": "[1,3]"
      },
      {
        "input": "numbers = [-1,0], target = -1",
        "output": "[1,2]"
      }
    ],
    "constraints": [
      "2 <= numbers.length <= 3 * 104",
      "-1000 <= numbers[i] <= 1000",
      "numbers is sorted in increasing order.",
      "-1000 <= target <= 1000",
      "Only one valid answer exists."
    ]
  },
  {
    "questionId": 168,
    "title": "Excel Sheet Column Title",
    "titleSlug": "excel-sheet-column-title",
    "content": "<p>Given an integer `columnNumber`, return its corresponding column title as it appears in an Excel sheet.</p>\n<p>For example:\nA -> 1\nB -> 2\nC -> 3\n...</p>\n<p>Z -> 26\nAA -> 27\nAB -> 28 \n...</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def excel_sheet_column_title(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "columnNumber = 1",
        "output": "\"A\""
      },
      {
        "input": "columnNumber = 28",
        "output": "\"AB\""
      },
      {
        "input": "columnNumber = 701",
        "output": "\"ZY\""
      },
      {
        "input": "columnNumber = 2147483647",
        "output": "\"FXSHRXW\""
      }
    ],
    "constraints": [
      "1 <= columnNumber <= 231 - 1"
    ]
  },
  {
    "questionId": 169,
    "title": "Majority Element",
    "titleSlug": "majority-element",
    "content": "<p>Given an array `nums` of size `n`, return the majority element.</p>\n<p>The majority element is the element that appears more than `\u230an / 2\u230b` times. You may assume that the majority element always exists in the array.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def majority_element(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [3,2,3]",
        "output": "3"
      },
      {
        "input": "nums = [2,2,1,1,1,2,2]",
        "output": "2"
      }
    ],
    "constraints": [
      "n == nums.length",
      "1 <= n <= 5 * 104",
      "-231 <= nums[i] <= 231 - 1",
      "Follow-up: Could you solve the problem in linear time and in O(1) space?"
    ]
  },
  {
    "questionId": 170,
    "title": "Two Sum III - Data structure design",
    "titleSlug": "two-sum-iii---data-structure-design",
    "content": "<p>Design a data structure that accepts a stream of integers and checks if it has a pair of integers that sum up to a particular value.</p>\n<p>Implement the `TwoSum` class:\n`TwoSum()` Initializes the `TwoSum` object, with an empty array initially.</p>\n<p>`void add(int number)` Adds `number` to the data structure.</p>\n<p>`boolean find(int value)` Returns `true` if there exists any pair of numbers whose sum is equal to `value`, otherwise, it returns `false`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def two_sum_iii___data_structure_design(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "-105 <= number <= 105",
      "-231 <= value <= 231 - 1",
      "At most 5 * 104 calls will be made to add and find."
    ]
  },
  {
    "questionId": 171,
    "title": "Excel Sheet Column Number",
    "titleSlug": "excel-sheet-column-number",
    "content": "<p>Given a string `columnTitle` that represents the column title as appear in an Excel sheet, return its corresponding column number.</p>\n<p>For example:\nA -> 1\nB -> 2\nC -> 3\n...</p>\n<p>Z -> 26\nAA -> 27\nAB -> 28 \n...</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def excel_sheet_column_number(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "columnTitle = \"A\"",
        "output": "1"
      },
      {
        "input": "columnTitle = \"AB\"",
        "output": "28"
      },
      {
        "input": "columnTitle = \"ZY\"",
        "output": "701"
      },
      {
        "input": "columnTitle = \"FXSHRXW\"",
        "output": "2147483647"
      }
    ],
    "constraints": [
      "1 <= columnTitle.length <= 7",
      "columnTitle consists only of uppercase English letters.",
      "columnTitle is in the range [\"A\", \"FXSHRXW\"]."
    ]
  },
  {
    "questionId": 172,
    "title": "Factorial Trailing Zeroes",
    "titleSlug": "factorial-trailing-zeroes",
    "content": "<p>Given an integer `n`, return the number of trailing zeroes in `n!`.</p>\n<p>Follow up: Could you write a solution that works in logarithmic time complexity?</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def factorial_trailing_zeroes(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 3",
        "output": "0",
        "explanation": "3! = 6, no trailing zero."
      },
      {
        "input": "n = 5",
        "output": "1",
        "explanation": "5! = 120, one trailing zero."
      },
      {
        "input": "n = 0",
        "output": "0"
      }
    ],
    "constraints": [
      "0 <= n <= 104"
    ]
  },
  {
    "questionId": 173,
    "title": "Binary Search Tree Iterator",
    "titleSlug": "binary-search-tree-iterator",
    "content": "<p>Implement the `BSTIterator` class that represents an iterator over the in-order traversal of a binary search tree (BST):\n`BSTIterator(TreeNode root)` Initializes an object of the `BSTIterator` class. The `root` of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.</p>\n<p>`boolean hasNext()` Returns `true` if there exists a number in the traversal to the right of the pointer, otherwise returns `false`.</p>\n<p>`int next()` Moves the pointer to the right, then returns the number at the pointer.</p>\n<p>Notice that by initializing the pointer to a non-existent smallest number, the first call to `next()` will return the smallest element in the BST.</p>\n<p>You may assume that `next()` calls will always be valid. That is, there will be at least a next number in the in-order traversal when `next()` is called.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def binary_search_tree_iterator(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 105].",
      "0 <= Node.val <= 106",
      "At most 105 calls will be made to hasNext, and next.",
      "Follow up:",
      "Could you implement next() and hasNext() to run in average O(1) time and use O(h) memory, where h is the height of the tree?"
    ]
  },
  {
    "questionId": 179,
    "title": "Largest Number",
    "titleSlug": "largest-number",
    "content": "<p>Given a list of non-negative integers `nums`, arrange them such that they form the largest number.</p>\n<p>Note: The result may be very large, so you need to return a string instead of an integer.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def largest_number(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [10,2]",
        "output": "\"210\""
      },
      {
        "input": "nums = [3,30,34,5,9]",
        "output": "\"9534330\""
      },
      {
        "input": "nums = [1]",
        "output": "\"1\""
      },
      {
        "input": "nums = [10]",
        "output": "\"10\""
      }
    ],
    "constraints": [
      "1 <= nums.length <= 100",
      "0 <= nums[i] <= 109"
    ]
  },
  {
    "questionId": 186,
    "title": "Reverse Words in a String II",
    "titleSlug": "reverse-words-in-a-string-ii",
    "content": "<p>Given a character array `s`, reverse the order of the words.</p>\n<p>A word is defined as a sequence of non-space characters. The words in `s` will be separated by a single space.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def reverse_words_in_a_string_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = [\"t\",\"h\",\"e\",\" \",\"s\",\"k\",\"y\",\" \",\"i\",\"s\",\" \",\"b\",\"l\",\"u\",\"e\"]",
        "output": "[\"b\",\"l\",\"u\",\"e\",\" \",\"i\",\"s\",\" \",\"s\",\"k\",\"y\",\" \",\"t\",\"h\",\"e\"]"
      },
      {
        "input": "s = [\"a\"]",
        "output": "[\"a\"]"
      }
    ],
    "constraints": [
      "1 <= s.length <= 105",
      "s[i] is an English letter (uppercase or lowercase), digit, or space ' '.",
      "There is at least one word in s.",
      "s does not contain leading or trailing spaces.",
      "All the words in s are guaranteed to be separated by a single space.",
      "Follow up: Could you do it in-place without allocating extra space?"
    ]
  },
  {
    "questionId": 187,
    "title": "Repeated DNA Sequences",
    "titleSlug": "repeated-dna-sequences",
    "content": "<p>The DNA sequence is composed of a series of nucleotides abbreviated as `'A'`, `'C'`, `'G'`, and `'T'`.</p>\n<p>For example, `\"ACGAATTCCG\"` is a DNA sequence.</p>\n<p>When studying DNA, it is useful to identify repeated sequences within the DNA.</p>\n<p>Given a string `s` that represents a DNA sequence, return all the `10`-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def repeated_dna_sequences(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"",
        "output": "[\"AAAAACCCCC\",\"CCCCCAAAAA\"]"
      },
      {
        "input": "s = \"AAAAAAAAAAAAA\"",
        "output": "[\"AAAAAAAAAA\"]"
      }
    ],
    "constraints": [
      "1 <= s.length <= 105",
      "s[i] is either 'A', 'C', 'G', or 'T'."
    ]
  },
  {
    "questionId": 189,
    "title": "Rotate Array",
    "titleSlug": "rotate-array",
    "content": "<p>Given an array, rotate the array to the right by `k` steps, where `k` is non-negative.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def rotate_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3,4,5,6,7], k = 3",
        "output": "[5,6,7,1,2,3,4]",
        "explanation": "rotate 1 steps to the right: [7,1,2,3,4,5,6]"
      },
      {
        "input": "nums = [-1,-100,3,99], k = 2",
        "output": "[3,99,-1,-100]",
        "explanation": "rotate 1 steps to the right: [99,-1,-100,3]"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 2 * 104",
      "-231 <= nums[i] <= 231 - 1",
      "0 <= k <= 105",
      "Follow up:",
      "Try to come up with as many solutions as you can. There are at least three different ways to solve this problem.",
      "Could you do it in-place with O(1) extra space?"
    ]
  },
  {
    "questionId": 190,
    "title": "Reverse Bits",
    "titleSlug": "reverse-bits",
    "content": "<p>Reverse bits of a given 32 bits unsigned integer.</p>\n<p>Note:\nNote that in some languages such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.</p>\n<p>In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer `-3` and the output represents the signed integer `-1073741825`.</p>\n<p>Follow up:\nIf this function is called many times, how would you optimize it?</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def reverse_bits(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 00000010100101000001111010011100",
        "output": "964176192 (00111001011110000010100101000000)",
        "explanation": "The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000."
      },
      {
        "input": "n = 11111111111111111111111111111101",
        "output": "3221225471 (10111111111111111111111111111111)",
        "explanation": "The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111."
      }
    ],
    "constraints": [
      "The input must be a binary string of length 32"
    ]
  },
  {
    "questionId": 191,
    "title": "Number of 1 Bits",
    "titleSlug": "number-of-1-bits",
    "content": "<p>Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).</p>\n<p>Note:\nNote that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.</p>\n<p>In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. `-3`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_1_bits(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 00000000000000000000000000001011",
        "output": "3",
        "explanation": "The input binary string 00000000000000000000000000001011 has a total of three '1' bits."
      },
      {
        "input": "n = 00000000000000000000000010000000",
        "output": "1",
        "explanation": "The input binary string 00000000000000000000000010000000 has a total of one '1' bit."
      },
      {
        "input": "n = 11111111111111111111111111111101",
        "output": "31",
        "explanation": "The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits."
      }
    ],
    "constraints": [
      "The input must be a binary string of length 32.",
      "Follow up: If this function is called many times, how would you optimize it?"
    ]
  },
  {
    "questionId": 198,
    "title": "House Robber",
    "titleSlug": "house-robber",
    "content": "<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p>\n<p>Given an integer array `nums` representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def house_robber(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3,1]",
        "output": "4",
        "explanation": "Rob house 1 (money = 1) and then rob house 3 (money = 3)."
      },
      {
        "input": "nums = [2,7,9,3,1]",
        "output": "12",
        "explanation": "Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1)."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 100",
      "0 <= nums[i] <= 400"
    ]
  },
  {
    "questionId": 199,
    "title": "Binary Tree Right Side View",
    "titleSlug": "binary-tree-right-side-view",
    "content": "<p>Given the `root` of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def binary_tree_right_side_view(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2,3,null,5,null,4]",
        "output": "[1,3,4]"
      },
      {
        "input": "root = [1,null,3]",
        "output": "[1,3]"
      },
      {
        "input": "root = []",
        "output": "[]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 100].",
      "-100 <= Node.val <= 100"
    ]
  },
  {
    "questionId": 200,
    "title": "Number of Islands",
    "titleSlug": "number-of-islands",
    "content": "<p>Given an `m x n` 2D binary grid `grid` which represents a map of `'1'`s (land) and `'0'`s (water), return the number of islands.</p>\n<p>An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_islands(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "grid = [",
        "output": "1"
      },
      {
        "input": "grid = [",
        "output": "3"
      }
    ],
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m, n <= 300",
      "grid[i][j] is '0' or '1'."
    ]
  },
  {
    "questionId": 201,
    "title": "Bitwise AND of Numbers Range",
    "titleSlug": "bitwise-and-of-numbers-range",
    "content": "<p>Given two integers `left` and `right` that represent the range `[left, right]`, return the bitwise AND of all numbers in this range, inclusive.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def bitwise_and_of_numbers_range(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "left = 5, right = 7",
        "output": "4"
      },
      {
        "input": "left = 0, right = 0",
        "output": "0"
      },
      {
        "input": "left = 1, right = 2147483647",
        "output": "0"
      }
    ],
    "constraints": [
      "0 <= left <= right <= 231 - 1"
    ]
  },
  {
    "questionId": 202,
    "title": "Happy Number",
    "titleSlug": "happy-number",
    "content": "<p>Write an algorithm to determine if a number `n` is happy.</p>\n<p>A happy number is a number defined by the following process:\nStarting with any positive integer, replace the number by the sum of the squares of its digits.</p>\n<p>Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.</p>\n<p>Those numbers for which this process ends in 1 are happy.</p>\n<p>Return `true` if `n` is a happy number, and `false` if not.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def happy_number(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 19",
        "output": "true",
        "explanation": "12 + 92 = 82"
      },
      {
        "input": "n = 2",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= n <= 231 - 1"
    ]
  },
  {
    "questionId": 203,
    "title": "Remove Linked List Elements",
    "titleSlug": "remove-linked-list-elements",
    "content": "<p>Given the `head` of a linked list and an integer `val`, remove all the nodes of the linked list that has `Node.val == val`, and return the new head.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def remove_linked_list_elements(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [1,2,6,3,4,5,6], val = 6",
        "output": "[1,2,3,4,5]"
      },
      {
        "input": "head = [], val = 1",
        "output": "[]"
      },
      {
        "input": "head = [7,7,7,7], val = 7",
        "output": "[]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range [0, 104].",
      "1 <= Node.val <= 50",
      "0 <= k <= 50"
    ]
  },
  {
    "questionId": 204,
    "title": "Count Primes",
    "titleSlug": "count-primes",
    "content": "<p>Count the number of prime numbers less than a non-negative number, `n`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_primes(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 10",
        "output": "4",
        "explanation": "There are 4 prime numbers less than 10, they are 2, 3, 5, 7."
      },
      {
        "input": "n = 0",
        "output": "0"
      },
      {
        "input": "n = 1",
        "output": "0"
      }
    ],
    "constraints": [
      "0 <= n <= 5 * 106"
    ]
  },
  {
    "questionId": 205,
    "title": "Isomorphic Strings",
    "titleSlug": "isomorphic-strings",
    "content": "<p>Given two strings `s` and `t`, determine if they are isomorphic.</p>\n<p>Two strings `s` and `t` are isomorphic if the characters in `s` can be replaced to get `t`.</p>\n<p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def isomorphic_strings(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"egg\", t = \"add\"",
        "output": "true"
      },
      {
        "input": "s = \"foo\", t = \"bar\"",
        "output": "false"
      },
      {
        "input": "s = \"paper\", t = \"title\"",
        "output": "true"
      }
    ],
    "constraints": [
      "1 <= s.length <= 5 * 104",
      "t.length == s.length",
      "s and t consist of any valid ascii character."
    ]
  },
  {
    "questionId": 206,
    "title": "Reverse Linked List",
    "titleSlug": "reverse-linked-list",
    "content": "<p>Given the `head` of a singly linked list, reverse the list, and return the reversed list.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def reverse_linked_list(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [1,2,3,4,5]",
        "output": "[5,4,3,2,1]"
      },
      {
        "input": "head = [1,2]",
        "output": "[2,1]"
      },
      {
        "input": "head = []",
        "output": "[]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is the range [0, 5000].",
      "-5000 <= Node.val <= 5000",
      "Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?"
    ]
  },
  {
    "questionId": 207,
    "title": "Course Schedule",
    "titleSlug": "course-schedule",
    "content": "<p>There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you must take course `bi` first if you want to take course `ai`.</p>\n<p>For example, the pair `[0, 1]`, indicates that to take course `0` you have to first take course `1`.</p>\n<p>Return `true` if you can finish all courses. Otherwise, return `false`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def course_schedule(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "numCourses = 2, prerequisites = [[1,0]]",
        "output": "true",
        "explanation": "There are a total of 2 courses to take."
      },
      {
        "input": "numCourses = 2, prerequisites = [[1,0],[0,1]]",
        "output": "false",
        "explanation": "There are a total of 2 courses to take."
      }
    ],
    "constraints": [
      "1 <= numCourses <= 105",
      "0 <= prerequisites.length <= 5000",
      "prerequisites[i].length == 2",
      "0 <= ai, bi < numCourses",
      "All the pairs prerequisites[i] are unique."
    ]
  },
  {
    "questionId": 208,
    "title": "Implement Trie (Prefix Tree)",
    "titleSlug": "implement-trie-prefix-tree",
    "content": "<p>A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.</p>\n<p>Implement the Trie class:\n`Trie()` Initializes the trie object.</p>\n<p>`void insert(String word)` Inserts the string `word` into the trie.</p>\n<p>`boolean search(String word)` Returns `true` if the string `word` is in the trie (i.e., was inserted before), and `false` otherwise.</p>\n<p>`boolean startsWith(String prefix)` Returns `true` if there is a previously inserted string `word` that has the prefix `prefix`, and `false` otherwise.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def implement_trie_prefix_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= word.length, prefix.length <= 2000",
      "word and prefix consist only of lowercase English letters.",
      "At most 3 * 104 calls in total will be made to insert, search, and startsWith."
    ]
  },
  {
    "questionId": 209,
    "title": "Minimum Size Subarray Sum",
    "titleSlug": "minimum-size-subarray-sum",
    "content": "<p>Given an array of positive integers `nums` and a positive integer `target`, return the minimal length of a contiguous subarray `[numsl, numsl+1, ..., numsr-1, numsr]` of which the sum is greater than or equal to `target`. If there is no such subarray, return `0` instead.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_size_subarray_sum(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "target = 7, nums = [2,3,1,2,4,3]",
        "output": "2",
        "explanation": "The subarray [4,3] has the minimal length under the problem constraint."
      },
      {
        "input": "target = 4, nums = [1,4,4]",
        "output": "1"
      },
      {
        "input": "target = 11, nums = [1,1,1,1,1,1,1,1]",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= target <= 109",
      "1 <= nums.length <= 105",
      "1 <= nums[i] <= 105",
      "Follow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log(n))."
    ]
  },
  {
    "questionId": 210,
    "title": "Course Schedule II",
    "titleSlug": "course-schedule-ii",
    "content": "<p>There are a total of `n` courses you have to take labelled from `0` to `n - 1`.</p>\n<p>Some courses may have `prerequisites`, for example, if `prerequisites[i] = [ai, bi]` this means you must take the course `bi` before the course `ai`.</p>\n<p>Given the total number of courses `numCourses` and a list of the `prerequisite` pairs, return the ordering of courses you should take to finish all courses.</p>\n<p>If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def course_schedule_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "numCourses = 2, prerequisites = [[1,0]]",
        "output": "[0,1]",
        "explanation": "There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1]."
      },
      {
        "input": "numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]",
        "output": "[0,2,1,3]",
        "explanation": "There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0."
      },
      {
        "input": "numCourses = 1, prerequisites = []",
        "output": "[0]"
      }
    ],
    "constraints": [
      "1 <= numCourses <= 2000",
      "0 <= prerequisites.length <= numCourses * (numCourses - 1)",
      "prerequisites[i].length == 2",
      "0 <= ai, bi < numCourses",
      "ai != bi",
      "All the pairs [ai, bi] are distinct."
    ]
  },
  {
    "questionId": 211,
    "title": "Design Add and Search Words Data Structure",
    "titleSlug": "design-add-and-search-words-data-structure",
    "content": "<p>Design a data structure that supports adding new words and finding if a string matches any previously added string.</p>\n<p>Implement the `WordDictionary` class:\n`WordDictionary()` Initializes the object.</p>\n<p>`void addWord(word)` Adds `word` to the data structure, it can be matched later.</p>\n<p>`bool search(word)` Returns `true` if there is any string in the data structure that matches `word` or `false` otherwise. `word` may contain dots `'.'` where dots can be matched with any letter.</p>\n<p>Example:\nInput\n[\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\n[[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]\nOutput\n[null,null,null,null,false,true,true,true]\nExplanation\nWordDictionary wordDictionary = new WordDictionary();\nwordDictionary.addWord(\"bad\");\nwordDictionary.addWord(\"dad\");\nwordDictionary.addWord(\"mad\");\nwordDictionary.search(\"pad\"); // return False\nwordDictionary.search(\"bad\"); // return True\nwordDictionary.search(\".ad\"); // return True\nwordDictionary.search(\"b..\"); // return True</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def design_add_and_search_words_data_structure(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= word.length <= 500",
      "word in addWord consists lower-case English letters.",
      "word in search consist of  '.' or lower-case English letters.",
      "At most 50000 calls will be made to addWord and search."
    ]
  },
  {
    "questionId": 213,
    "title": "House Robber II",
    "titleSlug": "house-robber-ii",
    "content": "<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.</p>\n<p>Given an integer array `nums` representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def house_robber_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [2,3,2]",
        "output": "3",
        "explanation": "You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses."
      },
      {
        "input": "nums = [1,2,3,1]",
        "output": "4",
        "explanation": "Rob house 1 (money = 1) and then rob house 3 (money = 3)."
      },
      {
        "input": "nums = [0]",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 100",
      "0 <= nums[i] <= 1000"
    ]
  },
  {
    "questionId": 215,
    "title": "Kth Largest Element in an Array",
    "titleSlug": "kth-largest-element-in-an-array",
    "content": "<p>Given an integer array `nums` and an integer `k`, return the `kth` largest element in the array.</p>\n<p>Note that it is the `kth` largest element in the sorted order, not the `kth` distinct element.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def kth_largest_element_in_an_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [3,2,1,5,6,4], k = 2",
        "output": "5"
      },
      {
        "input": "nums = [3,2,3,1,2,4,5,5,6], k = 4",
        "output": "4"
      }
    ],
    "constraints": [
      "1 <= k <= nums.length <= 104",
      "-104 <= nums[i] <= 104"
    ]
  },
  {
    "questionId": 216,
    "title": "Combination Sum III",
    "titleSlug": "combination-sum-iii",
    "content": "<p>Find all valid combinations of `k` numbers that sum up to `n` such that the following conditions are true:\nOnly numbers `1` through `9` are used.</p>\n<p>Each number is used at most once.</p>\n<p>Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def combination_sum_iii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "k = 3, n = 7",
        "output": "[[1,2,4]]",
        "explanation": "1 + 2 + 4 = 7"
      },
      {
        "input": "k = 3, n = 9",
        "output": "[[1,2,6],[1,3,5],[2,3,4]]",
        "explanation": "1 + 2 + 6 = 9"
      },
      {
        "input": "k = 4, n = 1",
        "output": "[]",
        "explanation": "There are no valid combinations. [1,2,1] is not valid because 1 is used twice."
      },
      {
        "input": "k = 3, n = 2",
        "output": "[]",
        "explanation": "There are no valid combinations."
      },
      {
        "input": "k = 9, n = 45",
        "output": "[[1,2,3,4,5,6,7,8,9]]",
        "explanation": "1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45"
      }
    ],
    "constraints": [
      "2 <= k <= 9",
      "1 <= n <= 60"
    ]
  },
  {
    "questionId": 217,
    "title": "Contains Duplicate",
    "titleSlug": "contains-duplicate",
    "content": "<p>Given an integer array `nums`, return `true` if any value appears at least twice in the array, and return `false` if every element is distinct.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def contains_duplicate(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3,1]",
        "output": "true"
      },
      {
        "input": "nums = [1,2,3,4]",
        "output": "false"
      },
      {
        "input": "nums = [1,1,1,3,3,4,3,2,4,2]",
        "output": "true"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 105",
      "-109 <= nums[i] <= 109"
    ]
  },
  {
    "questionId": 219,
    "title": "Contains Duplicate II",
    "titleSlug": "contains-duplicate-ii",
    "content": "<p>Given an integer array `nums` and an integer `k`, return `true` if there are two distinct indices `i` and `j` in the array such that `nums[i] == nums[j]` and `abs(i - j) <= k`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def contains_duplicate_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3,1], k = 3",
        "output": "true"
      },
      {
        "input": "nums = [1,0,1,1], k = 1",
        "output": "true"
      },
      {
        "input": "nums = [1,2,3,1,2,3], k = 2",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 105",
      "-109 <= nums[i] <= 109",
      "0 <= k <= 105"
    ]
  },
  {
    "questionId": 220,
    "title": "Contains Duplicate III",
    "titleSlug": "contains-duplicate-iii",
    "content": "<p>Given an integer array `nums` and two integers `k` and `t`, return `true` if there are two distinct indices `i` and `j` in the array such that `abs(nums[i] - nums[j]) <= t` and `abs(i - j) <= k`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def contains_duplicate_iii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3,1], k = 3, t = 0",
        "output": "true"
      },
      {
        "input": "nums = [1,0,1,1], k = 1, t = 2",
        "output": "true"
      },
      {
        "input": "nums = [1,5,9,1,5,9], k = 2, t = 3",
        "output": "false"
      }
    ],
    "constraints": [
      "0 <= nums.length <= 2 * 104",
      "-231 <= nums[i] <= 231 - 1",
      "0 <= k <= 104",
      "0 <= t <= 231 - 1"
    ]
  },
  {
    "questionId": 221,
    "title": "Maximal Square",
    "titleSlug": "maximal-square",
    "content": "<p>Given an `m x n` binary `matrix` filled with `0`'s and `1`'s, find the largest square containing only `1`'s and return its area.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximal_square(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]",
        "output": "4"
      },
      {
        "input": "matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]",
        "output": "1"
      },
      {
        "input": "matrix = [[\"0\"]]",
        "output": "0"
      }
    ],
    "constraints": [
      "m == matrix.length",
      "n == matrix[i].length",
      "1 <= m, n <= 300",
      "matrix[i][j] is '0' or '1'."
    ]
  },
  {
    "questionId": 222,
    "title": "Count Complete Tree Nodes",
    "titleSlug": "count-complete-tree-nodes",
    "content": "<p>Given the `root` of a complete binary tree, return the number of the nodes in the tree.</p>\n<p>According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between `1` and `2h` nodes inclusive at the last level `h`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_complete_tree_nodes(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2,3,4,5,6]",
        "output": "6"
      },
      {
        "input": "root = []",
        "output": "0"
      },
      {
        "input": "root = [1]",
        "output": "1"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 5 * 104].",
      "0 <= Node.val <= 5 * 104",
      "The tree is guaranteed to be complete.",
      "Follow up: Traversing the tree to count the number of nodes in the tree is an easy solution but with O(n) complexity. Could you find a faster algorithm?"
    ]
  },
  {
    "questionId": 223,
    "title": "Rectangle Area",
    "titleSlug": "rectangle-area",
    "content": "<p>Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.</p>\n<p>The first rectangle is defined by its bottom-left corner `(A, B)` and its top-right corner `(C, D)`.</p>\n<p>The second rectangle is defined by its bottom-left corner `(E, F)` and its top-right corner `(G, H)`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def rectangle_area(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "A = -3, B = 0, C = 3, D = 4, E = 0, F = -1, G = 9, H = 2",
        "output": "45"
      },
      {
        "input": "A = -2, B = -2, C = 2, D = 2, E = -2, F = -2, G = 2, H = 2",
        "output": "16"
      }
    ],
    "constraints": [
      "-104 <= A, B, C, D, E, F, G, H <= 104"
    ]
  },
  {
    "questionId": 225,
    "title": "Implement Stack using Queues",
    "titleSlug": "implement-stack-using-queues",
    "content": "<p>Implement a last in first out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal queue (`push`, `top`, `pop`, and `empty`).</p>\n<p>Implement the `MyStack` class:\n`void push(int x)` Pushes element x to the top of the stack.</p>\n<p>`int pop()` Removes the element on the top of the stack and returns it.</p>\n<p>`int top()` Returns the element on the top of the stack.</p>\n<p>`boolean empty()` Returns `true` if the stack is empty, `false` otherwise.</p>\n<p>Notes:\nYou must use only standard operations of a queue, which means only `push to back`, `peek/pop from front`, `size`, and `is empty` operations are valid.</p>\n<p>Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue), as long as you use only a queue's standard operations.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def implement_stack_using_queues(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= x <= 9",
      "At most 100 calls will be made to push, pop, top, and empty.",
      "All the calls to pop and top are valid.",
      "Follow-up: Can you implement the stack such that each operation is amortized O(1) time complexity? In other words, performing n operations will take overall O(n) time even if one of those operations may take longer. You can use more than two queues."
    ]
  },
  {
    "questionId": 226,
    "title": "Invert Binary Tree",
    "titleSlug": "invert-binary-tree",
    "content": "<p>Given the `root` of a binary tree, invert the tree, and return its root.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def invert_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [4,2,7,1,3,6,9]",
        "output": "[4,7,2,9,6,3,1]"
      },
      {
        "input": "root = [2,1,3]",
        "output": "[2,3,1]"
      },
      {
        "input": "root = []",
        "output": "[]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 100].",
      "-100 <= Node.val <= 100"
    ]
  },
  {
    "questionId": 227,
    "title": "Basic Calculator II",
    "titleSlug": "basic-calculator-ii",
    "content": "<p>Given a string `s` which represents an expression, evaluate this expression and return its value. \nThe integer division should truncate toward zero.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def basic_calculator_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"3+2*2\"",
        "output": "7"
      },
      {
        "input": "s = \" 3/2 \"",
        "output": "1"
      },
      {
        "input": "s = \" 3+5 / 2 \"",
        "output": "5"
      }
    ],
    "constraints": [
      "1 <= s.length <= 3 * 105",
      "s consists of integers and operators ('+', '-', '*', '/') separated by some number of spaces.",
      "s represents a valid expression.",
      "All the integers in the expression are non-negative integers in the range [0, 231 - 1].",
      "The answer is guaranteed to fit in a 32-bit integer."
    ]
  },
  {
    "questionId": 228,
    "title": "Summary Ranges",
    "titleSlug": "summary-ranges",
    "content": "<p>You are given a sorted unique integer array `nums`.</p>\n<p>Return the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of `nums` is covered by exactly one of the ranges, and there is no integer `x` such that `x` is in one of the ranges but not in `nums`.</p>\n<p>Each range `[a,b]` in the list should be output as:\n`\"a->b\"` if `a != b`\n`\"a\"` if `a == b`</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def summary_ranges(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [0,1,2,4,5,7]",
        "output": "[\"0->2\",\"4->5\",\"7\"]",
        "explanation": "The ranges are:"
      },
      {
        "input": "nums = [0,2,3,4,6,8,9]",
        "output": "[\"0\",\"2->4\",\"6\",\"8->9\"]",
        "explanation": "The ranges are:"
      },
      {
        "input": "nums = []",
        "output": "[]"
      },
      {
        "input": "nums = [-1]",
        "output": "[\"-1\"]"
      },
      {
        "input": "nums = [0]",
        "output": "[\"0\"]"
      }
    ],
    "constraints": [
      "0 <= nums.length <= 20",
      "-231 <= nums[i] <= 231 - 1",
      "All the values of nums are unique.",
      "nums is sorted in ascending order."
    ]
  },
  {
    "questionId": 229,
    "title": "Majority Element II",
    "titleSlug": "majority-element-ii",
    "content": "<p>Given an integer array of size `n`, find all elements that appear more than `\u230a n/3 \u230b` times.</p>\n<p>Follow-up: Could you solve the problem in linear time and in O(1) space?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def majority_element_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [3,2,3]",
        "output": "[3]"
      },
      {
        "input": "nums = [1]",
        "output": "[1]"
      },
      {
        "input": "nums = [1,2]",
        "output": "[1,2]"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 5 * 104",
      "-109 <= nums[i] <= 109"
    ]
  },
  {
    "questionId": 230,
    "title": "Kth Smallest Element in a BST",
    "titleSlug": "kth-smallest-element-in-a-bst",
    "content": "<p>Given the `root` of a binary search tree, and an integer `k`, return the `kth` (1-indexed) smallest element in the tree.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def kth_smallest_element_in_a_bst(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [3,1,4,null,2], k = 1",
        "output": "1"
      },
      {
        "input": "root = [5,3,6,2,4,null,null,1], k = 3",
        "output": "3"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is n.",
      "1 <= k <= n <= 104",
      "0 <= Node.val <= 104",
      "Follow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?"
    ]
  },
  {
    "questionId": 231,
    "title": "Power of Two",
    "titleSlug": "power-of-two",
    "content": "<p>Given an integer `n`, return `true` if it is a power of two. Otherwise, return `false`.</p>\n<p>An integer `n` is a power of two, if there exists an integer `x` such that `n == 2x`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def power_of_two(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 1",
        "output": "true",
        "explanation": "20 = 1"
      },
      {
        "input": "n = 16",
        "output": "true",
        "explanation": "24 = 16"
      },
      {
        "input": "n = 3",
        "output": "false"
      },
      {
        "input": "n = 4",
        "output": "true"
      },
      {
        "input": "n = 5",
        "output": "false"
      }
    ],
    "constraints": [
      "-231 <= n <= 231 - 1",
      "Follow up: Could you solve it without loops/recursion?"
    ]
  },
  {
    "questionId": 232,
    "title": "Implement Queue using Stacks",
    "titleSlug": "implement-queue-using-stacks",
    "content": "<p>Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (`push`, `peek`, `pop`, and `empty`).</p>\n<p>Implement the `MyQueue` class:\n`void push(int x)` Pushes element x to the back of the queue.</p>\n<p>`int pop()` Removes the element from the front of the queue and returns it.</p>\n<p>`int peek()` Returns the element at the front of the queue.</p>\n<p>`boolean empty()` Returns `true` if the queue is empty, `false` otherwise.</p>\n<p>Notes:\nYou must use only standard operations of a stack, which means only `push to top`, `peek/pop from top`, `size`, and `is empty` operations are valid.</p>\n<p>Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.</p>\n<p>Follow-up: Can you implement the queue such that each operation is amortized `O(1)` time complexity? In other words, performing `n` operations will take overall `O(n)` time even if one of those operations may take longer.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def implement_queue_using_stacks(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= x <= 9",
      "At most 100 calls will be made to push, pop, peek, and empty.",
      "All the calls to pop and peek are valid."
    ]
  },
  {
    "questionId": 234,
    "title": "Palindrome Linked List",
    "titleSlug": "palindrome-linked-list",
    "content": "<p>Given the `head` of a singly linked list, return `true` if it is a palindrome.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def palindrome_linked_list(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [1,2,2,1]",
        "output": "true"
      },
      {
        "input": "head = [1,2]",
        "output": "false"
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range [1, 105].",
      "0 <= Node.val <= 9",
      "Follow up: Could you do it in O(n) time and O(1) space?"
    ]
  },
  {
    "questionId": 235,
    "title": "Lowest Common Ancestor of a Binary Search Tree",
    "titleSlug": "lowest-common-ancestor-of-a-binary-search-tree",
    "content": "<p>Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.</p>\n<p>According to the definition of LCA on Wikipedia: \u201cThe lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself).\u201d</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def lowest_common_ancestor_of_a_binary_search_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8",
        "output": "6",
        "explanation": "The LCA of nodes 2 and 8 is 6."
      },
      {
        "input": "root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4",
        "output": "2",
        "explanation": "The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition."
      },
      {
        "input": "root = [2,1], p = 2, q = 1",
        "output": "2"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [2, 105].",
      "-109 <= Node.val <= 109",
      "All Node.val are unique.",
      "p != q",
      "p and q will exist in the BST."
    ]
  },
  {
    "questionId": 236,
    "title": "Lowest Common Ancestor of a Binary Tree",
    "titleSlug": "lowest-common-ancestor-of-a-binary-tree",
    "content": "<p>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.</p>\n<p>According to the definition of LCA on Wikipedia: \u201cThe lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself).\u201d</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def lowest_common_ancestor_of_a_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1",
        "output": "3",
        "explanation": "The LCA of nodes 5 and 1 is 3."
      },
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4",
        "output": "5",
        "explanation": "The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition."
      },
      {
        "input": "root = [1,2], p = 1, q = 2",
        "output": "1"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [2, 105].",
      "-109 <= Node.val <= 109",
      "All Node.val are unique.",
      "p != q",
      "p and q will exist in the tree."
    ]
  },
  {
    "questionId": 237,
    "title": "Delete Node in a Linked List",
    "titleSlug": "delete-node-in-a-linked-list",
    "content": "<p>Write a function to delete a node in a singly-linked list. You will not be given access to the `head` of the list, instead you will be given access to the node to be deleted directly.</p>\n<p>It is guaranteed that the node to be deleted is not a tail node in the list.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def delete_node_in_a_linked_list(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [4,5,1,9], node = 5",
        "output": "[4,1,9]",
        "explanation": "You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function."
      },
      {
        "input": "head = [4,5,1,9], node = 1",
        "output": "[4,5,9]",
        "explanation": "You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function."
      },
      {
        "input": "head = [1,2,3,4], node = 3",
        "output": "[1,2,4]"
      },
      {
        "input": "head = [0,1], node = 0",
        "output": "[1]"
      },
      {
        "input": "head = [-3,5,-99], node = -3",
        "output": "[5,-99]"
      }
    ],
    "constraints": [
      "The number of the nodes in the given list is in the range [2, 1000].",
      "-1000 <= Node.val <= 1000",
      "The value of each node in the list is unique.",
      "The node to be deleted is in the list and is not a tail node"
    ]
  },
  {
    "questionId": 238,
    "title": "Product of Array Except Self",
    "titleSlug": "product-of-array-except-self",
    "content": "<p>Given an integer array `nums`, return an array `answer` such that `answer[i]` is equal to the product of all the elements of `nums` except `nums[i]`.</p>\n<p>The product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def product_of_array_except_self(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3,4]",
        "output": "[24,12,8,6]"
      },
      {
        "input": "nums = [-1,1,0,-3,3]",
        "output": "[0,0,9,0,0]"
      }
    ],
    "constraints": [
      "2 <= nums.length <= 105",
      "-30 <= nums[i] <= 30",
      "The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.",
      "Follow up:",
      "Could you solve it in O(n) time complexity and without using division?",
      "Could you solve it with O(1) constant space complexity? (The output array does not count as extra space for space complexity analysis.)"
    ]
  },
  {
    "questionId": 240,
    "title": "Search a 2D Matrix II",
    "titleSlug": "search-a-2d-matrix-ii",
    "content": "<p>Write an efficient algorithm that searches for a `target` value in an `m x n` integer `matrix`. The `matrix` has the following properties:\nIntegers in each row are sorted in ascending from left to right.</p>\n<p>Integers in each column are sorted in ascending from top to bottom.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def search_a_2d_matrix_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5",
        "output": "true"
      },
      {
        "input": "matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20",
        "output": "false"
      }
    ],
    "constraints": [
      "m == matrix.length",
      "n == matrix[i].length",
      "1 <= n, m <= 300",
      "-109 <= matix[i][j] <= 109",
      "All the integers in each row are sorted in ascending order.",
      "All the integers in each column are sorted in ascending order.",
      "-109 <= target <= 109"
    ]
  },
  {
    "questionId": 241,
    "title": "Different Ways to Add Parentheses",
    "titleSlug": "different-ways-to-add-parentheses",
    "content": "<p>Given a string `expression` of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. You may return the answer in any order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def different_ways_to_add_parentheses(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "expression = \"2-1-1\"",
        "output": "[0,2]",
        "explanation": "((2-1)-1) = 0"
      },
      {
        "input": "expression = \"2*3-4*5\"",
        "output": "[-34,-14,-10,-10,10]",
        "explanation": "(2*(3-(4*5))) = -34"
      }
    ],
    "constraints": [
      "1 <= expression.length <= 20",
      "expression consists of digits and the operator '+', '-', and '*'."
    ]
  },
  {
    "questionId": 242,
    "title": "Valid Anagram",
    "titleSlug": "valid-anagram",
    "content": "<p>Given two strings `s` and `t`, return `true` if `t` is an anagram of `s`, and `false` otherwise.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def valid_anagram(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"anagram\", t = \"nagaram\"",
        "output": "true"
      },
      {
        "input": "s = \"rat\", t = \"car\"",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= s.length, t.length <= 5 * 104",
      "s and t consist of lowercase English letters.",
      "Follow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?"
    ]
  },
  {
    "questionId": 243,
    "title": "Shortest Word Distance",
    "titleSlug": "shortest-word-distance",
    "content": "<p>Given an array of strings `wordsDict` and two different strings that already exist in the array `word1` and `word2`, return the shortest distance between these two words in the list.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def shortest_word_distance(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "wordsDict = [\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"], word1 = \"coding\", word2 = \"practice\"",
        "output": "3"
      },
      {
        "input": "wordsDict = [\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"], word1 = \"makes\", word2 = \"coding\"",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= wordsDict.length <= 3 * 104",
      "1 <= wordsDict[i].length <= 10",
      "wordsDict[i] consists of lowercase English letters.",
      "word1 and word2 are in wordsDict.",
      "word1 != word2"
    ]
  },
  {
    "questionId": 244,
    "title": "Shortest Word Distance II",
    "titleSlug": "shortest-word-distance-ii",
    "content": "<p>Design a data structure that will be initialized with a string array, and then it should answer queries of the shortest distance between two different strings from the array.</p>\n<p>Implement the `WordDistance` class:\n`WordDistance(String[] wordsDict)` initializes the object with the strings array `wordsDict`.</p>\n<p>`int shortest(String word1, String word2)` returns the shortest distance between `word1` and `word2` in the array `wordsDict`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def shortest_word_distance_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= wordsDict.length <= 3 * 104",
      "1 <= wordsDict[i].length <= 10",
      "wordsDict[i] consists of lowercase English letters.",
      "word1 and word2 are in wordsDict.",
      "word1 != word2",
      "At most 5000 calls will be made to shortest."
    ]
  },
  {
    "questionId": 245,
    "title": "Shortest Word Distance III",
    "titleSlug": "shortest-word-distance-iii",
    "content": "<p>Given an array of strings `wordsDict` and two strings that already exist in the array `word1` and `word2`, return the shortest distance between these two words in the list.</p>\n<p>Note that `word1` and `word2` may be the same. It is guaranteed that they represent two individual words in the list.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def shortest_word_distance_iii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "wordsDict = [\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"], word1 = \"makes\", word2 = \"coding\"",
        "output": "1"
      },
      {
        "input": "wordsDict = [\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"], word1 = \"makes\", word2 = \"makes\"",
        "output": "3"
      }
    ],
    "constraints": [
      "1 <= wordsDict.length <= 3 * 104",
      "1 <= wordsDict[i].length <= 10",
      "wordsDict[i] consists of lowercase English letters.",
      "word1 and word2 are in wordsDict."
    ]
  },
  {
    "questionId": 246,
    "title": "Strobogrammatic Number",
    "titleSlug": "strobogrammatic-number",
    "content": "<p>Given a string `num` which represents an integer, return `true` if `num` is a strobogrammatic number.</p>\n<p>A strobogrammatic number is a number that looks the same when rotated `180` degrees (looked at upside down).</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def strobogrammatic_number(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "num = \"69\"",
        "output": "true"
      },
      {
        "input": "num = \"88\"",
        "output": "true"
      },
      {
        "input": "num = \"962\"",
        "output": "false"
      },
      {
        "input": "num = \"1\"",
        "output": "true"
      }
    ],
    "constraints": [
      "1 <= num.length <= 50",
      "num consists of only digits.",
      "num does not contain any leading zeros except for zero itself."
    ]
  },
  {
    "questionId": 247,
    "title": "Strobogrammatic Number II",
    "titleSlug": "strobogrammatic-number-ii",
    "content": "<p>Given an integer `n`, return all the strobogrammatic numbers that are of length `n`. You may return the answer in any order.</p>\n<p>A strobogrammatic number is a number that looks the same when rotated `180` degrees (looked at upside down).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def strobogrammatic_number_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 2",
        "output": "[\"11\",\"69\",\"88\",\"96\"]"
      },
      {
        "input": "n = 1",
        "output": "[\"0\",\"1\",\"8\"]"
      }
    ],
    "constraints": [
      "1 <= n <= 14"
    ]
  },
  {
    "questionId": 249,
    "title": "Group Shifted Strings",
    "titleSlug": "group-shifted-strings",
    "content": "<p>We can shift a string by shifting each of its letters to its successive letter.</p>\n<p>For example, `\"abc\"` can be shifted to be `\"bcd\"`.</p>\n<p>We can keep shifting the string to form a sequence.</p>\n<p>For example, we can keep shifting `\"abc\"` to form the sequence: `\"abc\" -> \"bcd\" -> ... -> \"xyz\"`.</p>\n<p>Given an array of strings `strings`, group all `strings[i]` that belong to the same shifting sequence. You may return the answer in any order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def group_shifted_strings(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "strings = [\"abc\",\"bcd\",\"acef\",\"xyz\",\"az\",\"ba\",\"a\",\"z\"]",
        "output": "[[\"acef\"],[\"a\",\"z\"],[\"abc\",\"bcd\",\"xyz\"],[\"az\",\"ba\"]]"
      },
      {
        "input": "strings = [\"a\"]",
        "output": "[[\"a\"]]"
      }
    ],
    "constraints": [
      "1 <= strings.length <= 200",
      "1 <= strings[i].length <= 50",
      "strings[i] consists of lowercase English letters."
    ]
  },
  {
    "questionId": 250,
    "title": "Count Univalue Subtrees",
    "titleSlug": "count-univalue-subtrees",
    "content": "<p>Given the `root` of a binary tree, return the number of uni-value subtrees.</p>\n<p>A uni-value subtree means all nodes of the subtree have the same value.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_univalue_subtrees(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [5,1,5,5,5,null,5]",
        "output": "4"
      },
      {
        "input": "root = []",
        "output": "0"
      },
      {
        "input": "root = [5,5,5,5,5,null,5]",
        "output": "6"
      }
    ],
    "constraints": [
      "The numbrt of the node in the tree will be in the range [0, 1000].",
      "-1000 <= Node.val <= 1000"
    ]
  },
  {
    "questionId": 251,
    "title": "Flatten 2D Vector",
    "titleSlug": "flatten-2d-vector",
    "content": "<p>Design an iterator to flatten a 2D vector. It should support the `next` and `hasNext` operations.</p>\n<p>Implement the `Vector2D` class:\n`Vector2D(int[][] vec)` initializes the object with the 2D vector `vec`.</p>\n<p>`next()` returns the next element from the 2D vector and moves the pointer one step forward. You may assume that all the calls to `next` are valid.</p>\n<p>`hasNext()` returns `true` if there are still some elements in the vector, and `false` otherwise.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def flatten_2d_vector(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "0 <= vec.length <= 200",
      "0 <= vec[i].length <= 500",
      "-500 <= vec[i][j] <= 500",
      "At most 105 calls will be made to next and hasNext.",
      "Follow up: As an added challenge, try to code it using only iterators in C++ or iterators in Java."
    ]
  },
  {
    "questionId": 252,
    "title": "Meeting Rooms",
    "titleSlug": "meeting-rooms",
    "content": "<p>Given an array of meeting time `intervals` where `intervals[i] = [starti, endi]`, determine if a person could attend all meetings.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def meeting_rooms(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "intervals = [[0,30],[5,10],[15,20]]",
        "output": "false"
      },
      {
        "input": "intervals = [[7,10],[2,4]]",
        "output": "true"
      }
    ],
    "constraints": [
      "0 <= intervals.length <= 104",
      "intervals[i].length == 2",
      "0 <= starti < endi <= 106"
    ]
  },
  {
    "questionId": 253,
    "title": "Meeting Rooms II",
    "titleSlug": "meeting-rooms-ii",
    "content": "<p>Given an array of meeting time intervals `intervals` where `intervals[i] = [starti, endi]`, return the minimum number of conference rooms required.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def meeting_rooms_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "intervals = [[0,30],[5,10],[15,20]]",
        "output": "2"
      },
      {
        "input": "intervals = [[7,10],[2,4]]",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= intervals.length <= 104",
      "0 <= starti < endi <= 106"
    ]
  },
  {
    "questionId": 254,
    "title": "Factor Combinations",
    "titleSlug": "factor-combinations",
    "content": "<p>Numbers can be regarded as the product of their factors.</p>\n<p>For example, `8 = 2 x 2 x 2 = 2 x 4`.</p>\n<p>Given an integer `n`, return all possible combinations of its factors. You may return the answer in any order.</p>\n<p>Note that the factors should be in the range `[2, n - 1]`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def factor_combinations(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 1",
        "output": "[]"
      },
      {
        "input": "n = 12",
        "output": "[[2,6],[3,4],[2,2,3]]"
      },
      {
        "input": "n = 37",
        "output": "[]"
      },
      {
        "input": "n = 32",
        "output": "[[2,16],[4,8],[2,2,8],[2,4,4],[2,2,2,4],[2,2,2,2,2]]"
      }
    ],
    "constraints": [
      "1 <= n <= 108"
    ]
  },
  {
    "questionId": 255,
    "title": "Verify Preorder Sequence in Binary Search Tree",
    "titleSlug": "verify-preorder-sequence-in-binary-search-tree",
    "content": "<p>Given an array of unique integers `preorder`, return `true` if it is the correct preorder traversal sequence of a binary search tree.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def verify_preorder_sequence_in_binary_search_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "preorder = [5,2,1,3,6]",
        "output": "true"
      },
      {
        "input": "preorder = [5,2,6,1,3]",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= preorder.length <= 104",
      "1 <= preorder[i] <= 104",
      "All the elements of preorder are unique.",
      "Follow up: Could you do it using only constant space complexity?"
    ]
  },
  {
    "questionId": 256,
    "title": "Paint House",
    "titleSlug": "paint-house",
    "content": "<p>There is a row of `n` houses, where each house can be painted one of three colors: red, blue, or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.</p>\n<p>The cost of painting each house with a certain color is represented by an `n x 3` cost matrix `costs`.</p>\n<p>For example, `costs[0][0]` is the cost of painting house `0` with the color red; `costs[1][2]` is the cost of painting house 1 with color green, and so on...</p>\n<p>Return the minimum cost to paint all houses.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def paint_house(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "costs = [[17,2,17],[16,16,5],[14,3,19]]",
        "output": "10",
        "explanation": "Paint house 0 into blue, paint house 1 into green, paint house 2 into blue."
      },
      {
        "input": "costs = [[7,6,2]]",
        "output": "2"
      }
    ],
    "constraints": [
      "costs.length == n",
      "costs[i].length == 3",
      "1 <= n <= 100",
      "1 <= costs[i][j] <= 20"
    ]
  },
  {
    "questionId": 257,
    "title": "Binary Tree Paths",
    "titleSlug": "binary-tree-paths",
    "content": "<p>Given the `root` of a binary tree, return all root-to-leaf paths in any order.</p>\n<p>A leaf is a node with no children.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def binary_tree_paths(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2,3,null,5]",
        "output": "[\"1->2->5\",\"1->3\"]"
      },
      {
        "input": "root = [1]",
        "output": "[\"1\"]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 100].",
      "-100 <= Node.val <= 100"
    ]
  },
  {
    "questionId": 258,
    "title": "Add Digits",
    "titleSlug": "add-digits",
    "content": "<p>Given an integer `num`, repeatedly add all its digits until the result has only one digit, and return it.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def add_digits(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "num = 38",
        "output": "2",
        "explanation": "The process is"
      },
      {
        "input": "num = 0",
        "output": "0"
      }
    ],
    "constraints": [
      "0 <= num <= 231 - 1",
      "Follow up: Could you do it without any loop/recursion in O(1) runtime?"
    ]
  },
  {
    "questionId": 259,
    "title": "3Sum Smaller",
    "titleSlug": "3sum-smaller",
    "content": "<p>Given an array of `n` integers `nums` and an integer `target`, find the number of index triplets `i`, `j`, `k` with `0 <= i < j < k < n` that satisfy the condition `nums[i] + nums[j] + nums[k] < target`.</p>\n<p>Follow up: Could you solve it in `O(n2)` runtime?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def 3sum_smaller(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [-2,0,1,3], target = 2",
        "output": "2",
        "explanation": "Because there are two triplets which sums are less than 2:"
      },
      {
        "input": "nums = [], target = 0",
        "output": "0"
      },
      {
        "input": "nums = [0], target = 0",
        "output": "0"
      }
    ],
    "constraints": [
      "n == nums.length",
      "0 <= n <= 300",
      "-100 <= nums[i] <= 100",
      "-100 <= target <= 100"
    ]
  },
  {
    "questionId": 260,
    "title": "Single Number III",
    "titleSlug": "single-number-iii",
    "content": "<p>Given an integer array `nums`, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.</p>\n<p>Follow up: Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def single_number_iii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,1,3,2,5]",
        "output": "[3,5]",
        "explanation": "[5, 3] is also a valid answer."
      },
      {
        "input": "nums = [-1,0]",
        "output": "[-1,0]"
      },
      {
        "input": "nums = [0,1]",
        "output": "[1,0]"
      }
    ],
    "constraints": [
      "2 <= nums.length <= 3 * 104",
      "-231 <= nums[i] <= 231 - 1",
      "Each integer in nums will appear twice, only two integers will appear once."
    ]
  },
  {
    "questionId": 261,
    "title": "Graph Valid Tree",
    "titleSlug": "graph-valid-tree",
    "content": "<p>You have a graph of `n` nodes labeled from `0` to `n - 1`. You are given an integer n and a list of `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between nodes `ai` and `bi` in the graph.</p>\n<p>Return `true` if the edges of the given graph make up a valid tree, and `false` otherwise.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def graph_valid_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 5, edges = [[0,1],[0,2],[0,3],[1,4]]",
        "output": "true"
      },
      {
        "input": "n = 5, edges = [[0,1],[1,2],[2,3],[1,3],[1,4]]",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= 2000 <= n",
      "0 <= edges.length <= 5000",
      "edges[i].length == 2",
      "0 <= ai, bi < n",
      "ai != bi",
      "There are no self-loops or repeated edges."
    ]
  },
  {
    "questionId": 263,
    "title": "Ugly Number",
    "titleSlug": "ugly-number",
    "content": "<p>Given an integer `n`, return `true` if `n` is an ugly number.</p>\n<p>Ugly number is a positive number whose prime factors only include `2`, `3`, and/or `5`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def ugly_number(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 6",
        "output": "true",
        "explanation": "6 = 2 \u00d7 3"
      },
      {
        "input": "n = 8",
        "output": "true",
        "explanation": "8 = 2 \u00d7 2 \u00d7 2"
      },
      {
        "input": "n = 14",
        "output": "false",
        "explanation": "14 is not ugly since it includes another prime factor 7."
      },
      {
        "input": "n = 1",
        "output": "true",
        "explanation": "1 is typically treated as an ugly number."
      }
    ],
    "constraints": [
      "-231 <= n <= 231 - 1"
    ]
  },
  {
    "questionId": 264,
    "title": "Ugly Number II",
    "titleSlug": "ugly-number-ii",
    "content": "<p>Given an integer `n`, return the `nth` ugly number.</p>\n<p>Ugly number is a positive number whose prime factors only include `2`, `3`, and/or `5`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def ugly_number_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 10",
        "output": "12",
        "explanation": "[1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers."
      },
      {
        "input": "n = 1",
        "output": "1",
        "explanation": "1 is typically treated as an ugly number."
      }
    ],
    "constraints": [
      "1 <= n <= 1690"
    ]
  },
  {
    "questionId": 266,
    "title": "Palindrome Permutation",
    "titleSlug": "palindrome-permutation",
    "content": "<p>Given a string `s`, return `true` if a permutation of the string could form a palindrome.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def palindrome_permutation(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"code\"",
        "output": "false"
      },
      {
        "input": "s = \"aab\"",
        "output": "true"
      },
      {
        "input": "s = \"carerac\"",
        "output": "true"
      }
    ],
    "constraints": [
      "1 <= s.length <= 5000",
      "s consists of only lowercase English letters."
    ]
  },
  {
    "questionId": 267,
    "title": "Palindrome Permutation II",
    "titleSlug": "palindrome-permutation-ii",
    "content": "<p>Given a string s, return all the palindromic permutations (without duplicates) of it.</p>\n<p>You may return the answer in any order. If `s` has no palindromic permutation, return an empty list.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def palindrome_permutation_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"aabb\"",
        "output": "[\"abba\",\"baab\"]"
      },
      {
        "input": "s = \"abc\"",
        "output": "[]"
      }
    ],
    "constraints": [
      "1 <= s.length <= 16",
      "s consists of only lowercase English letters."
    ]
  },
  {
    "questionId": 268,
    "title": "Missing Number",
    "titleSlug": "missing-number",
    "content": "<p>Given an array `nums` containing `n` distinct numbers in the range `[0, n]`, return the only number in the range that is missing from the array.</p>\n<p>Follow up: Could you implement a solution using only `O(1)` extra space complexity and `O(n)` runtime complexity?</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def missing_number(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [3,0,1]",
        "output": "2",
        "explanation": "n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums."
      },
      {
        "input": "nums = [0,1]",
        "output": "2",
        "explanation": "n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums."
      },
      {
        "input": "nums = [9,6,4,2,3,5,7,0,1]",
        "output": "8",
        "explanation": "n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums."
      },
      {
        "input": "nums = [0]",
        "output": "1",
        "explanation": "n = 1 since there is 1 number, so all numbers are in the range [0,1]. 1 is the missing number in the range since it does not appear in nums."
      }
    ],
    "constraints": [
      "n == nums.length",
      "1 <= n <= 104",
      "0 <= nums[i] <= n",
      "All the numbers of nums are unique."
    ]
  },
  {
    "questionId": 270,
    "title": "Closest Binary Search Tree Value",
    "titleSlug": "closest-binary-search-tree-value",
    "content": "<p>Given the `root` of a binary search tree and a `target` value, return the value in the BST that is closest to the `target`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def closest_binary_search_tree_value(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [4,2,5,1,3], target = 3.714286",
        "output": "4"
      },
      {
        "input": "root = [1], target = 4.428571",
        "output": "1"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 104].",
      "0 <= Node.val <= 109",
      "-109 <= target <= 109"
    ]
  },
  {
    "questionId": 271,
    "title": "Encode and Decode Strings",
    "titleSlug": "encode-and-decode-strings",
    "content": "<p>Design an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings.</p>\n<p>Machine 1 (sender) has the function:\nstring encode(vector<string> strs) {\n  // ... your code\n  return encoded_string;\n}\nMachine 2 (receiver) has the function:\nvector<string> decode(string s) {\n  //... your code\n  return strs;\n}\nSo Machine 1 does:\nstring encoded_string = encode(strs);\nand Machine 2 does:\nvector<string> strs2 = decode(encoded_string);\n`strs2` in Machine 2 should be the same as `strs` in Machine 1.</p>\n<p>Implement the `encode` and `decode` methods.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def encode_and_decode_strings(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "dummy_input = [\"Hello\",\"World\"]",
        "output": "[\"Hello\",\"World\"]",
        "explanation": "Machine 1:"
      },
      {
        "input": "dummy_input = [\"\"]",
        "output": "[\"\"]"
      }
    ],
    "constraints": [
      "1 <= strs.length <= 200",
      "0 <= strs[i].length <= 200",
      "strs[i] contains any possible characters out of 256 valid ASCII characters.",
      "Follow up:",
      "Could you write a generalized algorithm to work on any possible characters?",
      "Could you solve the problem without using any serialize methods (such as eval)?"
    ]
  },
  {
    "questionId": 274,
    "title": "H-Index",
    "titleSlug": "h-index",
    "content": "<p>Given an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper, return compute the researcher's `h`-index.</p>\n<p>According to the definition of h-index on Wikipedia: A scientist has an index `h` if `h` of their `n` papers have at least `h` citations each, and the other `n \u2212 h` papers have no more than `h` citations each.</p>\n<p>If there are several possible values for `h`, the maximum one is taken as the `h`-index.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def h_index(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "citations = [3,0,6,1,5]",
        "output": "3",
        "explanation": "[3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively."
      },
      {
        "input": "citations = [1,3,1]",
        "output": "1"
      }
    ],
    "constraints": [
      "n == citations.length",
      "1 <= n <= 5000",
      "0 <= citations[i] <= 1000"
    ]
  },
  {
    "questionId": 275,
    "title": "H-Index II",
    "titleSlug": "h-index-ii",
    "content": "<p>Given an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper and `citations` is sorted in an ascending order, return compute the researcher's `h`-index.</p>\n<p>According to the definition of h-index on Wikipedia: A scientist has an index `h` if `h` of their `n` papers have at least `h` citations each, and the other `n \u2212 h` papers have no more than `h` citations each.</p>\n<p>If there are several possible values for `h`, the maximum one is taken as the `h`-index.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def h_index_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "citations = [0,1,3,5,6]",
        "output": "3",
        "explanation": "[0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively."
      },
      {
        "input": "citations = [1,2,100]",
        "output": "2"
      }
    ],
    "constraints": [
      "n == citations.length",
      "1 <= n <= 105",
      "0 <= citations[i] <= 1000",
      "citations is sorted in ascending order.",
      "Follow up: Could you solve it in logarithmic time complexity?"
    ]
  },
  {
    "questionId": 276,
    "title": "Paint Fence",
    "titleSlug": "paint-fence",
    "content": "<p>You are painting a fence of `n` posts with `k` different colors. You must paint the posts following these rules:\nEvery post must be painted exactly one color.</p>\n<p>At most one pair of adjacent fence posts can have the same color.</p>\n<p>Given the two integers `n` and `k`, return the number of ways you can paint the fence.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def paint_fence(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 3, k = 2",
        "output": "6",
        "explanation": "All the possibilities are shown."
      },
      {
        "input": "n = 1, k = 1",
        "output": "1"
      },
      {
        "input": "n = 7, k = 2",
        "output": "42"
      }
    ],
    "constraints": [
      "1 <= n <= 50",
      "1 <= k <= 105",
      "The answer is guaranteed to be in the range [0, 231 - 1] for the given n and k."
    ]
  },
  {
    "questionId": 277,
    "title": "Find the Celebrity",
    "titleSlug": "find-the-celebrity",
    "content": "<p>Suppose you are at a party with `n` people (labeled from `0` to `n - 1`), and among them, there may exist one celebrity. The definition of a celebrity is that all the other `n - 1` people know him/her, but he/she does not know any of them.</p>\n<p>Now you want to find out who the celebrity is or verify that there is not one. The only thing you are allowed to do is to ask questions like: \"Hi, A. Do you know B?\" to get information about whether A knows B. You need to find out the celebrity (or verify there is not one) by asking as few questions as possible (in the asymptotic sense).</p>\n<p>You are given a helper function `bool knows(a, b)` which tells you whether A knows B. Implement a function `int findCelebrity(n)`. There will be exactly one celebrity if he/she is in the party. Return the celebrity's label if there is a celebrity in the party. If there is no celebrity, return `-1`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_the_celebrity(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "graph = [[1,1,0],[0,1,0],[1,1,1]]",
        "output": "1",
        "explanation": "There are three persons labeled with 0, 1 and 2. graph[i][j] = 1 means person i knows person j, otherwise graph[i][j] = 0 means person i does not know person j. The celebrity is the person labeled as 1 because both 0 and 2 know him but 1 does not know anybody."
      },
      {
        "input": "graph = [[1,0,1],[1,1,0],[0,1,1]]",
        "output": "-1",
        "explanation": "There is no celebrity."
      }
    ],
    "constraints": [
      "n == graph.length",
      "n == graph[i].length",
      "2 <= n <= 100",
      "graph[i][j] is 0 or 1.",
      "graph[i][i] == 1",
      "Follow up: If the maximum number of allowed calls to the API knows is 3 * n, could you find a solution without exceeding the maximum number of calls?"
    ]
  },
  {
    "questionId": 278,
    "title": "First Bad Version",
    "titleSlug": "first-bad-version",
    "content": "<p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.</p>\n<p>Suppose you have `n` versions `[1, 2, ..., n]` and you want to find out the first bad one, which causes all the following ones to be bad.</p>\n<p>You are given an API `bool isBadVersion(version)` which returns whether `version` is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def first_bad_version(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 5, bad = 4",
        "output": "4",
        "explanation": "call isBadVersion(3) -> false"
      },
      {
        "input": "n = 1, bad = 1",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= bad <= n <= 231 - 1"
    ]
  },
  {
    "questionId": 279,
    "title": "Perfect Squares",
    "titleSlug": "perfect-squares",
    "content": "<p>Given an integer `n`, return the least number of perfect square numbers that sum to `n`.</p>\n<p>A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, `1`, `4`, `9`, and `16` are perfect squares while `3` and `11` are not.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def perfect_squares(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 12",
        "output": "3",
        "explanation": "12 = 4 + 4 + 4."
      },
      {
        "input": "n = 13",
        "output": "2",
        "explanation": "13 = 4 + 9."
      }
    ],
    "constraints": [
      "1 <= n <= 104"
    ]
  },
  {
    "questionId": 280,
    "title": "Wiggle Sort",
    "titleSlug": "wiggle-sort",
    "content": "<p>Given an integer array `nums`, reorder it such that `nums[0] <= nums[1] >= nums[2] <= nums[3]...`.</p>\n<p>You may assume the input array always has a valid answer.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def wiggle_sort(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [3,5,2,1,6,4]",
        "output": "[3,5,1,6,2,4]",
        "explanation": "[1,6,2,5,3,4] is also accepted."
      },
      {
        "input": "nums = [6,6,5,6,3,8]",
        "output": "[6,6,5,6,3,8]"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 5 * 104",
      "0 <= nums[i] <= 104",
      "It is guaranteed that there will be an answer for the given input nums.",
      "Follow up: Could you do it without sorting the array?"
    ]
  },
  {
    "questionId": 281,
    "title": "Zigzag Iterator",
    "titleSlug": "zigzag-iterator",
    "content": "<p>Given two vectors of integers `v1` and `v2`, implement an iterator to return their elements alternately.</p>\n<p>Implement the `ZigzagIterator` class:\n`ZigzagIterator(List<int> v1, List<int> v2)` initializes the object with the two vectors `v1` and `v2`.</p>\n<p>`boolean hasNext()` returns `true` if the iterator still has elements, and `false` otherwise.</p>\n<p>`int next()` returns the current element of the iterator and moves the iterator to the next element.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def zigzag_iterator(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "v1 = [1,2], v2 = [3,4,5,6]",
        "output": "[1,3,2,4,5,6]",
        "explanation": "By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,3,2,4,5,6]."
      },
      {
        "input": "v1 = [1], v2 = []",
        "output": "[1]"
      },
      {
        "input": "v1 = [], v2 = [1]",
        "output": "[1]"
      }
    ],
    "constraints": [
      "0 <= v1.length, v2.length <= 1000",
      "1 <= v1.length + v2.length <= 2000",
      "-231 <= v1[i], v2[i] <= 231 - 1",
      "Follow up: What if you are given k vectors? How well can your code be extended to such cases?",
      "Clarification for the follow-up question:",
      "The \"Zigzag\" order is not clearly defined and is ambiguous for k > 2 cases. If \"Zigzag\" does not look right to you, replace \"Zigzag\" with \"Cyclic\".",
      "Example:",
      "Input: v1 = [1,2,3], v2 = [4,5,6,7], v3 = [8,9]",
      "Output: [1,4,8,2,5,9,3,6,7]"
    ]
  },
  {
    "questionId": 283,
    "title": "Move Zeroes",
    "titleSlug": "move-zeroes",
    "content": "<p>Given an integer array `nums`, move all `0`'s to the end of it while maintaining the relative order of the non-zero elements.</p>\n<p>Note that you must do this in-place without making a copy of the array.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def move_zeroes(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [0,1,0,3,12]",
        "output": "[1,3,12,0,0]"
      },
      {
        "input": "nums = [0]",
        "output": "[0]"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 104",
      "-231 <= nums[i] <= 231 - 1",
      "Follow up: Could you minimize the total number of operations done?"
    ]
  },
  {
    "questionId": 284,
    "title": "Peeking Iterator",
    "titleSlug": "peeking-iterator",
    "content": "<p>Design an iterator that supports the `peek` operation on a list in addition to the `hasNext` and the `next` operations.</p>\n<p>Implement the `PeekingIterator` class:\n`PeekingIterator(int[] nums)` Initializes the object with the given integer array `nums`.</p>\n<p>`int next()` Returns the next element in the array and moves the pointer to the next element.</p>\n<p>`bool hasNext()` Returns `true` if there are still elements in the array.</p>\n<p>`int peek()` Returns the next element in the array without moving the pointer.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def peeking_iterator(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= nums.length <= 1000",
      "1 <= nums[i] <= 1000",
      "All the calls to next and peek are valid.",
      "At most 1000 calls will be made to next, hasNext, and peek.",
      "Follow up: How would you extend your design to be generic and work with all types, not just integer?"
    ]
  },
  {
    "questionId": 285,
    "title": "Inorder Successor in BST",
    "titleSlug": "inorder-successor-in-bst",
    "content": "<p>Given the `root` of a binary search tree and a node `p` in it, return the in-order successor of that node in the BST. If the given node has no in-order successor in the tree, return `null`.</p>\n<p>The successor of a node `p` is the node with the smallest key greater than `p.val`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def inorder_successor_in_bst(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [2,1,3], p = 1",
        "output": "2",
        "explanation": "1's in-order successor node is 2. Note that both p and the return value is of TreeNode type."
      },
      {
        "input": "root = [5,3,6,2,4,null,null,1], p = 6",
        "output": "null",
        "explanation": "There is no in-order successor of the current node, so the answer is `null`."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 104].",
      "-105 <= Node.val <= 105",
      "All Nodes will have unique values."
    ]
  },
  {
    "questionId": 286,
    "title": "Walls and Gates",
    "titleSlug": "walls-and-gates",
    "content": "<p>You are given an `m x n` grid `rooms` initialized with these three possible values.</p>\n<p>`-1` A wall or an obstacle.</p>\n<p>`0` A gate.</p>\n<p>`INF` Infinity means an empty room. We use the value `231 - 1 = 2147483647` to represent `INF` as you may assume that the distance to a gate is less than `2147483647`.</p>\n<p>Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with `INF`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def walls_and_gates(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "rooms = [[2147483647,-1,0,2147483647],[2147483647,2147483647,2147483647,-1],[2147483647,-1,2147483647,-1],[0,-1,2147483647,2147483647]]",
        "output": "[[3,-1,0,1],[2,2,1,-1],[1,-1,2,-1],[0,-1,3,4]]"
      },
      {
        "input": "rooms = [[-1]]",
        "output": "[[-1]]"
      },
      {
        "input": "rooms = [[2147483647]]",
        "output": "[[2147483647]]"
      },
      {
        "input": "rooms = [[0]]",
        "output": "[[0]]"
      }
    ],
    "constraints": [
      "m == rooms.length",
      "n == rooms[i].length",
      "1 <= m, n <= 250",
      "rooms[i][j] is -1, 0, or 231 - 1."
    ]
  },
  {
    "questionId": 287,
    "title": "Find the Duplicate Number",
    "titleSlug": "find-the-duplicate-number",
    "content": "<p>Given an array of integers `nums` containing `n + 1` integers where each integer is in the range `[1, n]` inclusive.</p>\n<p>There is only one repeated number in `nums`, return this repeated number.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_the_duplicate_number(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,3,4,2,2]",
        "output": "2"
      },
      {
        "input": "nums = [3,1,3,4,2]",
        "output": "3"
      },
      {
        "input": "nums = [1,1]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,2]",
        "output": "1"
      }
    ],
    "constraints": [
      "2 <= n <= 3 * 104",
      "nums.length == n + 1",
      "1 <= nums[i] <= n",
      "All the integers in nums appear only once except for precisely one integer which appears two or more times.",
      "Follow up:",
      "How can we prove that at least one duplicate number must exist in nums?",
      "Can you solve the problem without modifying the array nums?",
      "Can you solve the problem using only constant, O(1) extra space?",
      "Can you solve the problem with runtime complexity less than O(n2)?"
    ]
  },
  {
    "questionId": 288,
    "title": "Unique Word Abbreviation",
    "titleSlug": "unique-word-abbreviation",
    "content": "<p>The abbreviation of a word is a concatenation of its first letter, the number of characters between the first and last letter, and its last letter. If a word has only two characters, then it is an abbreviation of itself.</p>\n<p>For example:\n`dog --> d1g` because there is one letter between the first letter `'d'` and the last letter `'g'`.</p>\n<p>`internationalization --> i18n` because there are 18 letters between the first letter `'i'` and the last letter `'n'`.</p>\n<p>`it --> it` because any word with only two characters is an abbreviation of itself.</p>\n<p>Implement the `ValidWordAbbr` class:\n`ValidWordAbbr(String[] dictionary)` Initializes the object with a `dictionary` of words.</p>\n<p>`boolean isUnique(string word)` Returns `true` if either of the following conditions are met (otherwise returns `false`):</p>\n<p>There is no word in `dictionary` whose abbreviation is equal to `word`'s abbreviation.</p>\n<p>For any word in `dictionary` whose abbreviation is equal to `word`'s abbreviation, that word and `word` are the same.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def unique_word_abbreviation(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= dictionary.length <= 3 * 104",
      "1 <= dictionary[i].length <= 20",
      "dictionary[i] consists of lowercase English letters.",
      "1 <= word.length <= 20",
      "word consists of lowercase English letters.",
      "At most 5000 calls will be made to isUnique."
    ]
  },
  {
    "questionId": 289,
    "title": "Game of Life",
    "titleSlug": "game-of-life",
    "content": "<p>According to Wikipedia's article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"\nThe board is made up of an `m x n` grid of cells, where each cell has an initial state: live (represented by a `1`) or dead (represented by a `0`). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):\nAny live cell with fewer than two live neighbors dies as if caused by under-population.</p>\n<p>Any live cell with two or three live neighbors lives on to the next generation.</p>\n<p>Any live cell with more than three live neighbors dies, as if by over-population.</p>\n<p>Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.</p>\n<p>The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the `m x n` grid `board`, return the next state.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def game_of_life(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]",
        "output": "[[0,0,0],[1,0,1],[0,1,1],[0,1,0]]"
      },
      {
        "input": "board = [[1,1],[1,0]]",
        "output": "[[1,1],[1,1]]"
      }
    ],
    "constraints": [
      "m == board.length",
      "n == board[i].length",
      "1 <= m, n <= 25",
      "board[i][j] is 0 or 1.",
      "Follow up:",
      "Could you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells.",
      "In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?"
    ]
  },
  {
    "questionId": 290,
    "title": "Word Pattern",
    "titleSlug": "word-pattern",
    "content": "<p>Given a `pattern` and a string `s`, find if `s` follows the same pattern.</p>\n<p>Here follow means a full match, such that there is a bijection between a letter in `pattern` and a non-empty word in `s`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def word_pattern(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "pattern = \"abba\", s = \"dog cat cat dog\"",
        "output": "true"
      },
      {
        "input": "pattern = \"abba\", s = \"dog cat cat fish\"",
        "output": "false"
      },
      {
        "input": "pattern = \"aaaa\", s = \"dog cat cat dog\"",
        "output": "false"
      },
      {
        "input": "pattern = \"abba\", s = \"dog dog dog dog\"",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= pattern.length <= 300",
      "pattern contains only lower-case English letters.",
      "1 <= s.length <= 3000",
      "s contains only lower-case English letters and spaces ' '.",
      "s does not contain any leading or trailing spaces.",
      "All the words in s are separated by a single space."
    ]
  },
  {
    "questionId": 291,
    "title": "Word Pattern II",
    "titleSlug": "word-pattern-ii",
    "content": "<p>Given a `pattern` and a string `s`, return `true` if `s` matches the `pattern`.</p>\n<p>A string `s` matches a `pattern` if there is some bijective mapping of single characters to strings such that if each character in `pattern` is replaced by the string it maps to, then the resulting string is `s`. A bijective mapping means that no two characters map to the same string, and no character maps to two different strings.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def word_pattern_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "pattern = \"abab\", s = \"redblueredblue\"",
        "output": "true",
        "explanation": "One possible mapping is as follows:"
      },
      {
        "input": "pattern = \"aaaa\", s = \"asdasdasdasd\"",
        "output": "true",
        "explanation": "One possible mapping is as follows:"
      },
      {
        "input": "pattern = \"abab\", s = \"asdasdasdasd\"",
        "output": "true",
        "explanation": "One possible mapping is as follows:"
      },
      {
        "input": "pattern = \"aabb\", s = \"xyzabcxzyabc\"",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= pattern.length, s.length <= 20",
      "pattern and s consist of only lower-case English letters."
    ]
  },
  {
    "questionId": 292,
    "title": "Nim Game",
    "titleSlug": "nim-game",
    "content": "<p>You are playing the following Nim Game with your friend:\nInitially, there is a heap of stones on the table.</p>\n<p>You and your friend will alternate taking turns, and you go first.</p>\n<p>On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.</p>\n<p>The one who removes the last stone is the winner.</p>\n<p>Given `n`, the number of stones in the heap, return `true` if you can win the game assuming both you and your friend play optimally, otherwise return `false`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def nim_game(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 4",
        "output": "false",
        "explanation": "These are the possible outcomes:"
      },
      {
        "input": "n = 1",
        "output": "true"
      },
      {
        "input": "n = 2",
        "output": "true"
      }
    ],
    "constraints": [
      "1 <= n <= 231 - 1"
    ]
  },
  {
    "questionId": 293,
    "title": "Flip Game",
    "titleSlug": "flip-game",
    "content": "<p>You are playing a Flip Game with your friend.</p>\n<p>You are given a string `currentState` that contains only `'+'` and `'-'`. You and your friend take turns to flip two consecutive `\"++\"` into `\"--\"`. The game ends when a person can no longer make a move, and therefore the other person will be the winner.</p>\n<p>Return all possible states of the string `currentState` after one valid move. You may return the answer in any order. If there is no valid move, return an empty list `[]`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def flip_game(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "currentState = \"++++\"",
        "output": "[\"--++\",\"+--+\",\"++--\"]"
      },
      {
        "input": "currentState = \"+\"",
        "output": "[]"
      }
    ],
    "constraints": [
      "1 <= currentState.length <= 500",
      "currentState[i] is either '+' or '-'."
    ]
  },
  {
    "questionId": 294,
    "title": "Flip Game II",
    "titleSlug": "flip-game-ii",
    "content": "<p>You are playing a Flip Game with your friend.</p>\n<p>You are given a string `currentState` that contains only `'+'` and `'-'`. You and your friend take turns to flip two consecutive `\"++\"` into `\"--\"`. The game ends when a person can no longer make a move, and therefore the other person will be the winner.</p>\n<p>Return `true` if the starting player can guarantee a win, and `false` otherwise.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def flip_game_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "currentState = \"++++\"",
        "output": "true",
        "explanation": "The starting player can guarantee a win by flipping the middle \"++\" to become \"+--+\"."
      },
      {
        "input": "currentState = \"+\"",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= currentState.length <= 60",
      "currentState[i] is either '+' or '-'.",
      "Follow up: Derive your algorithm's runtime complexity."
    ]
  },
  {
    "questionId": 298,
    "title": "Binary Tree Longest Consecutive Sequence",
    "titleSlug": "binary-tree-longest-consecutive-sequence",
    "content": "<p>Given the `root` of a binary tree, return the length of the longest consecutive sequence path.</p>\n<p>The path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The longest consecutive path needs to be from parent to child (cannot be the reverse).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def binary_tree_longest_consecutive_sequence(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,null,3,2,4,null,null,null,5]",
        "output": "3",
        "explanation": "Longest consecutive sequence path is 3-4-5, so return 3."
      },
      {
        "input": "root = [2,null,3,2,null,1]",
        "output": "2",
        "explanation": "Longest consecutive sequence path is 2-3, not 3-2-1, so return 2."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 3 * 104].",
      "-3 * 104 <= Node.val <= 3 * 104"
    ]
  },
  {
    "questionId": 299,
    "title": "Bulls and Cows",
    "titleSlug": "bulls-and-cows",
    "content": "<p>You are playing the Bulls and Cows game with your friend.</p>\n<p>You write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:\nThe number of \"bulls\", which are digits in the guess that are in the correct position.</p>\n<p>The number of \"cows\", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.</p>\n<p>Given the secret number `secret` and your friend's guess `guess`, return the hint for your friend's guess.</p>\n<p>The hint should be formatted as `\"xAyB\"`, where `x` is the number of bulls and `y` is the number of cows. Note that both `secret` and `guess` may contain duplicate digits.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def bulls_and_cows(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "secret = \"1807\", guess = \"7810\"",
        "output": "\"1A3B\"",
        "explanation": "Bulls are connected with a '|' and cows are underlined:"
      },
      {
        "input": "secret = \"1123\", guess = \"0111\"",
        "output": "\"1A1B\"",
        "explanation": "Bulls are connected with a '|' and cows are underlined:"
      },
      {
        "input": "secret = \"1\", guess = \"0\"",
        "output": "\"0A0B\""
      },
      {
        "input": "secret = \"1\", guess = \"1\"",
        "output": "\"1A0B\""
      }
    ],
    "constraints": [
      "1 <= secret.length, guess.length <= 1000",
      "secret.length == guess.length",
      "secret and guess consist of digits only."
    ]
  },
  {
    "questionId": 300,
    "title": "Longest Increasing Subsequence",
    "titleSlug": "longest-increasing-subsequence",
    "content": "<p>Given an integer array `nums`, return the length of the longest strictly increasing subsequence.</p>\n<p>A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, `[3,6,2,7]` is a subsequence of the array `[0,3,1,6,2,2,7]`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_increasing_subsequence(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [10,9,2,5,3,7,101,18]",
        "output": "4",
        "explanation": "The longest increasing subsequence is [2,3,7,101], therefore the length is 4."
      },
      {
        "input": "nums = [0,1,0,3,2,3]",
        "output": "4"
      },
      {
        "input": "nums = [7,7,7,7,7,7,7]",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 2500",
      "-104 <= nums[i] <= 104",
      "Follow up:",
      "Could you come up with the O(n2) solution?",
      "Could you improve it to O(n log(n)) time complexity?"
    ]
  },
  {
    "questionId": 303,
    "title": "Range Sum Query - Immutable",
    "titleSlug": "range-sum-query---immutable",
    "content": "<p>Given an integer array `nums`, find the sum of the elements between indices `left` and `right` inclusive, where `(left <= right)`.</p>\n<p>Implement the `NumArray` class:\n`NumArray(int[] nums)` initializes the object with the integer array `nums`.</p>\n<p>`int sumRange(int left, int right)` returns the sum of the elements of the `nums` array in the range `[left, right]` inclusive (i.e., `sum(nums[left], nums[left + 1], ... , nums[right])`).</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def range_sum_query___immutable(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= nums.length <= 104",
      "-105 <= nums[i] <= 105",
      "0 <= left <= right < nums.length",
      "At most 104 calls will be made to sumRange."
    ]
  },
  {
    "questionId": 304,
    "title": "Range Sum Query 2D - Immutable",
    "titleSlug": "range-sum-query-2d---immutable",
    "content": "<p>Given a 2D matrix `matrix`, find the sum of the elements inside the rectangle defined by its upper left corner `(row1, col1)` and lower right corner `(row2, col2)`.</p>\n<p>Implement the NumMatrix class:\n`NumMatrix(int[][] matrix)` initializes the object with the integer matrix `matrix`.</p>\n<p>`int sumRegion(int row1, int col1, int row2, int col2)` returns the sum of the elements of the `matrix` array inside the rectangle defined by its upper left corner `(row1, col1)` and lower right corner `(row2, col2)`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def range_sum_query_2d___immutable(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "m == matrix.length",
      "n == matrix[i].length",
      "1 <= m, n <= 200",
      "-105 <= matrix[i][j] <= 105",
      "0 <= row1 <= row2 < m",
      "0 <= col1 <= col2 < n",
      "At most 104 calls will be made to sumRegion."
    ]
  },
  {
    "questionId": 306,
    "title": "Additive Number",
    "titleSlug": "additive-number",
    "content": "<p>Additive number is a string whose digits can form additive sequence.</p>\n<p>A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.</p>\n<p>Given a string containing only digits `'0'-'9'`, write a function to determine if it's an additive number.</p>\n<p>Note: Numbers in the additive sequence cannot have leading zeros, so sequence `1, 2, 03` or `1, 02, 3` is invalid.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def additive_number(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "\"112358\"",
        "output": "true",
        "explanation": "The digits can form an additive sequence: 1, 1, 2, 3, 5, 8."
      },
      {
        "input": "\"199100199\"",
        "output": "true",
        "explanation": "The additive sequence is: 1, 99, 100, 199."
      }
    ],
    "constraints": [
      "num consists only of digits '0'-'9'.",
      "1 <= num.length <= 35",
      "Follow up:",
      "How would you handle overflow for very large input integers?"
    ]
  },
  {
    "questionId": 307,
    "title": "Range Sum Query - Mutable",
    "titleSlug": "range-sum-query---mutable",
    "content": "<p>Given an array `nums` and two types of queries where you should update the value of an index in the array, and retrieve the sum of a range in the array.</p>\n<p>Implement the `NumArray` class:\n`NumArray(int[] nums)` initializes the object with the integer array `nums`.</p>\n<p>`void update(int index, int val)` updates the value of `nums[index]` to be `val`.</p>\n<p>`int sumRange(int left, int right)` returns the sum of the subarray `nums[left, right]` (i.e., `nums[left] + nums[left + 1], ..., nums[right]`).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def range_sum_query___mutable(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= nums.length <= 3 * 104",
      "-100 <= nums[i] <= 100",
      "0 <= index < nums.length",
      "-100 <= val <= 100",
      "0 <= left <= right < nums.length",
      "At most 3 * 104 calls will be made to update and sumRange."
    ]
  },
  {
    "questionId": 309,
    "title": "Best Time to Buy and Sell Stock with Cooldown",
    "titleSlug": "best-time-to-buy-and-sell-stock-with-cooldown",
    "content": "<p>You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.</p>\n<p>Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:\nAfter you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).</p>\n<p>Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def best_time_to_buy_and_sell_stock_with_cooldown(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "prices = [1,2,3,0,2]",
        "output": "3",
        "explanation": "transactions = [buy, sell, cooldown, buy, sell]"
      },
      {
        "input": "prices = [1]",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= prices.length <= 5000",
      "0 <= prices[i] <= 1000"
    ]
  },
  {
    "questionId": 310,
    "title": "Minimum Height Trees",
    "titleSlug": "minimum-height-trees",
    "content": "<p>A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.</p>\n<p>Given a tree of `n` nodes labelled from `0` to `n - 1`, and an array of `n - 1` `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between the two nodes `ai` and `bi` in the tree, you can choose any node of the tree as the root. When you select a node `x` as the root, the result tree has height `h`. Among all possible rooted trees, those with minimum height (i.e. `min(h)`)  are called minimum height trees (MHTs).</p>\n<p>Return a list of all MHTs' root labels. You can return the answer in any order.</p>\n<p>The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_height_trees(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 4, edges = [[1,0],[1,2],[1,3]]",
        "output": "[1]",
        "explanation": "As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT."
      },
      {
        "input": "n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]",
        "output": "[3,4]"
      },
      {
        "input": "n = 1, edges = []",
        "output": "[0]"
      },
      {
        "input": "n = 2, edges = [[0,1]]",
        "output": "[0,1]"
      }
    ],
    "constraints": [
      "1 <= n <= 2 * 104",
      "edges.length == n - 1",
      "0 <= ai, bi < n",
      "ai != bi",
      "All the pairs (ai, bi) are distinct.",
      "The given input is guaranteed to be a tree and there will be no repeated edges."
    ]
  },
  {
    "questionId": 311,
    "title": "Sparse Matrix Multiplication",
    "titleSlug": "sparse-matrix-multiplication",
    "content": "<p>Given two sparse matrices `mat1` of size `m x k` and `mat2` of size `k x n`, return the result of `mat1 x mat2`. You may assume that multiplication is always possible.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sparse_matrix_multiplication(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "mat1 = [[1,0,0],[-1,0,3]], mat2 = [[7,0,0],[0,0,0],[0,0,1]]",
        "output": "[[7,0,0],[-7,0,3]]"
      },
      {
        "input": "mat1 = [[0]], mat2 = [[0]]",
        "output": "[[0]]"
      }
    ],
    "constraints": [
      "m == mat1.length",
      "k == mat1[i].length == mat2.length",
      "n == mat2[i].length",
      "1 <= m, n, k <= 100",
      "-100 <= mat1[i][j], mat2[i][j] <= 100"
    ]
  },
  {
    "questionId": 313,
    "title": "Super Ugly Number",
    "titleSlug": "super-ugly-number",
    "content": "<p>Given an integer `n` and an array of integers `primes`, return the `nth` super ugly number.</p>\n<p>Super ugly number is a positive number whose all prime factors are in the array `primes`.</p>\n<p>The `nth` super ugly number is guaranteed to fit in a 32-bit signed integer.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def super_ugly_number(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 12, primes = [2,7,13,19]",
        "output": "32",
        "explanation": "[1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes == [2,7,13,19]."
      },
      {
        "input": "n = 1, primes = [2,3,5]",
        "output": "1",
        "explanation": "1 is a super ugly number for any given primes."
      }
    ],
    "constraints": [
      "1 <= n <= 106",
      "1 <= primes.length <= 100",
      "2 <= primes[i] <= 1000",
      "primes[i] is guaranteed to be a prime number.",
      "All the values of primes are unique and sorted in ascending order."
    ]
  },
  {
    "questionId": 314,
    "title": "Binary Tree Vertical Order Traversal",
    "titleSlug": "binary-tree-vertical-order-traversal",
    "content": "<p>Given the `root` of a binary tree, return the vertical order traversal of its nodes' values. (i.e., from top to bottom, column by column).</p>\n<p>If two nodes are in the same row and column, the order should be from left to right.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def binary_tree_vertical_order_traversal(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [3,9,20,null,null,15,7]",
        "output": "[[9],[3,15],[20],[7]]"
      },
      {
        "input": "root = [3,9,8,4,0,1,7]",
        "output": "[[4],[9],[3,0,1],[8],[7]]"
      },
      {
        "input": "root = [3,9,8,4,0,1,7,null,null,null,2,5]",
        "output": "[[4],[9,5],[3,0,1],[8,2],[7]]"
      },
      {
        "input": "root = []",
        "output": "[]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 100].",
      "-100 <= Node.val <= 100"
    ]
  },
  {
    "questionId": 316,
    "title": "Remove Duplicate Letters",
    "titleSlug": "remove-duplicate-letters",
    "content": "<p>Given a string `s`, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.</p>\n<p>Note: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def remove_duplicate_letters(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"bcabc\"",
        "output": "\"abc\""
      },
      {
        "input": "s = \"cbacdcbc\"",
        "output": "\"acdb\""
      }
    ],
    "constraints": [
      "1 <= s.length <= 104",
      "s consists of lowercase English letters."
    ]
  },
  {
    "questionId": 318,
    "title": "Maximum Product of Word Lengths",
    "titleSlug": "maximum-product-of-word-lengths",
    "content": "<p>Given a string array `words`, return the maximum value of `length(word[i]) * length(word[j])` where the two words do not share common letters. If no such two words exist, return `0`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_product_of_word_lengths(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]",
        "output": "16",
        "explanation": "The two words can be \"abcw\", \"xtfn\"."
      },
      {
        "input": "words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]",
        "output": "4",
        "explanation": "The two words can be \"ab\", \"cd\"."
      },
      {
        "input": "words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]",
        "output": "0",
        "explanation": "No such pair of words."
      }
    ],
    "constraints": [
      "2 <= words.length <= 1000",
      "1 <= words[i].length <= 1000",
      "words[i] consists only of lowercase English letters."
    ]
  },
  {
    "questionId": 319,
    "title": "Bulb Switcher",
    "titleSlug": "bulb-switcher",
    "content": "<p>There are `n` bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.</p>\n<p>On the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the `ith` round, you toggle every `i` bulb. For the `nth` round, you only toggle the last bulb.</p>\n<p>Return the number of bulbs that are on after `n` rounds.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def bulb_switcher(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 3",
        "output": "1",
        "explanation": "At first, the three bulbs are [off, off, off]."
      },
      {
        "input": "n = 0",
        "output": "0"
      },
      {
        "input": "n = 1",
        "output": "1"
      }
    ],
    "constraints": [
      "0 <= n <= 109"
    ]
  },
  {
    "questionId": 320,
    "title": "Generalized Abbreviation",
    "titleSlug": "generalized-abbreviation",
    "content": "<p>A word's generalized abbreviation can be constructed by taking any number of non-overlapping substrings and replacing them with their respective lengths. For example, `\"abcde\"` can be abbreviated into `\"a3e\"` (`\"bcd\"` turned into `\"3\"`), `\"1bcd1\"` (`\"a\"` and `\"e\"` both turned into `\"1\"`), and `\"23\"` (`\"ab\"` turned into `\"2\"` and `\"cde\"` turned into `\"3\"`).</p>\n<p>Given a string `word`, return a list of all the possible generalized abbreviations of `word`. Return the answer in any order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def generalized_abbreviation(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "word = \"word\"",
        "output": "[\"4\",\"3d\",\"2r1\",\"2rd\",\"1o2\",\"1o1d\",\"1or1\",\"1ord\",\"w3\",\"w2d\",\"w1r1\",\"w1rd\",\"wo2\",\"wo1d\",\"wor1\",\"word\"]"
      },
      {
        "input": "word = \"a\"",
        "output": "[\"1\",\"a\"]"
      }
    ],
    "constraints": [
      "1 <= word.length <= 15",
      "word consists of only lowercase English letters."
    ]
  },
  {
    "questionId": 322,
    "title": "Coin Change",
    "titleSlug": "coin-change",
    "content": "<p>You are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money.</p>\n<p>Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return `-1`.</p>\n<p>You may assume that you have an infinite number of each kind of coin.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def coin_change(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "coins = [1,2,5], amount = 11",
        "output": "3",
        "explanation": "11 = 5 + 5 + 1"
      },
      {
        "input": "coins = [2], amount = 3",
        "output": "-1"
      },
      {
        "input": "coins = [1], amount = 0",
        "output": "0"
      },
      {
        "input": "coins = [1], amount = 1",
        "output": "1"
      },
      {
        "input": "coins = [1], amount = 2",
        "output": "2"
      }
    ],
    "constraints": [
      "1 <= coins.length <= 12",
      "1 <= coins[i] <= 231 - 1",
      "0 <= amount <= 104"
    ]
  },
  {
    "questionId": 323,
    "title": "Number of Connected Components in an Undirected Graph",
    "titleSlug": "number-of-connected-components-in-an-undirected-graph",
    "content": "<p>You have a graph of `n` nodes. You are given an integer `n` and an array `edges` where `edges[i] = [ai, bi]` indicates that there is an edge between `ai` and `bi` in the graph.</p>\n<p>Return the number of connected components in the graph.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_connected_components_in_an_undirected_graph(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 5, edges = [[0,1],[1,2],[3,4]]",
        "output": "2"
      },
      {
        "input": "n = 5, edges = [[0,1],[1,2],[2,3],[3,4]]",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= n <= 2000",
      "1 <= edges.length <= 5000",
      "edges[i].length == 2",
      "0 <= ai <= bi < n",
      "ai != bi",
      "There are no repeated edges."
    ]
  },
  {
    "questionId": 324,
    "title": "Wiggle Sort II",
    "titleSlug": "wiggle-sort-ii",
    "content": "<p>Given an integer array `nums`, reorder it such that `nums[0] < nums[1] > nums[2] < nums[3]...`.</p>\n<p>You may assume the input array always has a valid answer.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def wiggle_sort_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,5,1,1,6,4]",
        "output": "[1,6,1,5,1,4]",
        "explanation": "[1,4,1,5,1,6] is also accepted."
      },
      {
        "input": "nums = [1,3,2,2,3,1]",
        "output": "[2,3,1,3,1,2]"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 5 * 104",
      "0 <= nums[i] <= 5000",
      "It is guaranteed that there will be an answer for the given input nums.",
      "Follow Up: Can you do it in O(n) time and/or in-place with O(1) extra space?"
    ]
  },
  {
    "questionId": 325,
    "title": "Maximum Size Subarray Sum Equals k",
    "titleSlug": "maximum-size-subarray-sum-equals-k",
    "content": "<p>Given an integer array `nums` and an integer `k`, return the maximum length of a subarray that sums to `k`. If there isn't one, return `0` instead.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_size_subarray_sum_equals_k(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,-1,5,-2,3], k = 3",
        "output": "4",
        "explanation": "The subarray [1, -1, 5, -2] sums to 3 and is the longest."
      },
      {
        "input": "nums = [-2,-1,2,1], k = 1",
        "output": "2",
        "explanation": "The subarray [-1, 2] sums to 1 and is the longest."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 104",
      "-104 <= nums[i] <= 104",
      "-105 <= k <= 105",
      "Follow Up: Can you do it in O(n) time?"
    ]
  },
  {
    "questionId": 326,
    "title": "Power of Three",
    "titleSlug": "power-of-three",
    "content": "<p>Given an integer `n`, return `true` if it is a power of three. Otherwise, return `false`.</p>\n<p>An integer `n` is a power of three, if there exists an integer `x` such that `n == 3x`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def power_of_three(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 27",
        "output": "true"
      },
      {
        "input": "n = 0",
        "output": "false"
      },
      {
        "input": "n = 9",
        "output": "true"
      },
      {
        "input": "n = 45",
        "output": "false"
      }
    ],
    "constraints": [
      "-231 <= n <= 231 - 1",
      "Follow up: Could you solve it without loops/recursion?"
    ]
  },
  {
    "questionId": 328,
    "title": "Odd Even Linked List",
    "titleSlug": "odd-even-linked-list",
    "content": "<p>Given the `head` of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.</p>\n<p>The first node is considered odd, and the second node is even, and so on.</p>\n<p>Note that the relative order inside both the even and odd groups should remain as it was in the input.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def odd_even_linked_list(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [1,2,3,4,5]",
        "output": "[1,3,5,2,4]"
      },
      {
        "input": "head = [2,1,3,5,6,4,7]",
        "output": "[2,3,6,7,1,5,4]"
      }
    ],
    "constraints": [
      "The number of nodes in the linked list is in the range [0, 104].",
      "-106 <= Node.val <= 106",
      "Follow up: Could you solve it in O(1) space complexity and O(nodes) time complexity?"
    ]
  },
  {
    "questionId": 331,
    "title": "Verify Preorder Serialization of a Binary Tree",
    "titleSlug": "verify-preorder-serialization-of-a-binary-tree",
    "content": "<p>One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as `'#'`.</p>\n<p>For example, the above binary tree can be serialized to the string `\"9,3,4,#,#,1,#,#,2,#,6,#,#\"`, where `'#'` represents a null node.</p>\n<p>Given a string of comma-separated values `preorder`, return `true` if it is a correct preorder traversal serialization of a binary tree.</p>\n<p>It is guaranteed that each comma-separated value in the string must be either an integer or a character `'#'` representing null pointer.</p>\n<p>You may assume that the input format is always valid.</p>\n<p>For example, it could never contain two consecutive commas, such as `\"1,,3\"`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def verify_preorder_serialization_of_a_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\"",
        "output": "true"
      },
      {
        "input": "preorder = \"1,#\"",
        "output": "false"
      },
      {
        "input": "preorder = \"9,#,#,1\"",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= preorder.length <= 104",
      "preoder consist of integers in the range [0, 100] and '#' separated by commas ','.",
      "Follow up: Find an algorithm without reconstructing the tree."
    ]
  },
  {
    "questionId": 332,
    "title": "Reconstruct Itinerary",
    "titleSlug": "reconstruct-itinerary",
    "content": "<p>You are given a list of airline `tickets` where `tickets[i] = [fromi, toi]` represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.</p>\n<p>All of the tickets belong to a man who departs from `\"JFK\"`, thus, the itinerary must begin with `\"JFK\"`. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.</p>\n<p>For example, the itinerary `[\"JFK\", \"LGA\"]` has a smaller lexical order than `[\"JFK\", \"LGB\"]`.</p>\n<p>You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def reconstruct_itinerary(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]",
        "output": "[\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"]"
      },
      {
        "input": "tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]",
        "output": "[\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]",
        "explanation": "Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"] but it is larger in lexical order."
      }
    ],
    "constraints": [
      "1 <= tickets.length <= 300",
      "tickets[i].length == 2",
      "fromi.length == 3",
      "toi.length == 3",
      "fromi and toi consist of uppercase English letters.",
      "fromi != toi"
    ]
  },
  {
    "questionId": 333,
    "title": "Largest BST Subtree",
    "titleSlug": "largest-bst-subtree",
    "content": "<p>Given the root of a binary tree, find the largest subtree, which is also a Binary Search Tree (BST), where the largest means subtree has the largest number of nodes.</p>\n<p>A Binary Search Tree (BST) is a tree in which all the nodes follow the below-mentioned properties:\nThe left subtree values are less than the value of their parent (root) node's value.</p>\n<p>The right subtree values are greater than the value of their parent (root) node's value.</p>\n<p>Note: A subtree must include all of its descendants.</p>\n<p>Follow up: Can you figure out ways to solve it with O(n) time complexity?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def largest_bst_subtree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [10,5,15,1,8,null,7]",
        "output": "3",
        "explanation": "The Largest BST Subtree in this case is the highlighted one. The return value is the subtree's size, which is 3."
      },
      {
        "input": "root = [4,2,7,2,3,5,null,2,null,null,null,null,null,1]",
        "output": "2"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 104].",
      "-104 <= Node.val <= 104"
    ]
  },
  {
    "questionId": 334,
    "title": "Increasing Triplet Subsequence",
    "titleSlug": "increasing-triplet-subsequence",
    "content": "<p>Given an integer array `nums`, return `true` if there exists a triple of indices `(i, j, k)` such that `i < j < k` and `nums[i] < nums[j] < nums[k]`. If no such indices exists, return `false`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def increasing_triplet_subsequence(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "true",
        "explanation": "Any triplet where i < j < k is valid."
      },
      {
        "input": "nums = [5,4,3,2,1]",
        "output": "false",
        "explanation": "No triplet exists."
      },
      {
        "input": "nums = [2,1,5,0,4,6]",
        "output": "true",
        "explanation": "The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 105",
      "-231 <= nums[i] <= 231 - 1",
      "Follow up: Could you implement a solution that runs in O(n) time complexity and O(1) space complexity?"
    ]
  },
  {
    "questionId": 337,
    "title": "House Robber III",
    "titleSlug": "house-robber-iii",
    "content": "<p>The thief has found himself a new place for his thievery again. There is only one entrance to this area, called `root`.</p>\n<p>Besides the `root`, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if two directly-linked houses were broken into on the same night.</p>\n<p>Given the `root` of the binary tree, return the maximum amount of money the thief can rob without alerting the police.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def house_robber_iii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [3,2,3,null,3,null,1]",
        "output": "7",
        "explanation": "Maximum amount of money the thief can rob = 3 + 3 + 1 = 7."
      },
      {
        "input": "root = [3,4,5,1,3,null,1]",
        "output": "9",
        "explanation": "Maximum amount of money the thief can rob = 4 + 5 = 9."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 104].",
      "0 <= Node.val <= 104"
    ]
  },
  {
    "questionId": 338,
    "title": "Counting Bits",
    "titleSlug": "counting-bits",
    "content": "<p>Given an integer `num`, return an array of the number of `1`'s in the binary representation of every number in the range `[0, num]`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def counting_bits(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "num = 2",
        "output": "[0,1,1]",
        "explanation": "0 --> 0"
      },
      {
        "input": "num = 5",
        "output": "[0,1,1,2,1,2]",
        "explanation": "0 --> 0"
      }
    ],
    "constraints": [
      "0 <= num <= 105",
      "Follow up:",
      "It is very easy to come up with a solution with run time O(32n). Can you do it in linear time O(n) and possibly in a single pass?",
      "Could you solve it in O(n) space complexity?",
      "Can you do it without using any built-in function (i.e., like __builtin_popcount in C++)?"
    ]
  },
  {
    "questionId": 339,
    "title": "Nested List Weight Sum",
    "titleSlug": "nested-list-weight-sum",
    "content": "<p>You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists.</p>\n<p>The depth of an integer is the number of lists that it is inside of. For example, the nested list `[1,[2,2],[[3],2],1]` has each integer's value set to its depth.</p>\n<p>Return the sum of each integer in `nestedList` multiplied by its depth.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def nested_list_weight_sum(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nestedList = [[1,1],2,[1,1]]",
        "output": "10",
        "explanation": "Four 1's at depth 2, one 2 at depth 1. 1*2 + 1*2 + 2*1 + 1*2 + 1*2 = 10."
      },
      {
        "input": "nestedList = [1,[4,[6]]]",
        "output": "27",
        "explanation": "One 1 at depth 1, one 4 at depth 2, and one 6 at depth 3. 1*1 + 4*2 + 6*3 = 27."
      },
      {
        "input": "nestedList = [0]",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= nestedList.length <= 50",
      "The values of the integers in the nested list is in the range [-100, 100].",
      "The maximum depth of any integer is less than or equal to 50."
    ]
  },
  {
    "questionId": 340,
    "title": "Longest Substring with At Most K Distinct Characters",
    "titleSlug": "longest-substring-with-at-most-k-distinct-characters",
    "content": "<p>Given a string `s` and an integer `k`, return the length of the longest substring of `s` that contains at most `k` distinct characters.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_substring_with_at_most_k_distinct_characters(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"eceba\", k = 2",
        "output": "3",
        "explanation": "The substring is \"ece\" with length 3."
      },
      {
        "input": "s = \"aa\", k = 1",
        "output": "2",
        "explanation": "The substring is \"aa\" with length 2."
      }
    ],
    "constraints": [
      "1 <= s.length <= 5 * 104",
      "0 <= k <= 50"
    ]
  },
  {
    "questionId": 341,
    "title": "Flatten Nested List Iterator",
    "titleSlug": "flatten-nested-list-iterator",
    "content": "<p>You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.</p>\n<p>Implement the `NestedIterator` class:\n`NestedIterator(List<NestedInteger> nestedList)` Initializes the iterator with the nested list `nestedList`.</p>\n<p>`int next()` Returns the next integer in the nested list.</p>\n<p>`boolean hasNext()` Returns `true` if there are still some integers in the nested list and `false` otherwise.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def flatten_nested_list_iterator(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nestedList = [[1,1],2,[1,1]]",
        "output": "[1,1,2,1,1]",
        "explanation": "By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1]."
      },
      {
        "input": "nestedList = [1,[4,[6]]]",
        "output": "[1,4,6]",
        "explanation": "By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6]."
      }
    ],
    "constraints": [
      "1 <= nestedList.length <= 500",
      "The values of the integers in the nested list is in the range [-106, 106]."
    ]
  },
  {
    "questionId": 342,
    "title": "Power of Four",
    "titleSlug": "power-of-four",
    "content": "<p>Given an integer `n`, return `true` if it is a power of four. Otherwise, return `false`.</p>\n<p>An integer `n` is a power of four, if there exists an integer `x` such that `n == 4x`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def power_of_four(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 16",
        "output": "true"
      },
      {
        "input": "n = 5",
        "output": "false"
      },
      {
        "input": "n = 1",
        "output": "true"
      }
    ],
    "constraints": [
      "-231 <= n <= 231 - 1",
      "Follow up: Could you solve it without loops/recursion?"
    ]
  },
  {
    "questionId": 343,
    "title": "Integer Break",
    "titleSlug": "integer-break",
    "content": "<p>Given an integer `n`, break it into the sum of `k` positive integers, where `k >= 2`, and maximize the product of those integers.</p>\n<p>Return the maximum product you can get.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def integer_break(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 2",
        "output": "1",
        "explanation": "2 = 1 + 1, 1 \u00d7 1 = 1."
      },
      {
        "input": "n = 10",
        "output": "36",
        "explanation": "10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36."
      }
    ],
    "constraints": [
      "2 <= n <= 58"
    ]
  },
  {
    "questionId": 344,
    "title": "Reverse String",
    "titleSlug": "reverse-string",
    "content": "<p>Write a function that reverses a string. The input string is given as an array of characters `s`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def reverse_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = [\"h\",\"e\",\"l\",\"l\",\"o\"]",
        "output": "[\"o\",\"l\",\"l\",\"e\",\"h\"]"
      },
      {
        "input": "s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]",
        "output": "[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]"
      }
    ],
    "constraints": [
      "1 <= s.length <= 105",
      "s[i] is a printable ascii character.",
      "Follow up: Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory."
    ]
  },
  {
    "questionId": 345,
    "title": "Reverse Vowels of a String",
    "titleSlug": "reverse-vowels-of-a-string",
    "content": "<p>Given a string `s`, reverse only all the vowels in the string and return it.</p>\n<p>The vowels are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`, and they can appear in both cases.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def reverse_vowels_of_a_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"hello\"",
        "output": "\"holle\""
      },
      {
        "input": "s = \"leetcode\"",
        "output": "\"leotcede\""
      }
    ],
    "constraints": [
      "1 <= s.length <= 3 * 105",
      "s consist of printable ASCII characters."
    ]
  },
  {
    "questionId": 346,
    "title": "Moving Average from Data Stream",
    "titleSlug": "moving-average-from-data-stream",
    "content": "<p>Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.</p>\n<p>Implement the `MovingAverage` class:\n`MovingAverage(int size)` Initializes the object with the size of the window `size`.</p>\n<p>`double next(int val)` Returns the moving average of the last `size` values of the stream.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def moving_average_from_data_stream(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= size <= 1000",
      "-105 <= val <= 105",
      "At most 104 calls will be made to next."
    ]
  },
  {
    "questionId": 347,
    "title": "Top K Frequent Elements",
    "titleSlug": "top-k-frequent-elements",
    "content": "<p>Given an integer array `nums` and an integer `k`, return the `k` most frequent elements. You may return the answer in any order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def top_k_frequent_elements(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,1,1,2,2,3], k = 2",
        "output": "[1,2]"
      },
      {
        "input": "nums = [1], k = 1",
        "output": "[1]"
      }
    ],
    "constraints": [
      "1 <= nums.legth <= 105",
      "k is in the range [1, the number of unique elements in the array].",
      "It is guaranteed that the answer is unique.",
      "Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size."
    ]
  },
  {
    "questionId": 348,
    "title": "Design Tic-Tac-Toe",
    "titleSlug": "design-tic-tac-toe",
    "content": "<p>Assume the following rules are for the tic-tac-toe game on an `n x n` board between two players:\nA move is guaranteed to be valid and is placed on an empty block.</p>\n<p>Once a winning condition is reached, no more moves are allowed.</p>\n<p>A player who succeeds in placing `n` of their marks in a horizontal, vertical, or diagonal row wins the game.</p>\n<p>Implement the `TicTacToe` class:\n`TicTacToe(int n)` Initializes the object the size of the board `n`.</p>\n<p>`int move(int row, int col, int player)` Indicates that player with id `player` plays at the cell `(row, col)` of the board. The move is guaranteed to be a valid move.</p>\n<p>Follow up:\nCould you do better than `O(n2)` per `move()` operation?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def design_tic_tac_toe(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "2 <= n <= 100",
      "player is 1 or 2.",
      "1 <= row, col <= n",
      "(row, col) are unique for each different call to move.",
      "At most n2 calls will be made to move."
    ]
  },
  {
    "questionId": 349,
    "title": "Intersection of Two Arrays",
    "titleSlug": "intersection-of-two-arrays",
    "content": "<p>Given two integer arrays `nums1` and `nums2`, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def intersection_of_two_arrays(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums1 = [1,2,2,1], nums2 = [2,2]",
        "output": "[2]"
      },
      {
        "input": "nums1 = [4,9,5], nums2 = [9,4,9,8,4]",
        "output": "[9,4]",
        "explanation": "[4,9] is also accepted."
      }
    ],
    "constraints": [
      "1 <= nums1.length, nums2.length <= 1000",
      "0 <= nums1[i], nums2[i] <= 1000"
    ]
  },
  {
    "questionId": 350,
    "title": "Intersection of Two Arrays II",
    "titleSlug": "intersection-of-two-arrays-ii",
    "content": "<p>Given two integer arrays `nums1` and `nums2`, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def intersection_of_two_arrays_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums1 = [1,2,2,1], nums2 = [2,2]",
        "output": "[2,2]"
      },
      {
        "input": "nums1 = [4,9,5], nums2 = [9,4,9,8,4]",
        "output": "[4,9]",
        "explanation": "[9,4] is also accepted."
      }
    ],
    "constraints": [
      "1 <= nums1.length, nums2.length <= 1000",
      "0 <= nums1[i], nums2[i] <= 1000",
      "Follow up:",
      "What if the given array is already sorted? How would you optimize your algorithm?",
      "What if nums1's size is small compared to nums2's size? Which algorithm is better?",
      "What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?"
    ]
  },
  {
    "questionId": 351,
    "title": "Android Unlock Patterns",
    "titleSlug": "android-unlock-patterns",
    "content": "<p>Android devices have a special lock screen with a `3 x 3` grid of dots. Users can set an \"unlock pattern\" by connecting the dots in a specific sequence, forming a series of joined line segments where each segment's endpoints are two consecutive dots in the sequence. A sequence of `k` dots is a valid unlock pattern if both of the following are true:\nAll the dots in the sequence are distinct.</p>\n<p>If the line segment connecting two consecutive dots in the sequence passes through any other dot, the other dot must have previously appeared in the sequence. No jumps through non-selected dots are allowed.</p>\n<p>Here are some example valid and invalid unlock patterns:\nThe 1st pattern `[4,1,3,6]` is invalid because the line connecting dots `1` and `3` pass through dot `2`, but dot `2` did not previously appear in the sequence.</p>\n<p>The 2nd pattern `[4,1,9,2]` is invalid because the line connecting dots `1` and `9` pass through dot `5`, but dot `5` did not previously appear in the sequence.</p>\n<p>The 3rd pattern `[2,4,1,3,6]` is valid because it follows the conditions. The line connecting dots `1` and `3` meets the condition because dot `2` previously appeared in the sequence.</p>\n<p>The 4th pattern `[6,5,4,1,9,2]` is valid because it follows the conditions. The line connecting dots `1` and `9` meets the condition because dot `5` previously appeared in the sequence.</p>\n<p>Given two integers `m` and `n`, return the number of unique and valid unlock patterns of the Android grid lock screen that consist of at least `m` keys and at most `n` keys.</p>\n<p>Two unlock patterns are considered unique if there is a dot in one sequence that is not in the other, or the order of the dots is different.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def android_unlock_patterns(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "m = 1, n = 1",
        "output": "9"
      },
      {
        "input": "m = 1, n = 2",
        "output": "65"
      }
    ],
    "constraints": [
      "1 <= m, n <= 9"
    ]
  },
  {
    "questionId": 353,
    "title": "Design Snake Game",
    "titleSlug": "design-snake-game",
    "content": "<p>Design a Snake game that is played on a device with screen size `height x width`. Play the game online if you are not familiar with the game.</p>\n<p>The snake is initially positioned at the top left corner `(0, 0)` with a length of `1` unit.</p>\n<p>You are given an array `food` where `food[i] = (ri, ci)` is the row and column position of a piece of food that the snake can eat. When a snake eats a piece of food, its length and the game's score both increase by `1`.</p>\n<p>Each piece of food appears one by one on the screen, meaning the second piece of food will not appear until the snake eats the first piece of food.</p>\n<p>When a piece of food appears on the screen, it is guaranteed that it will not appear on a block occupied by the snake.</p>\n<p>The game is over if the snake goes out of bounds (hits a wall) or if its head occupies a space that its body occupies after moving (i.e. a snake of length 4 cannot run into itself).</p>\n<p>Implement the `SnakeGame` class:\n`SnakeGame(int width, int height, int[][] food)` Initializes the object with a screen of size `height x width` and the positions of the `food`.</p>\n<p>`int move(String direction)` Returns the score of the game after applying one `direction` move by the snake. If the game is over, return `-1`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def design_snake_game(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= width, height <= 104",
      "1 <= food.length <= 50",
      "food[i].length == 2",
      "0 <= ri < height",
      "0 <= ci < width",
      "direction.length == 1",
      "direction is 'U', 'D', 'L', or 'R'.",
      "At most 104 calls will be made to move."
    ]
  },
  {
    "questionId": 355,
    "title": "Design Twitter",
    "titleSlug": "design-twitter",
    "content": "<p>Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the `10` most recent tweets in the user's news feed.</p>\n<p>Implement the `Twitter` class:\n`Twitter()` Initializes your twitter object.</p>\n<p>`void postTweet(int userId, int tweetId)` Composes a new tweet with ID `tweetId` by the user `userId`. Each call to this function will be made with a unique `tweetId`.</p>\n<p>`List<Integer> getNewsFeed(int userId)` Retrieves the `10` most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.</p>\n<p>`void follow(int followerId, int followeeId)` The user with ID `followerId` started following the user with ID `followeeId`.</p>\n<p>`void unfollow(int followerId, int followeeId)` The user with ID `followerId` started unfollowing the user with ID `followeeId`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def design_twitter(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= userId, followerId, followeeId <= 500",
      "0 <= tweetId <= 104",
      "All the tweets have unique IDs.",
      "At most 3 * 104 calls will be made to postTweet, getNewsFeed, follow, and unfollow."
    ]
  },
  {
    "questionId": 356,
    "title": "Line Reflection",
    "titleSlug": "line-reflection",
    "content": "<p>Given n points on a 2D plane, find if there is such a line parallel to y-axis that reflect the given points symmetrically, in other words, answer whether or not if there exists a line that after reflecting all points over the given line the set of the original points is the same that the reflected ones.</p>\n<p>Note that there can be repeated points.</p>\n<p>Follow up:\nCould you do better than O(n2) ?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def line_reflection(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "points = [[1,1],[-1,1]]",
        "output": "true",
        "explanation": "We can choose the line x = 0."
      },
      {
        "input": "points = [[1,1],[-1,-1]]",
        "output": "false",
        "explanation": "We can't choose a line."
      }
    ],
    "constraints": [
      "n == points.length",
      "1 <= n <= 10^4",
      "-10^8 <= points[i][j] <= 10^8"
    ]
  },
  {
    "questionId": 357,
    "title": "Count Numbers with Unique Digits",
    "titleSlug": "count-numbers-with-unique-digits",
    "content": "<p>Given an integer `n`, return the count of all numbers with unique digits, `x`, where `0 <= x < 10n`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_numbers_with_unique_digits(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 2",
        "output": "91",
        "explanation": "The answer should be the total numbers in the range of 0 \u2264 x < 100, excluding 11,22,33,44,55,66,77,88,99"
      },
      {
        "input": "n = 0",
        "output": "1"
      }
    ],
    "constraints": [
      "0 <= n <= 8"
    ]
  },
  {
    "questionId": 359,
    "title": "Logger Rate Limiter",
    "titleSlug": "logger-rate-limiter",
    "content": "<p>Design a logger system that receives a stream of messages along with their timestamps. Each unique message should only be printed at most every 10 seconds (i.e. a message printed at timestamp `t` will prevent other identical messages from being printed until timestamp `t + 10`).</p>\n<p>All messages will come in chronological order. Several messages may arrive at the same timestamp.</p>\n<p>Implement the `Logger` class:\n`Logger()` Initializes the `logger` object.</p>\n<p>`bool shouldPrintMessage(int timestamp, string message)` Returns `true` if the `message` should be printed in the given `timestamp`, otherwise returns `false`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def logger_rate_limiter(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "0 <= timestamp <= 109",
      "Every timestamp will be passed in non-decreasing order (chronological order).",
      "1 <= message.length <= 30",
      "At most 104 calls will be made to shouldPrintMessage."
    ]
  },
  {
    "questionId": 360,
    "title": "Sort Transformed Array",
    "titleSlug": "sort-transformed-array",
    "content": "<p>Given a sorted integer array `nums` and three integers `a`, `b` and `c`, apply a quadratic function of the form `f(x) = ax2 + bx + c` to each element `nums[i]` in the array, and return the array in a sorted order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sort_transformed_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [-4,-2,2,4], a = 1, b = 3, c = 5",
        "output": "[3,9,15,33]"
      },
      {
        "input": "nums = [-4,-2,2,4], a = -1, b = 3, c = 5",
        "output": "[-23,-5,1,7]"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 200",
      "-100 <= nums[i], a, b, c <= 100",
      "nums is sorted in ascending order.",
      "Follow up: Could you solve it in O(n) time?"
    ]
  },
  {
    "questionId": 361,
    "title": "Bomb Enemy",
    "titleSlug": "bomb-enemy",
    "content": "<p>Given an `m x n` matrix `grid` where each cell is either a wall `'W'`, an enemy `'E'` or empty `'0'`, return the maximum enemies you can kill using one bomb. You can only place the bomb in an empty cell.</p>\n<p>The bomb kills all the enemies in the same row and column from the planted point until it hits the wall since it is too strong to be destroyed.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def bomb_enemy(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "grid = [[\"0\",\"E\",\"0\",\"0\"],[\"E\",\"0\",\"W\",\"E\"],[\"0\",\"E\",\"0\",\"0\"]]",
        "output": "3"
      },
      {
        "input": "grid = [[\"W\",\"W\",\"W\"],[\"0\",\"0\",\"0\"],[\"E\",\"E\",\"E\"]]",
        "output": "1"
      }
    ],
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m, n <= 500",
      "grid[i][j] is either 'W', 'E', or '0'."
    ]
  },
  {
    "questionId": 362,
    "title": "Design Hit Counter",
    "titleSlug": "design-hit-counter",
    "content": "<p>Design a hit counter which counts the number of hits received in the past `5` minutes (i.e., the past `300` seconds).</p>\n<p>Your system should accept a `timestamp` parameter (in seconds granularity), and you may assume that calls are being made to the system in chronological order (i.e., `timestamp` is monotonically increasing). Several hits may arrive roughly at the same time.</p>\n<p>Implement the `HitCounter` class:\n`HitCounter()` Initializes the object of the hit counter system.</p>\n<p>`void hit(int timestamp)` Records a hit that happened at `timestamp` (in seconds). Several hits may happen at the same `timestamp`.</p>\n<p>`int getHits(int timestamp)` Returns the number of hits in the past 5 minutes from `timestamp` (i.e., the past `300` seconds).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def design_hit_counter(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= timestamp <= 2 * 109",
      "All the calls are being made to the system in chronological order (i.e., timestamp is monotonically increasing).",
      "At most 300 calls will be made to hit and getHits.",
      "Follow up: What if the number of hits per second could be huge? Does your design scale?"
    ]
  },
  {
    "questionId": 364,
    "title": "Nested List Weight Sum II",
    "titleSlug": "nested-list-weight-sum-ii",
    "content": "<p>You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists.</p>\n<p>The depth of an integer is the number of lists that it is inside of. For example, the nested list `[1,[2,2],[[3],2],1]` has each integer's value set to its depth. Let `maxDepth` be the maximum depth of any integer.</p>\n<p>The weight of an integer is `maxDepth - (the depth of the integer) + 1`.</p>\n<p>Return the sum of each integer in `nestedList` multiplied by its weight.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def nested_list_weight_sum_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nestedList = [[1,1],2,[1,1]]",
        "output": "8",
        "explanation": "Four 1's with a weight of 1, one 2 with a weight of 2."
      },
      {
        "input": "nestedList = [1,[4,[6]]]",
        "output": "17",
        "explanation": "One 1 at depth 3, one 4 at depth 2, and one 6 at depth 1."
      }
    ],
    "constraints": [
      "1 <= nestedList.length <= 50",
      "The values of the integers in the nested list is in the range [-100, 100].",
      "The maximum depth of any integer is less than or equal to 50."
    ]
  },
  {
    "questionId": 365,
    "title": "Water and Jug Problem",
    "titleSlug": "water-and-jug-problem",
    "content": "<p>You are given two jugs with capacities `jug1Capacity` and `jug2Capacity` liters. There is an infinite amount of water supply available. Determine whether it is possible to measure exactly `targetCapacity` liters using these two jugs.</p>\n<p>If `targetCapacity` liters of water are measurable, you must have `targetCapacity` liters of water contained within one or both buckets by the end.</p>\n<p>Operations allowed:\nFill any of the jugs with water.</p>\n<p>Empty any of the jugs.</p>\n<p>Pour water from one jug into another till the other jug is completely full, or the first jug itself is empty.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def water_and_jug_problem(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "jug1Capacity = 3, jug2Capacity = 5, targetCapacity = 4",
        "output": "true",
        "explanation": "The famous Die Hard example"
      },
      {
        "input": "jug1Capacity = 2, jug2Capacity = 6, targetCapacity = 5",
        "output": "false"
      },
      {
        "input": "jug1Capacity = 1, jug2Capacity = 2, targetCapacity = 3",
        "output": "true"
      }
    ],
    "constraints": [
      "1 <= jug1Capacity, jug2Capacity, targetCapacity <= 106"
    ]
  },
  {
    "questionId": 366,
    "title": "Find Leaves of Binary Tree",
    "titleSlug": "find-leaves-of-binary-tree",
    "content": "<p>Given the `root` of a binary tree, collect a tree's nodes as if you were doing this:\nCollect all the leaf nodes.</p>\n<p>Remove all the leaf nodes.</p>\n<p>Repeat until the tree is empty.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_leaves_of_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2,3,4,5]",
        "output": "[[4,5,3],[2],[1]]",
        "explanation": "[[3,5,4],[2],[1]] and [[3,4,5],[2],[1]] are also considered correct answers since per each level it does not matter the order on which elements are returned."
      },
      {
        "input": "root = [1]",
        "output": "[[1]]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 100].",
      "1 <= Node.val <= 100"
    ]
  },
  {
    "questionId": 367,
    "title": "Valid Perfect Square",
    "titleSlug": "valid-perfect-square",
    "content": "<p>Given a positive integer num, write a function which returns True if num is a perfect square else False.</p>\n<p>Follow up: Do not use any built-in library function such as `sqrt`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def valid_perfect_square(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "num = 16",
        "output": "true"
      },
      {
        "input": "num = 14",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= num <= 2^31 - 1"
    ]
  },
  {
    "questionId": 368,
    "title": "Largest Divisible Subset",
    "titleSlug": "largest-divisible-subset",
    "content": "<p>Given a set of distinct positive integers `nums`, return the largest subset `answer` such that every pair `(answer[i], answer[j])` of elements in this subset satisfies:\n`answer[i] % answer[j] == 0`, or\n`answer[j] % answer[i] == 0`\nIf there are multiple solutions, return any of them.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def largest_divisible_subset(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3]",
        "output": "[1,2]",
        "explanation": "[1,3] is also accepted."
      },
      {
        "input": "nums = [1,2,4,8]",
        "output": "[1,2,4,8]"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 1000",
      "1 <= nums[i] <= 2 * 109",
      "All the integers in nums are unique."
    ]
  },
  {
    "questionId": 369,
    "title": "Plus One Linked List",
    "titleSlug": "plus-one-linked-list",
    "content": "<p>Given a non-negative integer represented as a linked list of digits, plus one to the integer.</p>\n<p>The digits are stored such that the most significant digit is at the `head` of the list.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def plus_one_linked_list(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [1,2,3]",
        "output": "[1,2,4]"
      },
      {
        "input": "head = [0]",
        "output": "[1]"
      }
    ],
    "constraints": [
      "The number of nodes in the linked list is in the range [1, 100].",
      "0 <= Node.val <= 9",
      "The number represented by the linked list does not contain leading zeros except for the zero itself."
    ]
  },
  {
    "questionId": 370,
    "title": "Range Addition",
    "titleSlug": "range-addition",
    "content": "<p>You are given an integer `length` and an array `updates` where `updates[i] = [startIdxi, endIdxi, inci]`.</p>\n<p>You have an array `arr` of length `length` with all zeros, and you have some operation to apply on `arr`. In the `ith` operation, you should increment all the elements `arr[startIdxi], arr[startIdxi + 1], ..., arr[endIdxi]` by `inci`.</p>\n<p>Return `arr` after applying all the `updates`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def range_addition(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "length = 5, updates = [[1,3,2],[2,4,3],[0,2,-2]]",
        "output": "[-2,0,3,5,3]"
      },
      {
        "input": "length = 10, updates = [[2,4,6],[5,6,8],[1,9,-4]]",
        "output": "[0,-4,2,2,2,4,4,-4,-4,-4]"
      }
    ],
    "constraints": [
      "1 <= length <= 105",
      "0 <= updates.length <= 104",
      "0 <= startIdxi <= endIdxi < length",
      "-1000 <= inci <= 1000"
    ]
  },
  {
    "questionId": 371,
    "title": "Sum of Two Integers",
    "titleSlug": "sum-of-two-integers",
    "content": "<p>Given two integers `a` and `b`, return the sum of the two integers without using the operators `+` and `-`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sum_of_two_integers(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "a = 1, b = 2",
        "output": "3"
      },
      {
        "input": "a = 2, b = 3",
        "output": "5"
      }
    ],
    "constraints": [
      "-1000 <= a, b <= 1000"
    ]
  },
  {
    "questionId": 372,
    "title": "Super Pow",
    "titleSlug": "super-pow",
    "content": "<p>Your task is to calculate `ab` mod `1337` where `a` is a positive integer and `b` is an extremely large positive integer given in the form of an array.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def super_pow(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "a = 2, b = [3]",
        "output": "8"
      },
      {
        "input": "a = 2, b = [1,0]",
        "output": "1024"
      },
      {
        "input": "a = 1, b = [4,3,3,8,5,2]",
        "output": "1"
      },
      {
        "input": "a = 2147483647, b = [2,0,0]",
        "output": "1198"
      }
    ],
    "constraints": [
      "1 <= a <= 231 - 1",
      "1 <= b.length <= 2000",
      "0 <= b[i] <= 9",
      "b doesn't contain leading zeros."
    ]
  },
  {
    "questionId": 373,
    "title": "Find K Pairs with Smallest Sums",
    "titleSlug": "find-k-pairs-with-smallest-sums",
    "content": "<p>You are given two integer arrays `nums1` and `nums2` sorted in ascending order and an integer `k`.</p>\n<p>Define a pair `(u, v)` which consists of one element from the first array and one element from the second array.</p>\n<p>Return the `k` pairs `(u1, v1), (u2, v2), ..., (uk, vk)` with the smallest sums.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_k_pairs_with_smallest_sums(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums1 = [1,7,11], nums2 = [2,4,6], k = 3",
        "output": "[[1,2],[1,4],[1,6]]",
        "explanation": "The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]"
      },
      {
        "input": "nums1 = [1,1,2], nums2 = [1,2,3], k = 2",
        "output": "[[1,1],[1,1]]",
        "explanation": "The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]"
      },
      {
        "input": "nums1 = [1,2], nums2 = [3], k = 3",
        "output": "[[1,3],[2,3]]",
        "explanation": "All possible pairs are returned from the sequence: [1,3],[2,3]"
      }
    ],
    "constraints": [
      "1 <= nums1.length, nums2.length <= 104",
      "-109 <= nums1[i], nums2[i] <= 109",
      "nums1 and nums2 both are sorted in ascending order.",
      "1 <= k <= 1000"
    ]
  },
  {
    "questionId": 374,
    "title": "Guess Number Higher or Lower",
    "titleSlug": "guess-number-higher-or-lower",
    "content": "<p>We are playing the Guess Game. The game is as follows:\nI pick a number from `1` to `n`. You have to guess which number I picked.</p>\n<p>Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.</p>\n<p>You call a pre-defined API `int guess(int num)`, which returns 3 possible results:\n`-1`: The number I picked is lower than your guess (i.e. `pick < num`).</p>\n<p>`1`: The number I picked is higher than your guess (i.e. `pick > num`).</p>\n<p>`0`: The number I picked is equal to your guess (i.e. `pick == num`).</p>\n<p>Return the number that I picked.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def guess_number_higher_or_lower(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 10, pick = 6",
        "output": "6"
      },
      {
        "input": "n = 1, pick = 1",
        "output": "1"
      },
      {
        "input": "n = 2, pick = 1",
        "output": "1"
      },
      {
        "input": "n = 2, pick = 2",
        "output": "2"
      }
    ],
    "constraints": [
      "1 <= n <= 231 - 1",
      "1 <= pick <= n"
    ]
  },
  {
    "questionId": 375,
    "title": "Guess Number Higher or Lower II",
    "titleSlug": "guess-number-higher-or-lower-ii",
    "content": "<p>We are playing the Guessing Game. The game will work as follows:\nI pick a number between `1` and `n`.</p>\n<p>You guess a number.</p>\n<p>If you guess the right number, you win the game.</p>\n<p>If you guess the wrong number, then I will tell you whether the number I picked is higher or lower, and you will continue guessing.</p>\n<p>Every time you guess a wrong number `x`, you will pay `x` dollars. If you run out of money, you lose the game.</p>\n<p>Given a particular `n`, return the minimum amount of money you need to guarantee a win regardless of what number I pick.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def guess_number_higher_or_lower_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 10",
        "output": "16",
        "explanation": "The winning strategy is as follows:"
      },
      {
        "input": "n = 1",
        "output": "0",
        "explanation": "There is only one possible number, so you can guess 1 and not have to pay anything."
      },
      {
        "input": "n = 2",
        "output": "1",
        "explanation": "There are two possible numbers, 1 and 2."
      }
    ],
    "constraints": [
      "1 <= n <= 200"
    ]
  },
  {
    "questionId": 376,
    "title": "Wiggle Subsequence",
    "titleSlug": "wiggle-subsequence",
    "content": "<p>A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with two or fewer elements is trivially a wiggle sequence.</p>\n<p>For example, `[1, 7, 4, 9, 2, 5]` is a wiggle sequence because the differences `(6, -3, 5, -7, 3)` alternate between positive and negative.</p>\n<p>In contrast, `[1, 4, 7, 2, 5]` and `[1, 7, 4, 5, 5]` are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.</p>\n<p>A subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.</p>\n<p>Given an integer array `nums`, return the length of the longest wiggle subsequence of `nums`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def wiggle_subsequence(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,7,4,9,2,5]",
        "output": "6",
        "explanation": "The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3)."
      },
      {
        "input": "nums = [1,17,5,10,13,15,10,5,16,8]",
        "output": "7",
        "explanation": "There are several subsequences that achieve this length."
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9]",
        "output": "2"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 1000",
      "0 <= nums[i] <= 1000",
      "Follow up: Could you solve this in O(n) time?"
    ]
  },
  {
    "questionId": 377,
    "title": "Combination Sum IV",
    "titleSlug": "combination-sum-iv",
    "content": "<p>Given an array of distinct integers `nums` and a target integer `target`, return the number of possible combinations that add up to `target`.</p>\n<p>The answer is guaranteed to fit in a 32-bit integer.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def combination_sum_iv(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3], target = 4",
        "output": "7",
        "explanation": "The possible combination ways are:"
      },
      {
        "input": "nums = [9], target = 3",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 200",
      "1 <= nums[i] <= 1000",
      "All the elements of nums are unique.",
      "1 <= target <= 1000",
      "Follow up: What if negative numbers are allowed in the given array? How does it change the problem? What limitation we need to add to the question to allow negative numbers?"
    ]
  },
  {
    "questionId": 378,
    "title": "Kth Smallest Element in a Sorted Matrix",
    "titleSlug": "kth-smallest-element-in-a-sorted-matrix",
    "content": "<p>Given an `n x n` `matrix` where each of the rows and columns are sorted in ascending order, return the `kth` smallest element in the matrix.</p>\n<p>Note that it is the `kth` smallest element in the sorted order, not the `kth` distinct element.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def kth_smallest_element_in_a_sorted_matrix(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8",
        "output": "13",
        "explanation": "The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13"
      },
      {
        "input": "matrix = [[-5]], k = 1",
        "output": "-5"
      }
    ],
    "constraints": [
      "n == matrix.length",
      "n == matrix[i].length",
      "1 <= n <= 300",
      "-109 <= matrix[i][j] <= 109",
      "All the rows and columns of matrix are guaranteed to be sorted in non-degreasing order.",
      "1 <= k <= n2"
    ]
  },
  {
    "questionId": 379,
    "title": "Design Phone Directory",
    "titleSlug": "design-phone-directory",
    "content": "<p>Design a phone directory that initially has `maxNumbers` empty slots that can store numbers. The directory should store numbers, check if a certain slot is empty or not, and empty a given slot.</p>\n<p>Implement the `PhoneDirectory` class:\n`PhoneDirectory(int maxNumbers)` Initializes the phone directory with the number of available slots `maxNumbers`.</p>\n<p>`int get()` Provides a number that is not assigned to anyone. Returns `-1` if no number is available.</p>\n<p>`bool check(int number)` Returns `true` if the slot `number` is available and `false` otherwise.</p>\n<p>`void release(int number)` Recycles or releases the slot `number`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def design_phone_directory(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= maxNumbers <= 104",
      "0 <= number < maxNumbers",
      "At most 2 * 104 calls will be made to get, check, and release."
    ]
  },
  {
    "questionId": 380,
    "title": "Insert Delete GetRandom O(1)",
    "titleSlug": "insert-delete-getrandom-o1",
    "content": "<p>Implement the `RandomizedSet` class:\n`RandomizedSet()` Initializes the `RandomizedSet` object.</p>\n<p>`bool insert(int val)` Inserts an item `val` into the set if not present. Returns `true` if the item was not present, `false` otherwise.</p>\n<p>`bool remove(int val)` Removes an item `val` from the set if present. Returns `true` if the item was present, `false` otherwise.</p>\n<p>`int getRandom()` Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def insert_delete_getrandom_o1(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "-231 <= val <= 231 - 1",
      "At most 105 calls will be made to insert, remove, and getRandom.",
      "There will be at least one element in the data structure when getRandom is called.",
      "Follow up: Could you implement the functions of the class with each function works in average O(1) time?"
    ]
  },
  {
    "questionId": 382,
    "title": "Linked List Random Node",
    "titleSlug": "linked-list-random-node",
    "content": "<p>Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def linked_list_random_node(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "The number of nodes in the linked list will be in the range [1, 104].",
      "-104 <= Node.val <= 104",
      "At most 104 calls will be made to getRandom.",
      "Follow up:",
      "What if the linked list is extremely large and its length is unknown to you?",
      "Could you solve this efficiently without using extra space?"
    ]
  },
  {
    "questionId": 383,
    "title": "Ransom Note",
    "titleSlug": "ransom-note",
    "content": "<p>Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.</p>\n<p>Each letter in the magazine string can only be used once in your ransom note.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def ransom_note(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "ransomNote = \"a\", magazine = \"b\"",
        "output": "false"
      },
      {
        "input": "ransomNote = \"aa\", magazine = \"ab\"",
        "output": "false"
      },
      {
        "input": "ransomNote = \"aa\", magazine = \"aab\"",
        "output": "true"
      }
    ],
    "constraints": [
      "You may assume that both strings contain only lowercase letters."
    ]
  },
  {
    "questionId": 384,
    "title": "Shuffle an Array",
    "titleSlug": "shuffle-an-array",
    "content": "<p>Given an integer array `nums`, design an algorithm to randomly shuffle the array.</p>\n<p>Implement the `Solution` class:\n`Solution(int[] nums)` Initializes the object with the integer array nums.</p>\n<p>`int[] reset()` Resets the array to its original configuration and returns it.</p>\n<p>`int[] shuffle()` Returns a random shuffling of the array.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def shuffle_an_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= nums.length <= 200",
      "-106 <= nums[i] <= 106",
      "All the elements of nums are unique.",
      "At most 5 * 104 calls will be made to reset and shuffle."
    ]
  },
  {
    "questionId": 385,
    "title": "Mini Parser",
    "titleSlug": "mini-parser",
    "content": "<p>Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return the deserialized `NestedInteger`.</p>\n<p>Each element is either an integer or a list whose elements may also be integers or other lists.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def mini_parser(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"324\"",
        "output": "324",
        "explanation": "You should return a NestedInteger object which contains a single integer 324."
      },
      {
        "input": "s = \"[123,[456,[789]]]\"",
        "output": "[123,[456,[789]]]",
        "explanation": "Return a NestedInteger object containing a nested list with 2 elements:"
      }
    ],
    "constraints": [
      "1 <= s.length <= 5 * 104",
      "s consists of digits, square brackets \"[]\", negative sign '-', and commas ','.",
      "s is the serialization of valid NestedInteger."
    ]
  },
  {
    "questionId": 386,
    "title": "Lexicographical Numbers",
    "titleSlug": "lexicographical-numbers",
    "content": "<p>Given an integer `n`, return all the numbers in the range `[1, n]` sorted in lexicographical order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def lexicographical_numbers(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 13",
        "output": "[1,10,11,12,13,2,3,4,5,6,7,8,9]"
      },
      {
        "input": "n = 2",
        "output": "[1,2]"
      }
    ],
    "constraints": [
      "1 <= n <= 5 * 104",
      "Follow up: Could you optimize your solution to use O(n) runtime and O(1) space?"
    ]
  },
  {
    "questionId": 387,
    "title": "First Unique Character in a String",
    "titleSlug": "first-unique-character-in-a-string",
    "content": "<p>Given a string `s`, return the first non-repeating character in it and return its index. If it does not exist, return `-1`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def first_unique_character_in_a_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"leetcode\"",
        "output": "0"
      },
      {
        "input": "s = \"loveleetcode\"",
        "output": "2"
      },
      {
        "input": "s = \"aabb\"",
        "output": "-1"
      }
    ],
    "constraints": [
      "1 <= s.length <= 105",
      "s consists of only lowercase English letters."
    ]
  },
  {
    "questionId": 388,
    "title": "Longest Absolute File Path",
    "titleSlug": "longest-absolute-file-path",
    "content": "<p>Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture:\nHere, we have `dir` as the only directory in the root. `dir` contains two subdirectories, `subdir1` and `subdir2`. `subdir1` contains a file `file1.ext` and subdirectory `subsubdir1`. `subdir2` contains a subdirectory `subsubdir2`, which contains a file `file2.ext`.</p>\n<p>In text form, it looks like this (with \u27f6 representing the tab character):\ndir\n\u27f6 subdir1\n\u27f6 \u27f6 file1.ext\n\u27f6 \u27f6 subsubdir1\n\u27f6 subdir2\n\u27f6 \u27f6 subsubdir2\n\u27f6 \u27f6 \u27f6 file2.ext\nIf we were to write this representation in code, it will look like this: `\"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"`. Note that the `'\\n'` and `'\\t'` are the new-line and tab characters.</p>\n<p>Every file and directory has a unique absolute path in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by `'/'s`. Using the above example, the absolute path to `file2.ext` is `\"dir/subdir2/subsubdir2/file2.ext\"`. Each directory name consists of letters, digits, and/or spaces. Each file name is of the form `name.extension`, where `name` and `extension` consist of letters, digits, and/or spaces.</p>\n<p>Given a string `input` representing the file system in the explained format, return the length of the longest absolute path to a file in the abstracted file system. If there is no file in the system, return `0`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_absolute_file_path(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "input = \"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"",
        "output": "20",
        "explanation": "We have only one file, and the absolute path is \"dir/subdir2/file.ext\" of length 20."
      },
      {
        "input": "input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"",
        "output": "32",
        "explanation": "We have two files:"
      },
      {
        "input": "input = \"a\"",
        "output": "0",
        "explanation": "We do not have any files, just a single directory named \"a\"."
      },
      {
        "input": "input = \"file1.txt\\nfile2.txt\\nlongfile.txt\"",
        "output": "12",
        "explanation": "There are 3 files at the root directory."
      }
    ],
    "constraints": [
      "1 <= input.length <= 104",
      "input may contain lowercase or uppercase English letters, a new line character '\\n', a tab character '\\t', a dot '.', a space ' ', and digits."
    ]
  },
  {
    "questionId": 389,
    "title": "Find the Difference",
    "titleSlug": "find-the-difference",
    "content": "<p>You are given two strings `s` and `t`.</p>\n<p>String `t` is generated by random shuffling string `s` and then add one more letter at a random position.</p>\n<p>Return the letter that was added to `t`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_the_difference(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"abcd\", t = \"abcde\"",
        "output": "\"e\"",
        "explanation": "'e' is the letter that was added."
      },
      {
        "input": "s = \"\", t = \"y\"",
        "output": "\"y\""
      },
      {
        "input": "s = \"a\", t = \"aa\"",
        "output": "\"a\""
      },
      {
        "input": "s = \"ae\", t = \"aea\"",
        "output": "\"a\""
      }
    ],
    "constraints": [
      "0 <= s.length <= 1000",
      "t.length == s.length + 1",
      "s and t consist of lower-case English letters."
    ]
  },
  {
    "questionId": 390,
    "title": "Elimination Game",
    "titleSlug": "elimination-game",
    "content": "<p>You have a list `arr` of all integers in the range `[1, n]` sorted in a strictly increasing order. Apply the following algorithm on `arr`:\nStarting from left to right, remove the first number and every other number afterward until you reach the end of the list.</p>\n<p>Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers.</p>\n<p>Keep repeating the steps again, alternating left to right and right to left, until a single number remains.</p>\n<p>Given the integer `n`, return the last number that remains in `arr`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def elimination_game(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 9",
        "output": "6",
        "explanation": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "n = 1",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= n <= 109"
    ]
  },
  {
    "questionId": 392,
    "title": "Is Subsequence",
    "titleSlug": "is-subsequence",
    "content": "<p>Given two strings `s` and `t`, check if `s` is a subsequence of `t`.</p>\n<p>A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., `\"ace\"` is a subsequence of `\"abcde\"` while `\"aec\"` is not).</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def is_subsequence(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"abc\", t = \"ahbgdc\"",
        "output": "true"
      },
      {
        "input": "s = \"axc\", t = \"ahbgdc\"",
        "output": "false"
      }
    ],
    "constraints": [
      "0 <= s.length <= 100",
      "0 <= t.length <= 104",
      "s and t consist only of lowercase English letters.",
      "Follow up: If there are lots of incoming s, say s1, s2, ..., sk where k >= 109, and you want to check one by one to see if t has its subsequence. In this scenario, how would you change your code?"
    ]
  },
  {
    "questionId": 393,
    "title": "UTF-8 Validation",
    "titleSlug": "utf-8-validation",
    "content": "<p>Given an integer array `data` representing the data, return whether it is a valid UTF-8 encoding.</p>\n<p>A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:\nFor a 1-byte character, the first bit is a `0`, followed by its Unicode code.</p>\n<p>For an n-bytes character, the first `n` bits are all one's, the `n + 1` bit is `0`, followed by `n - 1` bytes with the most significant `2` bits being `10`.</p>\n<p>This is how the UTF-8 encoding would work:\n`   Char. number range  |        UTF-8 octet sequence\n      (hexadecimal)    |              (binary)\n   --------------------+---------------------------------------------\n   0000 0000-0000 007F | 0xxxxxxx\n   0000 0080-0000 07FF | 110xxxxx 10xxxxxx\n   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\n   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx`\nNote: The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def utf_8_validation(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "data = [197,130,1]",
        "output": "true",
        "explanation": "data represents the octet sequence: 11000101 10000010 00000001."
      },
      {
        "input": "data = [235,140,4]",
        "output": "false",
        "explanation": "data represented the octet sequence: 11101011 10001100 00000100."
      }
    ],
    "constraints": [
      "1 <= data.length <= 2 * 104",
      "0 <= data[i] <= 255"
    ]
  },
  {
    "questionId": 394,
    "title": "Decode String",
    "titleSlug": "decode-string",
    "content": "<p>Given an encoded string, return its decoded string.</p>\n<p>The encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is being repeated exactly `k` times. Note that `k` is guaranteed to be a positive integer.</p>\n<p>You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.</p>\n<p>Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, `k`. For example, there won't be input like `3a` or `2[4]`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def decode_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"3[a]2[bc]\"",
        "output": "\"aaabcbc\""
      },
      {
        "input": "s = \"3[a2[c]]\"",
        "output": "\"accaccacc\""
      },
      {
        "input": "s = \"2[abc]3[cd]ef\"",
        "output": "\"abcabccdcdcdef\""
      },
      {
        "input": "s = \"abc3[cd]xyz\"",
        "output": "\"abccdcdcdxyz\""
      }
    ],
    "constraints": [
      "1 <= s.length <= 30",
      "s consists of lowercase English letters, digits, and square brackets '[]'.",
      "s is guaranteed to be a valid input.",
      "All the integers in s are in the range [1, 300]."
    ]
  },
  {
    "questionId": 395,
    "title": "Longest Substring with At Least K Repeating Characters",
    "titleSlug": "longest-substring-with-at-least-k-repeating-characters",
    "content": "<p>Given a string `s` and an integer `k`, return the length of the longest substring of `s` such that the frequency of each character in this substring is greater than or equal to `k`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_substring_with_at_least_k_repeating_characters(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"aaabb\", k = 3",
        "output": "3",
        "explanation": "The longest substring is \"aaa\", as 'a' is repeated 3 times."
      },
      {
        "input": "s = \"ababbc\", k = 2",
        "output": "5",
        "explanation": "The longest substring is \"ababb\", as 'a' is repeated 2 times and 'b' is repeated 3 times."
      }
    ],
    "constraints": [
      "1 <= s.length <= 104",
      "s consists of only lowercase English letters.",
      "1 <= k <= 105"
    ]
  },
  {
    "questionId": 396,
    "title": "Rotate Function",
    "titleSlug": "rotate-function",
    "content": "<p>You are given an integer array `nums` of length `n`.</p>\n<p>Assume `arrk` to be an array obtained by rotating `nums` by `k` positions clock-wise. We define the rotation function `F` on `nums` as follow:\n`F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1].`\nReturn the maximum value of `F(0), F(1), ..., F(n-1)`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def rotate_function(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [4,3,2,6]",
        "output": "26",
        "explanation": "F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25"
      },
      {
        "input": "nums = [1000000007]",
        "output": "0"
      }
    ],
    "constraints": [
      "n == nums.length",
      "1 <= n <= 105",
      "-231 <= nums[i] <= 231 - 1"
    ]
  },
  {
    "questionId": 397,
    "title": "Integer Replacement",
    "titleSlug": "integer-replacement",
    "content": "<p>Given a positive integer `n`, you can apply one of the following operations:\nIf `n` is even, replace `n` with `n / 2`.</p>\n<p>If `n` is odd, replace `n` with either `n + 1` or `n - 1`.</p>\n<p>Return the minimum number of operations needed for `n` to become `1`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def integer_replacement(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 8",
        "output": "3",
        "explanation": "8 -> 4 -> 2 -> 1"
      },
      {
        "input": "n = 7",
        "output": "4",
        "explanation": "7 -> 8 -> 4 -> 2 -> 1"
      },
      {
        "input": "n = 4",
        "output": "2"
      }
    ],
    "constraints": [
      "1 <= n <= 231 - 1"
    ]
  },
  {
    "questionId": 398,
    "title": "Random Pick Index",
    "titleSlug": "random-pick-index",
    "content": "<p>Given an integer array `nums` with possible duplicates, randomly output the index of a given `target` number. You can assume that the given target number must exist in the array.</p>\n<p>Implement the `Solution` class:\n`Solution(int[] nums)` Initializes the object with the array `nums`.</p>\n<p>`int pick(int target)` Picks a random index `i` from `nums` where `nums[i] == target`. If there are multiple valid i's, then each index should have an equal probability of returning.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def random_pick_index(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= nums.length <= 2 * 104",
      "-231 <= nums[i] <= 231 - 1",
      "target is an integer from nums.",
      "At most 104 calls will be made to pick."
    ]
  },
  {
    "questionId": 399,
    "title": "Evaluate Division",
    "titleSlug": "evaluate-division",
    "content": "<p>You are given an array of variable pairs `equations` and an array of real numbers `values`, where `equations[i] = [Ai, Bi]` and `values[i]` represent the equation `Ai / Bi = values[i]`. Each `Ai` or `Bi` is a string that represents a single variable.</p>\n<p>You are also given some `queries`, where `queries[j] = [Cj, Dj]` represents the `jth` query where you must find the answer for `Cj / Dj = ?`.</p>\n<p>Return the answers to all queries. If a single answer cannot be determined, return `-1.0`.</p>\n<p>Note: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def evaluate_division(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "equations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2.0,3.0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]",
        "output": "[6.00000,0.50000,-1.00000,1.00000,-1.00000]",
        "explanation": "Given: a / b = 2.0, b / c = 3.0"
      },
      {
        "input": "equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]], values = [1.5,2.5,5.0], queries = [[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]",
        "output": "[3.75000,0.40000,5.00000,0.20000]"
      },
      {
        "input": "equations = [[\"a\",\"b\"]], values = [0.5], queries = [[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]",
        "output": "[0.50000,2.00000,-1.00000,-1.00000]"
      }
    ],
    "constraints": [
      "1 <= equations.length <= 20",
      "equations[i].length == 2",
      "1 <= Ai.length, Bi.length <= 5",
      "values.length == equations.length",
      "0.0 < values[i] <= 20.0",
      "1 <= queries.length <= 20",
      "queries[i].length == 2",
      "1 <= Cj.length, Dj.length <= 5",
      "Ai, Bi, Cj, Dj consist of lower case English letters and digits."
    ]
  },
  {
    "questionId": 400,
    "title": "Nth Digit",
    "titleSlug": "nth-digit",
    "content": "<p>Given an integer `n`, return the `nth` digit of the infinite integer sequence `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...]`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def nth_digit(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 3",
        "output": "3"
      },
      {
        "input": "n = 11",
        "output": "0",
        "explanation": "The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10."
      }
    ],
    "constraints": [
      "1 <= n <= 231 - 1"
    ]
  },
  {
    "questionId": 406,
    "title": "Queue Reconstruction by Height",
    "titleSlug": "queue-reconstruction-by-height",
    "content": "<p>You are given an array of people, `people`, which are the attributes of some people in a queue (not necessarily in order). Each `people[i] = [hi, ki]` represents the `ith` person of height `hi` with exactly `ki` other people in front who have a height greater than or equal to `hi`.</p>\n<p>Reconstruct and return the queue that is represented by the input array `people`. The returned queue should be formatted as an array `queue`, where `queue[j] = [hj, kj]` is the attributes of the `jth` person in the queue (`queue[0]` is the person at the front of the queue).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def queue_reconstruction_by_height(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]",
        "output": "[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]",
        "explanation": "Person 0 has height 5 with no other people taller or the same height in front."
      },
      {
        "input": "people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]",
        "output": "[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]"
      }
    ],
    "constraints": [
      "1 <= people.length <= 2000",
      "0 <= hi <= 106",
      "0 <= ki < people.length",
      "It is guaranteed that the queue can be reconstructed."
    ]
  },
  {
    "questionId": 409,
    "title": "Longest Palindrome",
    "titleSlug": "longest-palindrome",
    "content": "<p>Given a string `s` which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.</p>\n<p>Letters are case sensitive, for example, `\"Aa\"` is not considered a palindrome here.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_palindrome(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"abccccdd\"",
        "output": "7",
        "explanation": "One longest palindrome that can be built is \"dccaccd\", whose length is 7."
      },
      {
        "input": "s = \"a\"",
        "output": "1"
      },
      {
        "input": "s = \"bb\"",
        "output": "2"
      }
    ],
    "constraints": [
      "1 <= s.length <= 2000",
      "s consists of lowercase and/or uppercase English letters only."
    ]
  },
  {
    "questionId": 413,
    "title": "Arithmetic Slices",
    "titleSlug": "arithmetic-slices",
    "content": "<p>An integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.</p>\n<p>For example, `[1,3,5,7,9]`, `[7,7,7,7]`, and `[3,-1,-5,-9]` are arithmetic sequences.</p>\n<p>Given an integer array `nums`, return the number of arithmetic subarrays of `nums`.</p>\n<p>A subarray is a contiguous subsequence of the array.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def arithmetic_slices(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3,4]",
        "output": "3",
        "explanation": "We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself."
      },
      {
        "input": "nums = [1]",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 5000",
      "-1000 <= nums[i] <= 1000"
    ]
  },
  {
    "questionId": 414,
    "title": "Third Maximum Number",
    "titleSlug": "third-maximum-number",
    "content": "<p>Given integer array `nums`, return the third maximum number in this array. If the third maximum does not exist, return the maximum number.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def third_maximum_number(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [3,2,1]",
        "output": "1",
        "explanation": "The third maximum is 1."
      },
      {
        "input": "nums = [1,2]",
        "output": "2",
        "explanation": "The third maximum does not exist, so the maximum (2) is returned instead."
      },
      {
        "input": "nums = [2,2,3,1]",
        "output": "1",
        "explanation": "Note that the third maximum here means the third maximum distinct number."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 104",
      "-231 <= nums[i] <= 231 - 1",
      "Follow up: Can you find an O(n) solution?"
    ]
  },
  {
    "questionId": 415,
    "title": "Add Strings",
    "titleSlug": "add-strings",
    "content": "<p>Given two non-negative integers, `num1` and `num2` represented as string, return the sum of `num1` and `num2` as a string.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def add_strings(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "num1 = \"11\", num2 = \"123\"",
        "output": "\"134\""
      },
      {
        "input": "num1 = \"456\", num2 = \"77\"",
        "output": "\"533\""
      },
      {
        "input": "num1 = \"0\", num2 = \"0\"",
        "output": "\"0\""
      }
    ],
    "constraints": [
      "1 <= num1.length, num2.length <= 104",
      "num1 and num2 consist of only digits.",
      "num1 and num2 don't have any leading zeros except for the zero itself.",
      "Follow up: Could you solve it without using any built-in BigInteger library or converting the inputs to integer directly?"
    ]
  },
  {
    "questionId": 416,
    "title": "Partition Equal Subset Sum",
    "titleSlug": "partition-equal-subset-sum",
    "content": "<p>Given a non-empty array `nums` containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def partition_equal_subset_sum(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,5,11,5]",
        "output": "true",
        "explanation": "The array can be partitioned as [1, 5, 5] and [11]."
      },
      {
        "input": "nums = [1,2,3,5]",
        "output": "false",
        "explanation": "The array cannot be partitioned into equal sum subsets."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 200",
      "1 <= nums[i] <= 100"
    ]
  },
  {
    "questionId": 417,
    "title": "Pacific Atlantic Water Flow",
    "titleSlug": "pacific-atlantic-water-flow",
    "content": "<p>You are given an `m x n` integer matrix `heights` representing the height of each unit cell in a continent. The Pacific ocean touches the continent's left and top edges, and the Atlantic ocean touches the continent's right and bottom edges.</p>\n<p>Water can only flow in four directions: up, down, left, and right. Water flows from a cell to an adjacent one with an equal or lower height.</p>\n<p>Return a list of grid coordinates where water can flow to both the Pacific and Atlantic oceans.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def pacific_atlantic_water_flow(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]",
        "output": "[[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]"
      },
      {
        "input": "heights = [[2,1],[1,2]]",
        "output": "[[0,0],[0,1],[1,0],[1,1]]"
      }
    ],
    "constraints": [
      "m == heights.length",
      "n == heights[i].length",
      "1 <= m, n <= 200",
      "1 <= heights[i][j] <= 105"
    ]
  },
  {
    "questionId": 421,
    "title": "Maximum XOR of Two Numbers in an Array",
    "titleSlug": "maximum-xor-of-two-numbers-in-an-array",
    "content": "<p>Given an integer array `nums`, return the maximum result of `nums[i] XOR nums[j]`, where `0 \u2264 i \u2264 j < n`.</p>\n<p>Follow up: Could you do this in `O(n)` runtime?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_xor_of_two_numbers_in_an_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [3,10,5,25,2,8]",
        "output": "28",
        "explanation": "The maximum result is 5 XOR 25 = 28."
      },
      {
        "input": "nums = [0]",
        "output": "0"
      },
      {
        "input": "nums = [2,4]",
        "output": "6"
      },
      {
        "input": "nums = [8,10,2]",
        "output": "10"
      },
      {
        "input": "nums = [14,70,53,83,49,91,36,80,92,51,66,70]",
        "output": "127"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 2 * 104",
      "0 <= nums[i] <= 231 - 1"
    ]
  },
  {
    "questionId": 423,
    "title": "Reconstruct Original Digits from English",
    "titleSlug": "reconstruct-original-digits-from-english",
    "content": "<p>Given a string `s` containing an out-of-order English representation of digits `0-9`, return the digits in ascending order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def reconstruct_original_digits_from_english(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"owoztneoer\"",
        "output": "\"012\""
      },
      {
        "input": "s = \"fviefuro\"",
        "output": "\"45\""
      }
    ],
    "constraints": [
      "1 <= s.length <= 105",
      "s[i] is one of the characters [\"e\",\"g\",\"f\",\"i\",\"h\",\"o\",\"n\",\"s\",\"r\",\"u\",\"t\",\"w\",\"v\",\"x\",\"z\"].",
      "s is guaranteed to be valid."
    ]
  },
  {
    "questionId": 426,
    "title": "Convert Binary Search Tree to Sorted Doubly Linked List",
    "titleSlug": "convert-binary-search-tree-to-sorted-doubly-linked-list",
    "content": "<p>Convert a Binary Search Tree to a sorted Circular Doubly-Linked List in place.</p>\n<p>You can think of the left and right pointers as synonymous to the predecessor and successor pointers in a doubly-linked list. For a circular doubly linked list, the predecessor of the first element is the last element, and the successor of the last element is the first element.</p>\n<p>We want to do the transformation in place. After the transformation, the left pointer of the tree node should point to its predecessor, and the right pointer should point to its successor. You should return the pointer to the smallest element of the linked list.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def convert_binary_search_tree_to_sorted_doubly_linked_list(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [4,2,5,1,3]",
        "output": "[1,2,3,4,5]",
        "explanation": "The figure below shows the transformed BST. The solid line indicates the successor relationship, while the dashed line means the predecessor relationship."
      },
      {
        "input": "root = [2,1,3]",
        "output": "[1,2,3]"
      },
      {
        "input": "root = []",
        "output": "[]",
        "explanation": "Input is an empty tree. Output is also an empty Linked List."
      },
      {
        "input": "root = [1]",
        "output": "[1]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 2000].",
      "-1000 <= Node.val <= 1000",
      "All the values of the tree are unique."
    ]
  },
  {
    "questionId": 427,
    "title": "Construct Quad Tree",
    "titleSlug": "construct-quad-tree",
    "content": "<p>Given a `n * n` matrix `grid` of `0's` and `1's` only. We want to represent the `grid` with a Quad-Tree.</p>\n<p>Return the root of the Quad-Tree representing the `grid`.</p>\n<p>Notice that you can assign the value of a node to True or False when `isLeaf` is False, and both are accepted in the answer.</p>\n<p>A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\n`val`: True if the node represents a grid of 1's or False if the node represents a grid of 0's. \n`isLeaf`: True if the node is leaf node on the tree or False if the node has the four children.</p>\n<p>class Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n}\nWe can construct a Quad-Tree from a two-dimensional area using the following steps:\nIf the current grid has the same value (i.e all `1's` or all `0's`) set `isLeaf` True and set `val` to the value of the grid and set the four children to Null and stop.</p>\n<p>If the current grid has different values, set `isLeaf` to False and set `val` to any value and divide the current grid into four sub-grids as shown in the photo.</p>\n<p>Recurse for each of the children with the proper sub-grid.</p>\n<p>If you want to know more about the Quad-Tree, you can refer to the wiki.</p>\n<p>Quad-Tree format:\nThe output represents the serialized format of a Quad-Tree using level order traversal, where `null` signifies a path terminator where no node exists below.</p>\n<p>It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list `[isLeaf, val]`.</p>\n<p>If the value of `isLeaf` or `val` is True we represent it as 1 in the list `[isLeaf, val]` and if the value of `isLeaf` or `val` is False we represent it as 0.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def construct_quad_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "grid = [[0,1],[1,0]]",
        "output": "[[0,1],[1,0],[1,1],[1,1],[1,0]]",
        "explanation": "The explanation of this example is shown below:"
      },
      {
        "input": "grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]",
        "output": "[[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]",
        "explanation": "All values in the grid are not the same. We divide the grid into four sub-grids."
      },
      {
        "input": "grid = [[1,1],[1,1]]",
        "output": "[[1,1]]"
      },
      {
        "input": "grid = [[0]]",
        "output": "[[1,0]]"
      },
      {
        "input": "grid = [[1,1,0,0],[1,1,0,0],[0,0,1,1],[0,0,1,1]]",
        "output": "[[0,1],[1,1],[1,0],[1,0],[1,1]]"
      }
    ],
    "constraints": [
      "n == grid.length == grid[i].length",
      "n == 2^x where 0 <= x <= 6"
    ]
  },
  {
    "questionId": 429,
    "title": "N-ary Tree Level Order Traversal",
    "titleSlug": "n-ary-tree-level-order-traversal",
    "content": "<p>Given an n-ary tree, return the level order traversal of its nodes' values.</p>\n<p>Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def n_ary_tree_level_order_traversal(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,null,3,2,4,null,5,6]",
        "output": "[[1],[3,2,4],[5,6]]"
      },
      {
        "input": "root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
        "output": "[[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]"
      }
    ],
    "constraints": [
      "The height of the n-ary tree is less than or equal to 1000",
      "The total number of nodes is between [0, 104]"
    ]
  },
  {
    "questionId": 430,
    "title": "Flatten a Multilevel Doubly Linked List",
    "titleSlug": "flatten-a-multilevel-doubly-linked-list",
    "content": "<p>You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.</p>\n<p>Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def flatten_a_multilevel_doubly_linked_list(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]",
        "output": "[1,2,3,7,8,11,12,9,10,4,5,6]",
        "explanation": "The multilevel linked list in the input is as follows:"
      },
      {
        "input": "head = [1,2,null,3]",
        "output": "[1,3,2]",
        "explanation": "The input multilevel linked list is as follows:"
      },
      {
        "input": "head = []",
        "output": "[]"
      }
    ],
    "constraints": [
      "The number of Nodes will not exceed 1000.",
      "1 <= Node.val <= 105"
    ]
  },
  {
    "questionId": 434,
    "title": "Number of Segments in a String",
    "titleSlug": "number-of-segments-in-a-string",
    "content": "<p>You are given a string `s`, return the number of segments in the string. \nA segment is defined to be a contiguous sequence of non-space characters.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_segments_in_a_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"Hello, my name is John\"",
        "output": "5",
        "explanation": "The five segments are [\"Hello,\", \"my\", \"name\", \"is\", \"John\"]"
      },
      {
        "input": "s = \"Hello\"",
        "output": "1"
      },
      {
        "input": "s = \"love live! mu'sic forever\"",
        "output": "4"
      },
      {
        "input": "s = \"\"",
        "output": "0"
      }
    ],
    "constraints": [
      "0 <= s.length <= 300",
      "s consists of lower-case and upper-case English letters, digits or one of the following characters \"!@#$%^&*()_+-=',.:\".",
      "The only space character in s is ' '."
    ]
  },
  {
    "questionId": 436,
    "title": "Find Right Interval",
    "titleSlug": "find-right-interval",
    "content": "<p>You are given an array of `intervals`, where `intervals[i] = [starti, endi]` and each `starti` is unique.</p>\n<p>The right interval for an interval `i` is an interval `j` such that `startj`` >= endi` and `startj` is minimized.</p>\n<p>Return an array of right interval indices for each interval `i`. If no right interval exists for interval `i`, then put `-1` at index `i`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_right_interval(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "intervals = [[1,2]]",
        "output": "[-1]",
        "explanation": "There is only one interval in the collection, so it outputs -1."
      },
      {
        "input": "intervals = [[3,4],[2,3],[1,2]]",
        "output": "[-1,0,1]",
        "explanation": "There is no right interval for [3,4]."
      },
      {
        "input": "intervals = [[1,4],[2,3],[3,4]]",
        "output": "[-1,2,-1]",
        "explanation": "There is no right interval for [1,4] and [3,4]."
      }
    ],
    "constraints": [
      "1 <= intervals.length <= 2 * 104",
      "intervals[i].length == 2",
      "-106 <= starti <= endi <= 106",
      "The start point of each interval is unique."
    ]
  },
  {
    "questionId": 443,
    "title": "String Compression",
    "titleSlug": "string-compression",
    "content": "<p>Given an array of characters `chars`, compress it using the following algorithm:\nBegin with an empty string `s`. For each group of consecutive repeating characters in `chars`:\nIf the group's length is 1, append the character to `s`.</p>\n<p>Otherwise, append the character followed by the group's length.</p>\n<p>The compressed string `s` should not be returned separately, but instead be stored in the input character array `chars`. Note that group lengths that are 10 or longer will be split into multiple characters in `chars`.</p>\n<p>After you are done modifying the input array, return the new length of the array.</p>\n<p>Follow up:\nCould you solve it using only `O(1)` extra space?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def string_compression(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]",
        "output": "Return 6, and the first 6 characters of the input array should be: [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]",
        "explanation": "The groups are \"aa\", \"bb\", and \"ccc\". This compresses to \"a2b2c3\"."
      },
      {
        "input": "chars = [\"a\"]",
        "output": "Return 1, and the first character of the input array should be: [\"a\"]",
        "explanation": "The only group is \"a\", which remains uncompressed since it's a single character."
      },
      {
        "input": "chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]",
        "output": "Return 4, and the first 4 characters of the input array should be: [\"a\",\"b\",\"1\",\"2\"].",
        "explanation": "The groups are \"a\" and \"bbbbbbbbbbbb\". This compresses to \"ab12\"."
      },
      {
        "input": "chars = [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"]",
        "output": "Return 6, and the first 6 characters of the input array should be: [\"a\",\"3\",\"b\",\"2\",\"a\",\"2\"].",
        "explanation": "The groups are \"aaa\", \"bb\", and \"aa\". This compresses to \"a3b2a2\". Note that each group is independent even if two groups have the same character."
      }
    ],
    "constraints": [
      "1 <= chars.length <= 2000",
      "chars[i] is a lower-case English letter, upper-case English letter, digit, or symbol."
    ]
  },
  {
    "questionId": 444,
    "title": "Sequence Reconstruction",
    "titleSlug": "sequence-reconstruction",
    "content": "<p>Check whether the original sequence `org` can be uniquely reconstructed from the sequences in `seqs`. The `org` sequence is a permutation of the integers from 1 to n, with 1 \u2264 n \u2264 104. Reconstruction means building a shortest common supersequence of the sequences in `seqs` (i.e., a shortest sequence so that all sequences in `seqs` are subsequences of it). Determine whether there is only one sequence that can be reconstructed from `seqs` and it is the `org` sequence.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sequence_reconstruction(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "org = [1,2,3], seqs = [[1,2],[1,3]]",
        "output": "false",
        "explanation": "[1,2,3] is not the only one sequence that can be reconstructed, because [1,3,2] is also a valid sequence that can be reconstructed."
      },
      {
        "input": "org = [1,2,3], seqs = [[1,2]]",
        "output": "false",
        "explanation": "The reconstructed sequence can only be [1,2]."
      },
      {
        "input": "org = [1,2,3], seqs = [[1,2],[1,3],[2,3]]",
        "output": "true",
        "explanation": "The sequences [1,2], [1,3], and [2,3] can uniquely reconstruct the original sequence [1,2,3]."
      },
      {
        "input": "org = [4,1,5,2,6,3], seqs = [[5,2,6,3],[4,1,5,2]]",
        "output": "true"
      }
    ],
    "constraints": [
      "1 <= n <= 10^4",
      "org is a permutation of {1,2,...,n}.",
      "1 <= segs[i].length <= 10^5",
      "seqs[i][j] fits in a 32-bit signed integer.",
      "UPDATE (2017/1/8):",
      "The seqs parameter had been changed to a list of list of strings (instead of a 2d array of strings). Please reload the code definition to get the latest changes."
    ]
  },
  {
    "questionId": 447,
    "title": "Number of Boomerangs",
    "titleSlug": "number-of-boomerangs",
    "content": "<p>You are given `n` `points` in the plane that are all distinct, where `points[i] = [xi, yi]`. A boomerang is a tuple of points `(i, j, k)` such that the distance between `i` and `j` equals the distance between `i` and `k` (the order of the tuple matters).</p>\n<p>Return the number of boomerangs.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_boomerangs(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "points = [[0,0],[1,0],[2,0]]",
        "output": "2",
        "explanation": "The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]]."
      },
      {
        "input": "points = [[1,1],[2,2],[3,3]]",
        "output": "2"
      },
      {
        "input": "points = [[1,1]]",
        "output": "0"
      }
    ],
    "constraints": [
      "n == points.length",
      "1 <= n <= 500",
      "points[i].length == 2",
      "-104 <= xi, yi <= 104",
      "All the points are unique."
    ]
  },
  {
    "questionId": 448,
    "title": "Find All Numbers Disappeared in an Array",
    "titleSlug": "find-all-numbers-disappeared-in-an-array",
    "content": "<p>Given an array `nums` of `n` integers where `nums[i]` is in the range `[1, n]`, return an array of all the integers in the range `[1, n]` that do not appear in `nums`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_all_numbers_disappeared_in_an_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [4,3,2,7,8,2,3,1]",
        "output": "[5,6]"
      },
      {
        "input": "nums = [1,1]",
        "output": "[2]"
      }
    ],
    "constraints": [
      "n == nums.length",
      "1 <= n <= 105",
      "1 <= nums[i] <= n",
      "Follow up: Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space."
    ]
  },
  {
    "questionId": 449,
    "title": "Serialize and Deserialize BST",
    "titleSlug": "serialize-and-deserialize-bst",
    "content": "<p>Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>\n<p>Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.</p>\n<p>The encoded string should be as compact as possible.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def serialize_and_deserialize_bst(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [2,1,3]",
        "output": "[2,1,3]"
      },
      {
        "input": "root = []",
        "output": "[]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 104].",
      "0 <= Node.val <= 104",
      "The input tree is guaranteed to be a binary search tree."
    ]
  },
  {
    "questionId": 450,
    "title": "Delete Node in a BST",
    "titleSlug": "delete-node-in-a-bst",
    "content": "<p>Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.</p>\n<p>Basically, the deletion can be divided into two stages:\nSearch for a node to remove.</p>\n<p>If the node is found, delete the node.</p>\n<p>Follow up: Can you solve it with time complexity `O(height of tree)`?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def delete_node_in_a_bst(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [5,3,6,2,4,null,7], key = 3",
        "output": "[5,4,6,2,null,null,7]",
        "explanation": "Given key to delete is 3. So we find the node with value 3 and delete it."
      },
      {
        "input": "root = [5,3,6,2,4,null,7], key = 0",
        "output": "[5,3,6,2,4,null,7]",
        "explanation": "The tree does not contain a node with value = 0."
      },
      {
        "input": "root = [], key = 0",
        "output": "[]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 104].",
      "-105 <= Node.val <= 105",
      "Each node has a unique value.",
      "root is a valid binary search tree.",
      "-105 <= key <= 105"
    ]
  },
  {
    "questionId": 452,
    "title": "Minimum Number of Arrows to Burst Balloons",
    "titleSlug": "minimum-number-of-arrows-to-burst-balloons",
    "content": "<p>There are some spherical balloons spread in two-dimensional space. For each balloon, provided input is the start and end coordinates of the horizontal diameter. Since it's horizontal, y-coordinates don't matter, and hence the x-coordinates of start and end of the diameter suffice. The start is always smaller than the end.</p>\n<p>An arrow can be shot up exactly vertically from different points along the x-axis. A balloon with `xstart` and `xend` bursts by an arrow shot at `x` if `xstart \u2264 x \u2264 xend`. There is no limit to the number of arrows that can be shot. An arrow once shot keeps traveling up infinitely.</p>\n<p>Given an array `points` where `points[i] = [xstart, xend]`, return the minimum number of arrows that must be shot to burst all balloons.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_number_of_arrows_to_burst_balloons(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "points = [[10,16],[2,8],[1,6],[7,12]]",
        "output": "2",
        "explanation": "One way is to shoot one arrow for example at x = 6 (bursting the balloons [2,8] and [1,6]) and another arrow at x = 11 (bursting the other two balloons)."
      },
      {
        "input": "points = [[1,2],[3,4],[5,6],[7,8]]",
        "output": "4"
      },
      {
        "input": "points = [[1,2],[2,3],[3,4],[4,5]]",
        "output": "2"
      }
    ],
    "constraints": [
      "0 <= points.length <= 104",
      "points[i].length == 2",
      "-231 <= xstart < xend <= 231 - 1"
    ]
  },
  {
    "questionId": 453,
    "title": "Minimum Moves to Equal Array Elements",
    "titleSlug": "minimum-moves-to-equal-array-elements",
    "content": "<p>Given an integer array `nums` of size `n`, return the minimum number of moves required to make all array elements equal.</p>\n<p>In one move, you can increment `n - 1` elements of the array by `1`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_moves_to_equal_array_elements(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3]",
        "output": "3",
        "explanation": "Only three moves are needed (remember each move increments two elements):"
      },
      {
        "input": "nums = [1,1,1]",
        "output": "0"
      }
    ],
    "constraints": [
      "n == nums.length",
      "1 <= nums.length <= 104",
      "-109 <= nums[i] <= 109"
    ]
  },
  {
    "questionId": 455,
    "title": "Assign Cookies",
    "titleSlug": "assign-cookies",
    "content": "<p>Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.</p>\n<p>Each child `i` has a greed factor `g[i]`, which is the minimum size of a cookie that the child will be content with; and each cookie `j` has a size `s[j]`. If `s[j] >= g[i]`, we can assign the cookie `j` to the child `i`, and the child `i` will be content. Your goal is to maximize the number of your content children and output the maximum number.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def assign_cookies(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "g = [1,2,3], s = [1,1]",
        "output": "1",
        "explanation": "You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3."
      },
      {
        "input": "g = [1,2], s = [1,2,3]",
        "output": "2",
        "explanation": "You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2."
      }
    ],
    "constraints": [
      "1 <= g.length <= 3 * 104",
      "0 <= s.length <= 3 * 104",
      "1 <= g[i], s[j] <= 231 - 1"
    ]
  },
  {
    "questionId": 456,
    "title": "132 Pattern",
    "titleSlug": "132-pattern",
    "content": "<p>Given an array of `n` integers `nums`, a 132 pattern is a subsequence of three integers `nums[i]`, `nums[j]` and `nums[k]` such that `i < j < k` and `nums[i] < nums[k] < nums[j]`.</p>\n<p>Return `true` if there is a 132 pattern in `nums`, otherwise, return `false`.</p>\n<p>Follow up: The `O(n^2)` is trivial, could you come up with the `O(n logn)` or the `O(n)` solution?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def 132_pattern(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3,4]",
        "output": "false",
        "explanation": "There is no 132 pattern in the sequence."
      },
      {
        "input": "nums = [3,1,4,2]",
        "output": "true",
        "explanation": "There is a 132 pattern in the sequence: [1, 4, 2]."
      },
      {
        "input": "nums = [-1,3,2,0]",
        "output": "true",
        "explanation": "There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0]."
      }
    ],
    "constraints": [
      "n == nums.length",
      "1 <= n <= 104",
      "-109 <= nums[i] <= 109"
    ]
  },
  {
    "questionId": 457,
    "title": "Circular Array Loop",
    "titleSlug": "circular-array-loop",
    "content": "<p>You are playing a game involving a circular array of non-zero integers `nums`. Each `nums[i]` denotes the number of indices forward/backward you must move if you are located at index `i`:\nIf `nums[i]` is positive, move `nums[i]` steps forward, and\nIf `nums[i]` is negative, move `nums[i]` steps backward.</p>\n<p>Since the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.</p>\n<p>A cycle in the array consists of a sequence of indices `seq` of length `k` where:\nFollowing the movement rules above results in the repeating index sequence `seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...`\nEvery `nums[seq[j]]` is either all positive or all negative.</p>\n<p>`k > 1`\nReturn `true` if there is a cycle in `nums`, or `false` otherwise.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def circular_array_loop(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [2,-1,1,2,2]",
        "output": "true",
        "explanation": "There is a cycle from index 0 -> 2 -> 3 -> 0 -> ..."
      },
      {
        "input": "nums = [-1,2]",
        "output": "false",
        "explanation": "The sequence from index 1 -> 1 -> 1 -> ... is not a cycle because the sequence's length is 1."
      },
      {
        "input": "nums = [-2,1,-1,-2,-2]",
        "output": "false",
        "explanation": "The sequence from index 1 -> 2 -> 1 -> ... is not a cycle because nums[1] is positive, but nums[2] is negative."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 5000",
      "-1000 <= nums[i] <= 1000",
      "nums[i] != 0",
      "Follow up: Could you solve it in O(n) time complexity and O(1) extra space complexity?"
    ]
  },
  {
    "questionId": 459,
    "title": "Repeated Substring Pattern",
    "titleSlug": "repeated-substring-pattern",
    "content": "<p>Given a string `s`, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def repeated_substring_pattern(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"abab\"",
        "output": "true",
        "explanation": "It is the substring \"ab\" twice."
      },
      {
        "input": "s = \"aba\"",
        "output": "false"
      },
      {
        "input": "s = \"abcabcabcabc\"",
        "output": "true",
        "explanation": "It is the substring \"abc\" four times or the substring \"abcabc\" twice."
      }
    ],
    "constraints": [
      "1 <= s.length <= 104",
      "s consists of lowercase English letters."
    ]
  },
  {
    "questionId": 463,
    "title": "Island Perimeter",
    "titleSlug": "island-perimeter",
    "content": "<p>You are given `row x col` `grid` representing a map where `grid[i][j] = 1` represents land and `grid[i][j] = 0` represents water.</p>\n<p>Grid cells are connected horizontally/vertically (not diagonally). The `grid` is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).</p>\n<p>The island doesn't have \"lakes\", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def island_perimeter(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]",
        "output": "16",
        "explanation": "The perimeter is the 16 yellow stripes in the image above."
      },
      {
        "input": "grid = [[1]]",
        "output": "4"
      },
      {
        "input": "grid = [[1,0]]",
        "output": "4"
      }
    ],
    "constraints": [
      "row == grid.length",
      "col == grid[i].length",
      "1 <= row, col <= 100",
      "grid[i][j] is 0 or 1."
    ]
  },
  {
    "questionId": 464,
    "title": "Can I Win",
    "titleSlug": "can-i-win",
    "content": "<p>In the \"100 game\" two players take turns adding, to a running total, any integer from `1` to `10`. The player who first causes the running total to reach or exceed 100 wins.</p>\n<p>What if we change the game so that players cannot re-use integers?\nFor example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100.</p>\n<p>Given two integers maxChoosableInteger and desiredTotal, return `true` if the first player to move can force a win, otherwise return `false`. Assume both players play optimally.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def can_i_win(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "maxChoosableInteger = 10, desiredTotal = 11",
        "output": "false",
        "explanation": "No matter which integer the first player choose, the first player will lose."
      },
      {
        "input": "maxChoosableInteger = 10, desiredTotal = 0",
        "output": "true"
      },
      {
        "input": "maxChoosableInteger = 10, desiredTotal = 1",
        "output": "true"
      }
    ],
    "constraints": [
      "1 <= maxChoosableInteger <= 20",
      "0 <= desiredTotal <= 300"
    ]
  },
  {
    "questionId": 468,
    "title": "Validate IP Address",
    "titleSlug": "validate-ip-address",
    "content": "<p>Given a string `IP`, return `\"IPv4\"` if IP is a valid IPv4 address, `\"IPv6\"` if IP is a valid IPv6 address or `\"Neither\"` if IP is not a correct IP of any type.</p>\n<p>A valid IPv4 address is an IP in the form `\"x1.x2.x3.x4\"` where `0 <= xi <= 255` and `xi` cannot contain leading zeros. For example, `\"192.168.1.1\"` and `\"192.168.1.0\"` are valid IPv4 addresses but `\"192.168.01.1\"`, while `\"192.168.1.00\"` and `\"192.168@1.1\"` are invalid IPv4 addresses.</p>\n<p>A valid IPv6 address is an IP in the form `\"x1:x2:x3:x4:x5:x6:x7:x8\"` where:\n`1 <= xi.length <= 4`\n`xi` is a hexadecimal string which may contain digits, lower-case English letter (`'a'` to `'f'`) and upper-case English letters (`'A'` to `'F'`).</p>\n<p>Leading zeros are allowed in `xi`.</p>\n<p>For example, \"`2001:0db8:85a3:0000:0000:8a2e:0370:7334\"` and \"`2001:db8:85a3:0:0:8A2E:0370:7334\"` are valid IPv6 addresses, while \"`2001:0db8:85a3::8A2E:037j:7334\"` and \"`02001:0db8:85a3:0000:0000:8a2e:0370:7334\"` are invalid IPv6 addresses.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def validate_ip_address(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "IP = \"172.16.254.1\"",
        "output": "\"IPv4\"",
        "explanation": "This is a valid IPv4 address, return \"IPv4\"."
      },
      {
        "input": "IP = \"2001:0db8:85a3:0:0:8A2E:0370:7334\"",
        "output": "\"IPv6\"",
        "explanation": "This is a valid IPv6 address, return \"IPv6\"."
      },
      {
        "input": "IP = \"256.256.256.256\"",
        "output": "\"Neither\"",
        "explanation": "This is neither a IPv4 address nor a IPv6 address."
      },
      {
        "input": "IP = \"2001:0db8:85a3:0:0:8A2E:0370:7334:\"",
        "output": "\"Neither\""
      },
      {
        "input": "IP = \"1e1.4.5.6\"",
        "output": "\"Neither\""
      }
    ],
    "constraints": [
      "IP consists only of English letters, digits and the characters '.' and ':'."
    ]
  },
  {
    "questionId": 470,
    "title": "Implement Rand10() Using Rand7()",
    "titleSlug": "implement-rand10-using-rand7",
    "content": "<p>Given the API `rand7()` that generates a uniform random integer in the range `[1, 7]`, write a function `rand10()` that generates a uniform random integer in the range `[1, 10]`. You can only call the API `rand7()`, and you shouldn't call any other API. Please do not use a language's built-in random API.</p>\n<p>Each test case will have one internal argument `n`, the number of times that your implemented function `rand10()` will be called while testing. Note that this is not an argument passed to `rand10()`.</p>\n<p>Follow up:\nWhat is the expected value for the number of calls to `rand7()` function?\nCould you minimize the number of calls to `rand7()`?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def implement_rand10_using_rand7(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 1",
        "output": "[2]"
      },
      {
        "input": "n = 2",
        "output": "[2,8]"
      },
      {
        "input": "n = 3",
        "output": "[3,8,10]"
      }
    ],
    "constraints": [
      "1 <= n <= 105"
    ]
  },
  {
    "questionId": 474,
    "title": "Ones and Zeroes",
    "titleSlug": "ones-and-zeroes",
    "content": "<p>You are given an array of binary strings `strs` and two integers `m` and `n`.</p>\n<p>Return the size of the largest subset of `strs` such that there are at most `m` `0`'s and `n` `1`'s in the subset.</p>\n<p>A set `x` is a subset of a set `y` if all elements of `x` are also elements of `y`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def ones_and_zeroes(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "strs = [\"10\",\"0001\",\"111001\",\"1\",\"0\"], m = 5, n = 3",
        "output": "4",
        "explanation": "The largest subset with at most 5 0's and 3 1's is {\"10\", \"0001\", \"1\", \"0\"}, so the answer is 4."
      },
      {
        "input": "strs = [\"10\",\"0\",\"1\"], m = 1, n = 1",
        "output": "2",
        "explanation": "The largest subset is {\"0\", \"1\"}, so the answer is 2."
      }
    ],
    "constraints": [
      "1 <= strs.length <= 600",
      "1 <= strs[i].length <= 100",
      "strs[i] consists only of digits '0' and '1'.",
      "1 <= m, n <= 100"
    ]
  },
  {
    "questionId": 475,
    "title": "Heaters",
    "titleSlug": "heaters",
    "content": "<p>Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.</p>\n<p>Every house can be warmed, as long as the house is within the heater's warm radius range. \nGiven the positions of `houses` and `heaters` on a horizontal line, return the minimum radius standard of heaters so that those heaters could cover all houses.</p>\n<p>Notice that all the `heaters` follow your radius standard, and the warm radius will the same.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def heaters(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "houses = [1,2,3], heaters = [2]",
        "output": "1",
        "explanation": "The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed."
      },
      {
        "input": "houses = [1,2,3,4], heaters = [1,4]",
        "output": "1",
        "explanation": "The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed."
      },
      {
        "input": "houses = [1,5], heaters = [2]",
        "output": "3"
      }
    ],
    "constraints": [
      "1 <= houses.length, heaters.length <= 3 * 104",
      "1 <= houses[i], heaters[i] <= 109"
    ]
  },
  {
    "questionId": 476,
    "title": "Number Complement",
    "titleSlug": "number-complement",
    "content": "<p>Given a positive integer `num`, output its complement number. The complement strategy is to flip the bits of its binary representation.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_complement(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "num = 5",
        "output": "2",
        "explanation": "The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2."
      },
      {
        "input": "num = 1",
        "output": "0",
        "explanation": "The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0."
      }
    ],
    "constraints": [
      "The given integer num is guaranteed to fit within the range of a 32-bit signed integer.",
      "num >= 1",
      "You could assume no leading zero bit in the integer\u2019s binary representation.",
      "This question is the same as 1009: https://leetcode.com/problems/complement-of-base-10-integer/"
    ]
  },
  {
    "questionId": 478,
    "title": "Generate Random Point in a Circle",
    "titleSlug": "generate-random-point-in-a-circle",
    "content": "<p>Given the radius and the position of the center of a circle, implement the function `randPoint` which generates a uniform random point inside the circle.</p>\n<p>Implement the `Solution` class:\n`Solution(double radius, double x_center, double y_center)` initializes the object with the radius of the circle `radius` and the position of the center `(x_center, y_center)`.</p>\n<p>`randPoint()` returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array `[x, y]`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def generate_random_point_in_a_circle(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "0 < radius <= 108",
      "-107 <= x_center, y_center <= 107",
      "At most 3 * 104 calls will be made to randPoint."
    ]
  },
  {
    "questionId": 486,
    "title": "Predict the Winner",
    "titleSlug": "predict-the-winner",
    "content": "<p>Given an array of scores that are non-negative integers. Player 1 picks one of the numbers from either end of the array followed by the player 2 and then player 1 and so on. Each time a player picks a number, that number will not be available for the next player. This continues until all the scores have been chosen. The player with the maximum score wins.</p>\n<p>Given an array of scores, predict whether player 1 is the winner. You can assume each player plays to maximize his score.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def predict_the_winner(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "[1, 5, 2]",
        "output": "False",
        "explanation": "Initially, player 1 can choose between 1 and 2."
      },
      {
        "input": "[1, 5, 233, 7]",
        "output": "True",
        "explanation": "Player 1 first chooses 1. Then player 2 have to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233."
      }
    ],
    "constraints": [
      "1 <= length of the array <= 20.",
      "Any scores in the given array are non-negative integers and will not exceed 10,000,000.",
      "If the scores of both players are equal, then player 1 is still the winner."
    ]
  },
  {
    "questionId": 490,
    "title": "The Maze",
    "titleSlug": "the-maze",
    "content": "<p>There is a ball in a `maze` with empty spaces (represented as `0`) and walls (represented as `1`). The ball can go through the empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.</p>\n<p>Given the `m x n` `maze`, the ball's `start` position and the `destination`, where `start = [startrow, startcol]` and `destination = [destinationrow, destinationcol]`, return `true` if the ball can stop at the destination, otherwise return `false`.</p>\n<p>You may assume that the borders of the maze are all walls (see examples).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def the_maze(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [4,4]",
        "output": "true",
        "explanation": "One possible way is : left -> down -> left -> down -> right -> down -> right."
      },
      {
        "input": "maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [3,2]",
        "output": "false",
        "explanation": "There is no way for the ball to stop at the destination. Notice that you can pass through the destination but you cannot stop there."
      },
      {
        "input": "maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], start = [4,3], destination = [0,1]",
        "output": "false"
      }
    ],
    "constraints": [
      "m == maze.length",
      "n == maze[i].length",
      "1 <= m, n <= 100",
      "maze[i][j] is 0 or 1.",
      "start.length == 2",
      "destination.length == 2",
      "0 <= startrow, destinationrow <= m",
      "0 <= startcol, destinationcol <= n",
      "Both the ball and the destination exist in an empty space, and they will not be in the same position initially.",
      "The maze contains at least 2 empty spaces."
    ]
  },
  {
    "questionId": 491,
    "title": "Increasing Subsequences",
    "titleSlug": "increasing-subsequences",
    "content": "<p>Given an integer array, your task is to find all the different possible increasing subsequences of the given array, and the length of an increasing subsequence should be at least 2.</p>\n<p>Example:\nInput: [4, 6, 7, 7]\nOutput: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def increasing_subsequences(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "The length of the given array will not exceed 15.",
      "The range of integer in the given array is [-100,100].",
      "The given array may contain duplicates, and two equal integers should also be considered as a special case of increasing sequence."
    ]
  },
  {
    "questionId": 492,
    "title": "Construct the Rectangle",
    "titleSlug": "construct-the-rectangle",
    "content": "<p>A web developer needs to know how to design a web page's size. So, given a specific rectangular web page\u2019s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:\nThe area of the rectangular web page you designed must equal to the given target area.</p>\n<p>The width `W` should not be larger than the length `L`, which means `L >= W`.</p>\n<p>The difference between length `L` and width `W` should be as small as possible.</p>\n<p>Return an array `[L, W]` where `L` and `W` are the length and width of the web page you designed in sequence.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def construct_the_rectangle(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "area = 4",
        "output": "[2,2]",
        "explanation": "The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]."
      },
      {
        "input": "area = 37",
        "output": "[37,1]"
      },
      {
        "input": "area = 122122",
        "output": "[427,286]"
      }
    ],
    "constraints": [
      "1 <= area <= 107"
    ]
  },
  {
    "questionId": 494,
    "title": "Target Sum",
    "titleSlug": "target-sum",
    "content": "<p>You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols `+` and `-`. For each integer, you should choose one from `+` and `-` as its new symbol.</p>\n<p>Find out how many ways to assign symbols to make sum of integers equal to target S.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def target_sum(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums is [1, 1, 1, 1, 1], S is 3.",
        "output": "5",
        "explanation": "-1+1+1+1+1 = 3"
      }
    ],
    "constraints": [
      "The length of the given array is positive and will not exceed 20.",
      "The sum of elements in the given array will not exceed 1000.",
      "Your output answer is guaranteed to be fitted in a 32-bit integer."
    ]
  },
  {
    "questionId": 496,
    "title": "Next Greater Element I",
    "titleSlug": "next-greater-element-i",
    "content": "<p>You are given two integer arrays `nums1` and `nums2` both of unique elements, where `nums1` is a subset of `nums2`.</p>\n<p>Find all the next greater numbers for `nums1`'s elements in the corresponding places of `nums2`.</p>\n<p>The Next Greater Number of a number `x` in `nums1` is the first greater number to its right in `nums2`. If it does not exist, return `-1` for this number.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def next_greater_element_i(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums1 = [4,1,2], nums2 = [1,3,4,2]",
        "output": "[-1,3,-1]",
        "explanation": "For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1."
      },
      {
        "input": "nums1 = [2,4], nums2 = [1,2,3,4]",
        "output": "[3,-1]",
        "explanation": "For number 2 in the first array, the next greater number for it in the second array is 3."
      }
    ],
    "constraints": [
      "1 <= nums1.length <= nums2.length <= 1000",
      "0 <= nums1[i], nums2[i] <= 104",
      "All integers in nums1 and nums2 are unique.",
      "All the integers of nums1 also appear in nums2.",
      "Follow up: Could you find an O(nums1.length + nums2.length) solution?"
    ]
  },
  {
    "questionId": 500,
    "title": "Keyboard Row",
    "titleSlug": "keyboard-row",
    "content": "<p>Given an array of strings `words`, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.</p>\n<p>In the American keyboard:\nthe first row consists of the characters `\"qwertyuiop\"`,\nthe second row consists of the characters `\"asdfghjkl\"`, and\nthe third row consists of the characters `\"zxcvbnm\"`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def keyboard_row(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "words = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]",
        "output": "[\"Alaska\",\"Dad\"]"
      },
      {
        "input": "words = [\"omk\"]",
        "output": "[]"
      },
      {
        "input": "words = [\"adsdf\",\"sfd\"]",
        "output": "[\"adsdf\",\"sfd\"]"
      }
    ],
    "constraints": [
      "1 <= words.length <= 20",
      "1 <= words[i].length <= 100",
      "words[i] consists of English letters (both lowercase and uppercase)."
    ]
  },
  {
    "questionId": 501,
    "title": "Find Mode in Binary Search Tree",
    "titleSlug": "find-mode-in-binary-search-tree",
    "content": "<p>Given the `root` of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.</p>\n<p>If the tree has more than one mode, return them in any order.</p>\n<p>Assume a BST is defined as follows:\nThe left subtree of a node contains only nodes with keys less than or equal to the node's key.</p>\n<p>The right subtree of a node contains only nodes with keys greater than or equal to the node's key.</p>\n<p>Both the left and right subtrees must also be binary search trees.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_mode_in_binary_search_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,null,2,2]",
        "output": "[2]"
      },
      {
        "input": "root = [0]",
        "output": "[0]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 104].",
      "-105 <= Node.val <= 105",
      "Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count)."
    ]
  },
  {
    "questionId": 503,
    "title": "Next Greater Element II",
    "titleSlug": "next-greater-element-ii",
    "content": "<p>Given a circular integer array `nums` (i.e., the next element of `nums[nums.length - 1]` is `nums[0]`), return the next greater number for every element in `nums`.</p>\n<p>The next greater number of a number `x` is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return `-1` for this number.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def next_greater_element_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,1]",
        "output": "[2,-1,2]",
        "explanation": "The first 1's next greater number is 2;"
      },
      {
        "input": "nums = [1,2,3,4,3]",
        "output": "[2,3,4,-1,4]"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 104",
      "-109 <= nums[i] <= 109"
    ]
  },
  {
    "questionId": 505,
    "title": "The Maze II",
    "titleSlug": "the-maze-ii",
    "content": "<p>There is a ball in a `maze` with empty spaces (represented as `0`) and walls (represented as `1`). The ball can go through the empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.</p>\n<p>Given the `m x n` `maze`, the ball's `start` position and the `destination`, where `start = [startrow, startcol]` and `destination = [destinationrow, destinationcol]`, return the shortest distance for the ball to stop at the destination. If the ball cannot stop at `destination`, return `-1`.</p>\n<p>The distance is the number of empty spaces traveled by the ball from the start position (excluded) to the destination (included).</p>\n<p>You may assume that the borders of the maze are all walls (see examples).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def the_maze_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [4,4]",
        "output": "12",
        "explanation": "One possible way is : left -> down -> left -> down -> right -> down -> right."
      },
      {
        "input": "maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [3,2]",
        "output": "-1",
        "explanation": "There is no way for the ball to stop at the destination. Notice that you can pass through the destination but you cannot stop there."
      },
      {
        "input": "maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], start = [4,3], destination = [0,1]",
        "output": "-1"
      }
    ],
    "constraints": [
      "m == maze.length",
      "n == maze[i].length",
      "1 <= m, n <= 100",
      "maze[i][j] is 0 or 1.",
      "start.length == 2",
      "destination.length == 2",
      "0 <= startrow, destinationrow <= m",
      "0 <= startcol, destinationcol <= n",
      "Both the ball and the destination exist in an empty space, and they will not be in the same position initially.",
      "The maze contains at least 2 empty spaces."
    ]
  },
  {
    "questionId": 506,
    "title": "Relative Ranks",
    "titleSlug": "relative-ranks",
    "content": "<p>You are given an integer array `score` of size `n`, where `score[i]` is the score of the `ith` athlete in a competition. All the scores are guaranteed to be unique.</p>\n<p>The athletes are placed based on their scores, where the `1st` place athlete has the highest score, the `2nd` place athlete has the `2nd` highest score, and so on. The placement of each athlete determines their rank:\nThe `1st` place athlete's rank is `\"Gold Medal\"`.</p>\n<p>The `2nd` place athlete's rank is `\"Silver Medal\"`.</p>\n<p>The `3rd` place athlete's rank is `\"Bronze Medal\"`.</p>\n<p>For the `4th` place to the `nth` place athlete, their rank is their placement number (i.e., the `xth` place athlete's rank is `\"x\"`).</p>\n<p>Return an array `answer` of size `n` where `answer[i]` is the rank of the `ith` athlete.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def relative_ranks(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "score = [5,4,3,2,1]",
        "output": "[\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]",
        "explanation": "The placements are [1st, 2nd, 3rd, 4th, 5th]."
      },
      {
        "input": "score = [10,3,8,9,4]",
        "output": "[\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"]",
        "explanation": "The placements are [1st, 5th, 3rd, 2nd, 4th]."
      }
    ],
    "constraints": [
      "n == score.length",
      "1 <= n <= 104",
      "0 <= score[i] <= 106",
      "All the values in score are unique."
    ]
  },
  {
    "questionId": 507,
    "title": "Perfect Number",
    "titleSlug": "perfect-number",
    "content": "<p>A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer `x` is an integer that can divide `x` evenly.</p>\n<p>Given an integer `n`, return `true` if `n` is a perfect number, otherwise return `false`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def perfect_number(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "num = 28",
        "output": "true",
        "explanation": "28 = 1 + 2 + 4 + 7 + 14"
      },
      {
        "input": "num = 6",
        "output": "true"
      },
      {
        "input": "num = 496",
        "output": "true"
      },
      {
        "input": "num = 8128",
        "output": "true"
      },
      {
        "input": "num = 2",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= num <= 108"
    ]
  },
  {
    "questionId": 509,
    "title": "Fibonacci Number",
    "titleSlug": "fibonacci-number",
    "content": "<p>The Fibonacci numbers, commonly denoted `F(n)` form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from `0` and `1`. That is,\nF(0) = 0, F(1) = 1\nF(n) = F(n - 1) + F(n - 2), for n > 1.</p>\n<p>Given `n`, calculate `F(n)`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def fibonacci_number(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 2",
        "output": "1",
        "explanation": "F(2) = F(1) + F(0) = 1 + 0 = 1."
      },
      {
        "input": "n = 3",
        "output": "2",
        "explanation": "F(3) = F(2) + F(1) = 1 + 1 = 2."
      },
      {
        "input": "n = 4",
        "output": "3",
        "explanation": "F(4) = F(3) + F(2) = 2 + 1 = 3."
      }
    ],
    "constraints": [
      "0 <= n <= 30"
    ]
  },
  {
    "questionId": 510,
    "title": "Inorder Successor in BST II",
    "titleSlug": "inorder-successor-in-bst-ii",
    "content": "<p>Given a `node` in a binary search tree, return the in-order successor of that node in the BST. If that node has no in-order successor, return `null`.</p>\n<p>The successor of a `node` is the node with the smallest key greater than `node.val`.</p>\n<p>You will have direct access to the node but not to the root of the tree. Each node will have a reference to its parent node. Below is the definition for `Node`:\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node parent;\n}</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def inorder_successor_in_bst_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "tree = [2,1,3], node = 1",
        "output": "2",
        "explanation": "1's in-order successor node is 2. Note that both the node and the return value is of Node type."
      },
      {
        "input": "tree = [5,3,6,2,4,null,null,1], node = 6",
        "output": "null",
        "explanation": "There is no in-order successor of the current node, so the answer is null."
      },
      {
        "input": "tree = [15,6,18,3,7,17,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 15",
        "output": "17"
      },
      {
        "input": "tree = [15,6,18,3,7,17,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 13",
        "output": "15"
      },
      {
        "input": "tree = [0], node = 0",
        "output": "null"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 104].",
      "-105 <= Node.val <= 105",
      "All Nodes will have unique values.",
      "Follow up: Could you solve it without looking up any of the node's values?"
    ]
  },
  {
    "questionId": 513,
    "title": "Find Bottom Left Tree Value",
    "titleSlug": "find-bottom-left-tree-value",
    "content": "<p>Given the `root` of a binary tree, return the leftmost value in the last row of the tree.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_bottom_left_tree_value(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [2,1,3]",
        "output": "1"
      },
      {
        "input": "root = [1,2,3,4,null,5,6,null,null,7]",
        "output": "7"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 104].",
      "-231 <= Node.val <= 231 - 1"
    ]
  },
  {
    "questionId": 515,
    "title": "Find Largest Value in Each Tree Row",
    "titleSlug": "find-largest-value-in-each-tree-row",
    "content": "<p>Given the `root` of a binary tree, return an array of the largest value in each row of the tree (0-indexed).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_largest_value_in_each_tree_row(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,3,2,5,3,null,9]",
        "output": "[1,3,9]"
      },
      {
        "input": "root = [1,2,3]",
        "output": "[1,3]"
      },
      {
        "input": "root = [1]",
        "output": "[1]"
      },
      {
        "input": "root = [1,null,2]",
        "output": "[1,2]"
      },
      {
        "input": "root = []",
        "output": "[]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree will be in the range [0, 104].",
      "-231 <= Node.val <= 231 - 1"
    ]
  },
  {
    "questionId": 516,
    "title": "Longest Palindromic Subsequence",
    "titleSlug": "longest-palindromic-subsequence",
    "content": "<p>Given a string `s`, find the longest palindromic subsequence's length in `s`.</p>\n<p>A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_palindromic_subsequence(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"bbbab\"",
        "output": "4",
        "explanation": "One possible longest palindromic subsequence is \"bbbb\"."
      },
      {
        "input": "s = \"cbbd\"",
        "output": "2",
        "explanation": "One possible longest palindromic subsequence is \"bb\"."
      }
    ],
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists only of lowercase English letters."
    ]
  },
  {
    "questionId": 521,
    "title": "Longest Uncommon Subsequence I",
    "titleSlug": "longest-uncommon-subsequence-i",
    "content": "<p>Given two strings `a` and `b`, find the length of the longest uncommon subsequence between them.</p>\n<p>A subsequence of a string `s` is a string that can be obtained after deleting any number of characters from `s`. For example, `\"abc\"` is a subsequence of `\"aebdc\"` because you can delete the underlined characters in `\"aebdc\"` to get `\"abc\"`. Other subsequences of `\"aebdc\"` include `\"aebdc\"`, `\"aeb\"`, and `\"\"` (empty string).</p>\n<p>An uncommon subsequence between two strings is a string that is a subsequence of one but not the other.</p>\n<p>Return the length of the longest uncommon subsequence between `a` and `b`. If the longest uncommon subsequence doesn't exist, return `-1`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_uncommon_subsequence_i(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "a = \"aba\", b = \"cdc\"",
        "output": "3",
        "explanation": "One longest uncommon subsequence is \"aba\" because \"aba\" is a subsequence of \"aba\" but not \"cdc\"."
      },
      {
        "input": "a = \"aaa\", b = \"bbb\"",
        "output": "3",
        "explanation": "The longest uncommon subsequences are \"aaa\" and \"bbb\"."
      },
      {
        "input": "a = \"aaa\", b = \"aaa\"",
        "output": "-1",
        "explanation": "Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a."
      }
    ],
    "constraints": [
      "1 <= a.length, b.length <= 100",
      "a and b consist of lower-case English letters."
    ]
  },
  {
    "questionId": 523,
    "title": "Continuous Subarray Sum",
    "titleSlug": "continuous-subarray-sum",
    "content": "<p>Given an integer array `nums` and an integer `k`, return `true` if `nums` has a continuous subarray of size at least two whose elements sum up to a multiple of `k`, or `false` otherwise.</p>\n<p>An integer `x` is a multiple of `k` if there exists an integer `n` such that `x = n * k`. `0` is always a multiple of `k`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def continuous_subarray_sum(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [23,2,4,6,7], k = 6",
        "output": "true",
        "explanation": "[2, 4] is a continuous subarray of size 2 whose elements sum up to 6."
      },
      {
        "input": "nums = [23,2,6,4,7], k = 6",
        "output": "true",
        "explanation": "[23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42."
      },
      {
        "input": "nums = [23,2,6,4,7], k = 13",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 105",
      "0 <= nums[i] <= 109",
      "0 <= sum(nums[i]) <= 231 - 1",
      "1 <= k <= 231 - 1"
    ]
  },
  {
    "questionId": 524,
    "title": "Longest Word in Dictionary through Deleting",
    "titleSlug": "longest-word-in-dictionary-through-deleting",
    "content": "<p>Given a string `s` and a string array `dictionary`, return the longest string in the dictionary that can be formed by deleting some of the given string characters. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_word_in_dictionary_through_deleting(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"abpcplea\", dictionary = [\"ale\",\"apple\",\"monkey\",\"plea\"]",
        "output": "\"apple\""
      },
      {
        "input": "s = \"abpcplea\", dictionary = [\"a\",\"b\",\"c\"]",
        "output": "\"a\""
      }
    ],
    "constraints": [
      "1 <= s.length <= 1000",
      "1 <= dictionary.length <= 1000",
      "1 <= dictionary[i].length <= 1000",
      "s and dictionary[i] consist of lowercase English letters."
    ]
  },
  {
    "questionId": 526,
    "title": "Beautiful Arrangement",
    "titleSlug": "beautiful-arrangement",
    "content": "<p>Suppose you have `n` integers labeled `1` through `n`. A permutation of those `n` integers `perm` (1-indexed) is considered a beautiful arrangement if for every `i` (`1 <= i <= n`), either of the following is true:\n`perm[i]` is divisible by `i`.</p>\n<p>`i` is divisible by `perm[i]`.</p>\n<p>Given an integer `n`, return the number of the beautiful arrangements that you can construct.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def beautiful_arrangement(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 2",
        "output": "2",
        "explanation": "The first beautiful arrangement is [1,2]:"
      },
      {
        "input": "n = 1",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= n <= 15"
    ]
  },
  {
    "questionId": 528,
    "title": "Random Pick with Weight",
    "titleSlug": "random-pick-with-weight",
    "content": "<p>You are given an array of positive integers `w` where `w[i]` describes the weight of `i``th` index (0-indexed).</p>\n<p>We need to call the function `pickIndex()` which randomly returns an integer in the range `[0, w.length - 1]`. `pickIndex()` should return the integer proportional to its weight in the `w` array. For example, for `w = [1, 3]`, the probability of picking the index `0` is `1 / (1 + 3) = 0.25` (i.e 25%) while the probability of picking the index `1` is `3 / (1 + 3) = 0.75` (i.e 75%).</p>\n<p>More formally, the probability of picking index `i` is `w[i] / sum(w)`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def random_pick_with_weight(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= w.length <= 10000",
      "1 <= w[i] <= 10^5",
      "pickIndex will be called at most 10000 times."
    ]
  },
  {
    "questionId": 531,
    "title": "Lonely Pixel I",
    "titleSlug": "lonely-pixel-i",
    "content": "<p>Given an `m x n` `picture` consisting of black `'B'` and white `'W'` pixels, return the number of black lonely pixels.</p>\n<p>A black lonely pixel is a character `'B'` that located at a specific position where the same row and same column don't have any other black pixels.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def lonely_pixel_i(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "picture = [[\"W\",\"W\",\"B\"],[\"W\",\"B\",\"W\"],[\"B\",\"W\",\"W\"]]",
        "output": "3",
        "explanation": "All the three 'B's are black lonely pixels."
      },
      {
        "input": "picture = [[\"B\",\"B\",\"B\"],[\"B\",\"B\",\"B\"],[\"B\",\"B\",\"B\"]]",
        "output": "0"
      }
    ],
    "constraints": [
      "m == picture.length",
      "n == picture[i].length",
      "1 <= m, n <= 500",
      "picture[i][j] is 'W' or 'B'."
    ]
  },
  {
    "questionId": 532,
    "title": "K-diff Pairs in an Array",
    "titleSlug": "k-diff-pairs-in-an-array",
    "content": "<p>Given an array of integers `nums` and an integer `k`, return the number of unique k-diff pairs in the array.</p>\n<p>A k-diff pair is an integer pair `(nums[i], nums[j])`, where the following are true:\n`0 <= i, j < nums.length`\n`i != j`\n`|nums[i] - nums[j]| == k`\nNotice that `|val|` denotes the absolute value of `val`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def k_diff_pairs_in_an_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [3,1,4,1,5], k = 2",
        "output": "2",
        "explanation": "There are two 2-diff pairs in the array, (1, 3) and (3, 5)."
      },
      {
        "input": "nums = [1,2,3,4,5], k = 1",
        "output": "4",
        "explanation": "There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5)."
      },
      {
        "input": "nums = [1,3,1,5,4], k = 0",
        "output": "1",
        "explanation": "There is one 0-diff pair in the array, (1, 1)."
      },
      {
        "input": "nums = [1,2,4,4,3,3,0,9,2,3], k = 3",
        "output": "2"
      },
      {
        "input": "nums = [-1,-2,-3], k = 1",
        "output": "2"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 104",
      "-107 <= nums[i] <= 107",
      "0 <= k <= 107"
    ]
  },
  {
    "questionId": 536,
    "title": "Construct Binary Tree from String",
    "titleSlug": "construct-binary-tree-from-string",
    "content": "<p>You need to construct a binary tree from a string consisting of parenthesis and integers.</p>\n<p>The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure.</p>\n<p>You always start to construct the left child node of the parent first if it exists.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def construct_binary_tree_from_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"4(2(3)(1))(6(5))\"",
        "output": "[4,2,6,3,1,5]"
      },
      {
        "input": "s = \"4(2(3)(1))(6(5)(7))\"",
        "output": "[4,2,6,3,1,5,7]"
      },
      {
        "input": "s = \"-4(2(3)(1))(6(5)(7))\"",
        "output": "[-4,2,6,3,1,5,7]"
      }
    ],
    "constraints": [
      "0 <= s.length <= 3 * 104",
      "s consists of digits, '(', ')', and '-' only."
    ]
  },
  {
    "questionId": 538,
    "title": "Convert BST to Greater Tree",
    "titleSlug": "convert-bst-to-greater-tree",
    "content": "<p>Given the `root` of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.</p>\n<p>As a reminder, a binary search tree is a tree that satisfies these constraints:\nThe left subtree of a node contains only nodes with keys less than the node's key.</p>\n<p>The right subtree of a node contains only nodes with keys greater than the node's key.</p>\n<p>Both the left and right subtrees must also be binary search trees.</p>\n<p>Note: This question is the same as 1038: https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def convert_bst_to_greater_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]",
        "output": "[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]"
      },
      {
        "input": "root = [0,null,1]",
        "output": "[1,null,1]"
      },
      {
        "input": "root = [1,0,2]",
        "output": "[3,3,2]"
      },
      {
        "input": "root = [3,2,4,1]",
        "output": "[7,9,4,10]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 104].",
      "-104 <= Node.val <= 104",
      "All the values in the tree are unique.",
      "root is guaranteed to be a valid binary search tree."
    ]
  },
  {
    "questionId": 539,
    "title": "Minimum Time Difference",
    "titleSlug": "minimum-time-difference",
    "content": "<p>Given a list of 24-hour clock time points in \"HH:MM\" format, return the minimum minutes difference between any two time-points in the list.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_time_difference(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "timePoints = [\"23:59\",\"00:00\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"00:00\",\"23:59\",\"00:00\"]",
        "output": "0"
      }
    ],
    "constraints": [
      "2 <= timePoints <= 2 * 104",
      "timePoints[i] is in the format \"HH:MM\"."
    ]
  },
  {
    "questionId": 540,
    "title": "Single Element in a Sorted Array",
    "titleSlug": "single-element-in-a-sorted-array",
    "content": "<p>You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.</p>\n<p>Follow up: Your solution should run in O(log n) time and O(1) space.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def single_element_in_a_sorted_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,1,2,3,3,4,4,8,8]",
        "output": "2"
      },
      {
        "input": "nums = [3,3,7,7,10,11,11]",
        "output": "10"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^5",
      "0 <= nums[i] <= 10^5"
    ]
  },
  {
    "questionId": 541,
    "title": "Reverse String II",
    "titleSlug": "reverse-string-ii",
    "content": "<p>Given a string `s` and an integer `k`, reverse the first `k` characters for every `2k` characters counting from the start of the string.</p>\n<p>If there are fewer than `k` characters left, reverse all of them. If there are less than `2k` but greater than or equal to `k` characters, then reverse the first `k` characters and left the other as original.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def reverse_string_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"abcdefg\", k = 2",
        "output": "\"bacdfeg\""
      },
      {
        "input": "s = \"abcd\", k = 2",
        "output": "\"bacd\""
      }
    ],
    "constraints": [
      "1 <= s.length <= 104",
      "s consists of only lowercase English letters.",
      "1 <= k <= 104"
    ]
  },
  {
    "questionId": 543,
    "title": "Diameter of Binary Tree",
    "titleSlug": "diameter-of-binary-tree",
    "content": "<p>Given the `root` of a binary tree, return the length of the diameter of the tree.</p>\n<p>The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the `root`.</p>\n<p>The length of a path between two nodes is represented by the number of edges between them.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def diameter_of_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2,3,4,5]",
        "output": "3",
        "explanation": "3is the length of the path [4,2,1,3] or [5,2,1,3]."
      },
      {
        "input": "root = [1,2]",
        "output": "1"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 104].",
      "-100 <= Node.val <= 100"
    ]
  },
  {
    "questionId": 545,
    "title": "Boundary of Binary Tree",
    "titleSlug": "boundary-of-binary-tree",
    "content": "<p>The boundary of a binary tree is the concatenation of the root, the left boundary, the leaves ordered from left-to-right, and the reverse order of the right boundary.</p>\n<p>The left boundary is the set of nodes defined by the following:\nThe root node's left child is in the left boundary. If the root does not have a left child, then the left boundary is empty.</p>\n<p>If a node in the left boundary and has a left child, then the left child is in the left boundary.</p>\n<p>If a node is in the left boundary, has no left child, but has a right child, then the right child is in the left boundary.</p>\n<p>The leftmost leaf is not in the left boundary.</p>\n<p>The right boundary is similar to the left boundary, except it is the right side of the root's right subtree. Again, the leaf is not part of the right boundary, and the right boundary is empty if the root does not have a right child.</p>\n<p>The leaves are nodes that do not have any children. For this problem, the root is not a leaf.</p>\n<p>Given the `root` of a binary tree, return the values of its boundary.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def boundary_of_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,null,2,3,4]",
        "output": "[1,3,4,2]",
        "explanation": "- The left boundary is empty because the root does not have a left child."
      },
      {
        "input": "root = [1,2,3,4,5,6,null,null,null,7,8,9,10]",
        "output": "[1,2,4,7,8,9,10,6,3]",
        "explanation": "- The left boundary follows the path starting from the root's left child 2 -> 4."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 104].",
      "-1000 <= Node.val <= 1000"
    ]
  },
  {
    "questionId": 547,
    "title": "Number of Provinces",
    "titleSlug": "number-of-provinces",
    "content": "<p>There are `n` cities. Some of them are connected, while some are not. If city `a` is connected directly with city `b`, and city `b` is connected directly with city `c`, then city `a` is connected indirectly with city `c`.</p>\n<p>A province is a group of directly or indirectly connected cities and no other cities outside of the group.</p>\n<p>You are given an `n x n` matrix `isConnected` where `isConnected[i][j] = 1` if the `ith` city and the `jth` city are directly connected, and `isConnected[i][j] = 0` otherwise.</p>\n<p>Return the total number of provinces.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_provinces(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "isConnected = [[1,1,0],[1,1,0],[0,0,1]]",
        "output": "2"
      },
      {
        "input": "isConnected = [[1,0,0],[0,1,0],[0,0,1]]",
        "output": "3"
      }
    ],
    "constraints": [
      "1 <= n <= 200",
      "n == isConnected.length",
      "n == isConnected[i].length",
      "isConnected[i][j] is 1 or 0.",
      "isConnected[i][i] == 1",
      "isConnected[i][j] == isConnected[j][i]"
    ]
  },
  {
    "questionId": 549,
    "title": "Binary Tree Longest Consecutive Sequence II",
    "titleSlug": "binary-tree-longest-consecutive-sequence-ii",
    "content": "<p>Given the `root` of a binary tree, return the length of the longest consecutive path in the tree.</p>\n<p>This path can be either increasing or decreasing.</p>\n<p>For example, `[1,2,3,4]` and `[4,3,2,1]` are both considered valid, but the path `[1,2,4,3]` is not valid.</p>\n<p>On the other hand, the path can be in the child-Parent-child order, where not necessarily be parent-child order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def binary_tree_longest_consecutive_sequence_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2,3]",
        "output": "2",
        "explanation": "The longest consecutive path is [1, 2] or [2, 1]."
      },
      {
        "input": "root = [2,1,3]",
        "output": "3",
        "explanation": "The longest consecutive path is [1, 2, 3] or [3, 2, 1]."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 3 * 104].",
      "-3 * 104 <= Node.val <= 3 * 104"
    ]
  },
  {
    "questionId": 551,
    "title": "Student Attendance Record I",
    "titleSlug": "student-attendance-record-i",
    "content": "<p>You are given a string `s` representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:\n`'A'`: Absent.</p>\n<p>`'L'`: Late.</p>\n<p>`'P'`: Present.</p>\n<p>The student is eligible for an attendance award if they meet both of the following criteria:\nThe student was absent (`'A'`) for strictly fewer than 2 days total.</p>\n<p>The student was never late (`'L'`) for 3 or more consecutive days.</p>\n<p>Return `true` if the student is eligible for an attendance award, or `false` otherwise.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def student_attendance_record_i(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"PPALLP\"",
        "output": "true",
        "explanation": "The student has fewer than 2 absences and was never late 3 or more consecutive days."
      },
      {
        "input": "s = \"PPALLL\"",
        "output": "false",
        "explanation": "The student was late 3 consecutive days in the last 3 days, so is not eligible for the award."
      }
    ],
    "constraints": [
      "1 <= s.length <= 1000",
      "s[i] is either 'A', 'L', or 'P'."
    ]
  },
  {
    "questionId": 556,
    "title": "Next Greater Element III",
    "titleSlug": "next-greater-element-iii",
    "content": "<p>Given a positive integer `n`, find the smallest integer which has exactly the same digits existing in the integer `n` and is greater in value than `n`. If no such positive integer exists, return `-1`.</p>\n<p>Note that the returned integer should fit in 32-bit integer, if there is a valid answer but it does not fit in 32-bit integer, return `-1`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def next_greater_element_iii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 12",
        "output": "21"
      },
      {
        "input": "n = 21",
        "output": "-1"
      }
    ],
    "constraints": [
      "1 <= n <= 231 - 1"
    ]
  },
  {
    "questionId": 557,
    "title": "Reverse Words in a String III",
    "titleSlug": "reverse-words-in-a-string-iii",
    "content": "<p>Given a string `s`, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def reverse_words_in_a_string_iii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"Let's take LeetCode contest\"",
        "output": "\"s'teL ekat edoCteeL tsetnoc\""
      },
      {
        "input": "s = \"God Ding\"",
        "output": "\"doG gniD\""
      }
    ],
    "constraints": [
      "1 <= s.length <= 5 * 104",
      "s contains printable ASCII characters.",
      "s does not contain any leading or trailing spaces.",
      "There is at least one word in s.",
      "All the words in s are separated by a single space."
    ]
  },
  {
    "questionId": 558,
    "title": "Logical OR of Two Binary Grids Represented as Quad-Trees",
    "titleSlug": "logical-or-of-two-binary-grids-represented-as-quad-trees",
    "content": "<p>A Binary Matrix is a matrix in which all the elements are either 0 or 1.</p>\n<p>Given `quadTree1` and `quadTree2`. `quadTree1` represents a `n * n` binary matrix and `quadTree2` represents another `n * n` binary matrix. \nReturn a Quad-Tree representing the `n * n` binary matrix which is the result of logical bitwise OR of the two binary matrixes represented by `quadTree1` and `quadTree2`.</p>\n<p>Notice that you can assign the value of a node to True or False when `isLeaf` is False, and both are accepted in the answer.</p>\n<p>A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\n`val`: True if the node represents a grid of 1's or False if the node represents a grid of 0's. \n`isLeaf`: True if the node is leaf node on the tree or False if the node has the four children.</p>\n<p>class Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n}\nWe can construct a Quad-Tree from a two-dimensional area using the following steps:\nIf the current grid has the same value (i.e all `1's` or all `0's`) set `isLeaf` True and set `val` to the value of the grid and set the four children to Null and stop.</p>\n<p>If the current grid has different values, set `isLeaf` to False and set `val` to any value and divide the current grid into four sub-grids as shown in the photo.</p>\n<p>Recurse for each of the children with the proper sub-grid.</p>\n<p>If you want to know more about the Quad-Tree, you can refer to the wiki.</p>\n<p>Quad-Tree format:\nThe input/output represents the serialized format of a Quad-Tree using level order traversal, where `null` signifies a path terminator where no node exists below.</p>\n<p>It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list `[isLeaf, val]`.</p>\n<p>If the value of `isLeaf` or `val` is True we represent it as 1 in the list `[isLeaf, val]` and if the value of `isLeaf` or `val` is False we represent it as 0.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def logical_or_of_two_binary_grids_represented_as_quad_trees(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]]",
        "output": "[[0,0],[1,1],[1,1],[1,1],[1,0]]",
        "explanation": "quadTree1 and quadTree2 are shown above. You can see the binary matrix which is represented by each Quad-Tree."
      },
      {
        "input": "quadTree1 = [[1,0]]",
        "output": "[[1,0]]",
        "explanation": "Each tree represents a binary matrix of size 1*1. Each matrix contains only zero."
      },
      {
        "input": "quadTree1 = [[0,0],[1,0],[1,0],[1,1],[1,1]]",
        "output": "[[1,1]]"
      },
      {
        "input": "quadTree1 = [[0,0],[1,1],[1,0],[1,1],[1,1]]",
        "output": "[[0,0],[1,1],[0,1],[1,1],[1,1],null,null,null,null,[1,1],[1,0],[1,0],[1,1]]"
      },
      {
        "input": "quadTree1 = [[0,1],[1,0],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]",
        "output": "[[0,0],[0,1],[0,1],[1,1],[1,0],[1,0],[1,0],[1,1],[1,1],[1,0],[1,0],[1,1],[1,1]]"
      }
    ],
    "constraints": [
      "quadTree1 and quadTree2 are both valid Quad-Trees each representing a n * n grid.",
      "n == 2^x where 0 <= x <= 9."
    ]
  },
  {
    "questionId": 559,
    "title": "Maximum Depth of N-ary Tree",
    "titleSlug": "maximum-depth-of-n-ary-tree",
    "content": "<p>Given a n-ary tree, find its maximum depth.</p>\n<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>\n<p>Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_depth_of_n_ary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,null,3,2,4,null,5,6]",
        "output": "3"
      },
      {
        "input": "root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
        "output": "5"
      }
    ],
    "constraints": [
      "The depth of the n-ary tree is less than or equal to 1000.",
      "The total number of nodes is between [0, 104]."
    ]
  },
  {
    "questionId": 560,
    "title": "Subarray Sum Equals K",
    "titleSlug": "subarray-sum-equals-k",
    "content": "<p>Given an array of integers `nums` and an integer `k`, return the total number of continuous subarrays whose sum equals to `k`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def subarray_sum_equals_k(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,1,1], k = 2",
        "output": "2"
      },
      {
        "input": "nums = [1,2,3], k = 3",
        "output": "2"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 2 * 104",
      "-1000 <= nums[i] <= 1000",
      "-107 <= k <= 107"
    ]
  },
  {
    "questionId": 561,
    "title": "Array Partition I",
    "titleSlug": "array-partition-i",
    "content": "<p>Given an integer array `nums` of `2n` integers, group these integers into `n` pairs `(a1, b1), (a2, b2), ..., (an, bn)` such that the sum of `min(ai, bi)` for all `i` is maximized. Return the maximized sum.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def array_partition_i(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,4,3,2]",
        "output": "4",
        "explanation": "All possible pairings (ignoring the ordering of elements) are:"
      },
      {
        "input": "nums = [6,2,6,5,1,2]",
        "output": "9",
        "explanation": "The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9."
      }
    ],
    "constraints": [
      "1 <= n <= 104",
      "nums.length == 2 * n",
      "-104 <= nums[i] <= 104"
    ]
  },
  {
    "questionId": 563,
    "title": "Binary Tree Tilt",
    "titleSlug": "binary-tree-tilt",
    "content": "<p>Given the `root` of a binary tree, return the sum of every tree node's tilt.</p>\n<p>The tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. If a node does not have a left child, then the sum of the left subtree node values is treated as `0`. The rule is similar if there the node does not have a right child.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def binary_tree_tilt(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2,3]",
        "output": "1",
        "explanation": "Tilt of node 2 : |0-0| = 0 (no children)"
      },
      {
        "input": "root = [4,2,9,3,5,null,7]",
        "output": "15",
        "explanation": "Tilt of node 3 : |0-0| = 0 (no children)"
      },
      {
        "input": "root = [21,7,14,1,1,2,2,3,3]",
        "output": "9"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 104].",
      "-1000 <= Node.val <= 1000"
    ]
  },
  {
    "questionId": 567,
    "title": "Permutation in String",
    "titleSlug": "permutation-in-string",
    "content": "<p>Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def permutation_in_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s1 = \"ab\" s2 = \"eidbaooo\"",
        "output": "True",
        "explanation": "s2 contains one permutation of s1 (\"ba\")."
      },
      {
        "input": "s1= \"ab\" s2 = \"eidboaoo\"",
        "output": "False"
      }
    ],
    "constraints": [
      "The input strings only contain lower case letters.",
      "The length of both given strings is in range [1, 10,000]."
    ]
  },
  {
    "questionId": 575,
    "title": "Distribute Candies",
    "titleSlug": "distribute-candies",
    "content": "<p>Alice has `n` candies, where the `ith` candy is of type `candyType[i]`. Alice noticed that she started to gain weight, so she visited a doctor.</p>\n<p>The doctor advised Alice to only eat `n / 2` of the candies she has (`n` is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.</p>\n<p>Given the integer array `candyType` of length `n`, return the maximum number of different types of candies she can eat if she only eats `n / 2` of them.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def distribute_candies(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "candyType = [1,1,2,2,3,3]",
        "output": "3",
        "explanation": "Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type."
      },
      {
        "input": "candyType = [1,1,2,3]",
        "output": "2",
        "explanation": "Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types."
      },
      {
        "input": "candyType = [6,6,6,6]",
        "output": "1",
        "explanation": "Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type."
      }
    ],
    "constraints": [
      "n == candyType.length",
      "2 <= n <= 104",
      "n is even.",
      "-105 <= candyType[i] <= 105"
    ]
  },
  {
    "questionId": 581,
    "title": "Shortest Unsorted Continuous Subarray",
    "titleSlug": "shortest-unsorted-continuous-subarray",
    "content": "<p>Given an integer array `nums`, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order.</p>\n<p>Return the shortest such subarray and output its length.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def shortest_unsorted_continuous_subarray(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [2,6,4,8,10,9,15]",
        "output": "5",
        "explanation": "You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order."
      },
      {
        "input": "nums = [1,2,3,4]",
        "output": "0"
      },
      {
        "input": "nums = [1]",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 104",
      "-105 <= nums[i] <= 105",
      "Follow up: Can you solve it in O(n) time complexity?"
    ]
  },
  {
    "questionId": 582,
    "title": "Kill Process",
    "titleSlug": "kill-process",
    "content": "<p>You have `n` processes forming a rooted tree structure. You are given two integer arrays `pid` and `ppid`, where `pid[i]` is the ID of the `ith` process and `ppid[i]` is the ID of the `ith` process's parent process.</p>\n<p>Each process has only one parent process but may have multiple children processes. Only one process has `ppid[i] = 0`, which means this process has no parent process (the root of the tree).</p>\n<p>When a process is killed, all of its children processes will also be killed.</p>\n<p>Given an integer `kill` representing the ID of a process you want to kill, return a list of the IDs of the processes that will be killed. You may return the answer in any order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def kill_process(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "pid = [1,3,10,5], ppid = [3,0,5,3], kill = 5",
        "output": "[5,10]",
        "explanation": "The processes colored in red are the processes that should be killed."
      },
      {
        "input": "pid = [1], ppid = [0], kill = 1",
        "output": "[1]"
      }
    ],
    "constraints": [
      "n == pid.length",
      "n == ppid.length",
      "1 <= n <= 5 * 104",
      "1 <= pid[i] <= 5 * 104",
      "0 <= ppid[i] <= 5 * 104",
      "Only one process has no parent.",
      "All the values of pid are unique.",
      "kill is guaranteed to be in pid."
    ]
  },
  {
    "questionId": 583,
    "title": "Delete Operation for Two Strings",
    "titleSlug": "delete-operation-for-two-strings",
    "content": "<p>Given two strings `word1` and `word2`, return the minimum number of steps required to make `word1` and `word2` the same.</p>\n<p>In one step, you can delete exactly one character in either string.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def delete_operation_for_two_strings(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "word1 = \"sea\", word2 = \"eat\"",
        "output": "2",
        "explanation": "You need one step to make \"sea\" to \"ea\" and another step to make \"eat\" to \"ea\"."
      },
      {
        "input": "word1 = \"leetcode\", word2 = \"etco\"",
        "output": "4"
      }
    ],
    "constraints": [
      "1 <= word1.length, word2.length <= 500",
      "word1 and word2 consist of only lowercase English letters."
    ]
  },
  {
    "questionId": 589,
    "title": "N-ary Tree Preorder Traversal",
    "titleSlug": "n-ary-tree-preorder-traversal",
    "content": "<p>Given the `root` of an n-ary tree, return the preorder traversal of its nodes' values.</p>\n<p>Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def n_ary_tree_preorder_traversal(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,null,3,2,4,null,5,6]",
        "output": "[1,3,5,6,2,4]"
      },
      {
        "input": "root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
        "output": "[1,2,3,6,7,11,14,4,8,12,5,9,13,10]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 104].",
      "0 <= Node.val <= 104",
      "The height of the n-ary tree is less than or equal to 1000.",
      "Follow up: Recursive solution is trivial, could you do it iteratively?"
    ]
  },
  {
    "questionId": 590,
    "title": "N-ary Tree Postorder Traversal",
    "titleSlug": "n-ary-tree-postorder-traversal",
    "content": "<p>Given the `root` of an n-ary tree, return the postorder traversal of its nodes' values.</p>\n<p>Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def n_ary_tree_postorder_traversal(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,null,3,2,4,null,5,6]",
        "output": "[5,6,3,2,4,1]"
      },
      {
        "input": "root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
        "output": "[2,6,14,11,7,3,12,8,4,13,9,10,5,1]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 104].",
      "0 <= Node.val <= 104",
      "The height of the n-ary tree is less than or equal to 1000.",
      "Follow up: Recursive solution is trivial, could you do it iteratively?"
    ]
  },
  {
    "questionId": 593,
    "title": "Valid Square",
    "titleSlug": "valid-square",
    "content": "<p>Given the coordinates of four points in 2D space `p1`, `p2`, `p3` and `p4`, return `true` if the four points construct a square.</p>\n<p>The coordinate of a point `pi` is represented as `[xi, yi]`. The input is not given in any order.</p>\n<p>A valid square has four equal sides with positive length and four equal angles (90-degree angles).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def valid_square(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]",
        "output": "true"
      },
      {
        "input": "p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]",
        "output": "false"
      },
      {
        "input": "p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]",
        "output": "true"
      }
    ],
    "constraints": [
      "p1.length == p2.length == p3.length == p4.length == 2",
      "-104 <= xi, yi <= 104"
    ]
  },
  {
    "questionId": 594,
    "title": "Longest Harmonious Subsequence",
    "titleSlug": "longest-harmonious-subsequence",
    "content": "<p>We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly `1`.</p>\n<p>Given an integer array `nums`, return the length of its longest harmonious subsequence among all its possible subsequences.</p>\n<p>A subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_harmonious_subsequence(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,3,2,2,5,2,3,7]",
        "output": "5",
        "explanation": "The longest harmonious subsequence is [3,2,2,2,3]."
      },
      {
        "input": "nums = [1,2,3,4]",
        "output": "2"
      },
      {
        "input": "nums = [1,1,1,1]",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 2 * 104",
      "-109 <= nums[i] <= 109"
    ]
  },
  {
    "questionId": 598,
    "title": "Range Addition II",
    "titleSlug": "range-addition-ii",
    "content": "<p>You are given an `m x n` matrix `M` initialized with all `0`'s and an array of operations `ops`, where `ops[i] = [ai, bi]` means `M[x][y]` should be incremented by one for all `0 <= x < ai` and `0 <= y < bi`.</p>\n<p>Count and return the number of maximum integers in the matrix after performing all the operations.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def range_addition_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "m = 3, n = 3, ops = [[2,2],[3,3]]",
        "output": "4",
        "explanation": "The maximum integer in M is 2, and there are four of it in M. So return 4."
      },
      {
        "input": "m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]",
        "output": "4"
      },
      {
        "input": "m = 3, n = 3, ops = []",
        "output": "9"
      }
    ],
    "constraints": [
      "1 <= m, n <= 4 * 104",
      "1 <= ops.length <= 104",
      "ops[i].length == 2",
      "1 <= ai <= m",
      "1 <= bi <= n"
    ]
  },
  {
    "questionId": 599,
    "title": "Minimum Index Sum of Two Lists",
    "titleSlug": "minimum-index-sum-of-two-lists",
    "content": "<p>Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.</p>\n<p>You need to help them find out their common interest with the least list index sum. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_index_sum_of_two_lists(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"Piatti\",\"The Grill at Torrey Pines\",\"Hungry Hunter Steakhouse\",\"Shogun\"]",
        "output": "[\"Shogun\"]",
        "explanation": "The only restaurant they both like is \"Shogun\"."
      },
      {
        "input": "list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KFC\",\"Shogun\",\"Burger King\"]",
        "output": "[\"Shogun\"]",
        "explanation": "The restaurant they both like and have the least index sum is \"Shogun\" with index sum 1 (0+1)."
      },
      {
        "input": "list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KFC\",\"Burger King\",\"Tapioca Express\",\"Shogun\"]",
        "output": "[\"KFC\",\"Burger King\",\"Tapioca Express\",\"Shogun\"]"
      },
      {
        "input": "list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KNN\",\"KFC\",\"Burger King\",\"Tapioca Express\",\"Shogun\"]",
        "output": "[\"KFC\",\"Burger King\",\"Tapioca Express\",\"Shogun\"]"
      },
      {
        "input": "list1 = [\"KFC\"], list2 = [\"KFC\"]",
        "output": "[\"KFC\"]"
      }
    ],
    "constraints": [
      "1 <= list1.length, list2.length <= 1000",
      "1 <= list1[i].length, list2[i].length <= 30",
      "list1[i] and list2[i] consist of spaces ' ' and English letters.",
      "All the stings of list1 are unique.",
      "All the stings of list2 are unique."
    ]
  },
  {
    "questionId": 604,
    "title": "Design Compressed String Iterator",
    "titleSlug": "design-compressed-string-iterator",
    "content": "<p>Design and implement a data structure for a compressed string iterator. The given compressed string will be in the form of each letter followed by a positive integer representing the number of this letter existing in the original uncompressed string.</p>\n<p>Implement the StringIterator class:\n`next()` Returns the next character if the original string still has uncompressed characters, otherwise returns a white space.</p>\n<p>`hasNext()` Returns true if there is any letter needs to be uncompressed in the original string, otherwise returns `false`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def design_compressed_string_iterator(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= compressedString.length <= 1000",
      "compressedString consists of lower-case an upper-case English letters and digits.",
      "The number of a single character repetitions in compressedString is in the range [1, 10^9]",
      "At most 100 calls will be made to next and hasNext."
    ]
  },
  {
    "questionId": 605,
    "title": "Can Place Flowers",
    "titleSlug": "can-place-flowers",
    "content": "<p>You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.</p>\n<p>Given an integer array `flowerbed` containing `0`'s and `1`'s, where `0` means empty and `1` means not empty, and an integer `n`, return if `n` new flowers can be planted in the `flowerbed` without violating the no-adjacent-flowers rule.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def can_place_flowers(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "flowerbed = [1,0,0,0,1], n = 1",
        "output": "true"
      },
      {
        "input": "flowerbed = [1,0,0,0,1], n = 2",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= flowerbed.length <= 2 * 104",
      "flowerbed[i] is 0 or 1.",
      "There are no two adjacent flowers in flowerbed.",
      "0 <= n <= flowerbed.length"
    ]
  },
  {
    "questionId": 609,
    "title": "Find Duplicate File in System",
    "titleSlug": "find-duplicate-file-in-system",
    "content": "<p>Given a list `paths` of directory info, including the directory path, and all the files with contents in this directory, return all the duplicate files in the file system in terms of their paths. You may return the answer in any order.</p>\n<p>A group of duplicate files consists of at least two files that have the same content.</p>\n<p>A single directory info string in the input list has the following format:\n`\"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)\"`\nIt means there are `n` files `(f1.txt, f2.txt ... fn.txt)` with content `(f1_content, f2_content ... fn_content)` respectively in the directory \"`root/d1/d2/.../dm\"`. Note that `n >= 1` and `m >= 0`. If `m = 0`, it means the directory is just the root directory.</p>\n<p>The output is a list of groups of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:\n`\"directory_path/file_name.txt\"`</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_duplicate_file_in_system(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\",\"root 4.txt(efgh)\"]",
        "output": "[[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]"
      },
      {
        "input": "paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\"]",
        "output": "[[\"root/a/2.txt\",\"root/c/d/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]"
      }
    ],
    "constraints": [
      "1 <= paths.length <= 2 * 104",
      "1 <= paths[i].length <= 3000",
      "1 <= sum(paths[i].length) <= 5 * 105",
      "paths[i] consist of English letters, digits, '/', '.', '(', ')', and ' '.",
      "You may assume no files or directories share the same name in the same directory.",
      "You may assume each given directory info represents a unique directory. A single blank space separates the directory path and file info.",
      "Follow up:",
      "Imagine you are given a real file system, how will you search files? DFS or BFS?",
      "If the file content is very large (GB level), how will you modify your solution?",
      "If you can only read the file by 1kb each time, how will you modify your solution?",
      "What is the time complexity of your modified solution? What is the most time-consuming part and memory-consuming part of it? How to optimize?",
      "How to make sure the duplicated files you find are not false positive?"
    ]
  },
  {
    "questionId": 616,
    "title": "Add Bold Tag in String",
    "titleSlug": "add-bold-tag-in-string",
    "content": "<p>Given a string s and a list of strings dict, you need to add a closed pair of bold tag `<b>` and `</b>` to wrap the substrings in s that exist in dict. If two such substrings overlap, you need to wrap them together by only one pair of closed bold tag. Also, if two substrings wrapped by bold tags are consecutive, you need to combine them.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def add_bold_tag_in_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"abcxyz123\"",
        "output": "\"<b>abc</b>xyz<b>123</b>\""
      },
      {
        "input": "s = \"aaabbcc\"",
        "output": "\"<b>aaabbc</b>c\""
      }
    ],
    "constraints": [
      "The given dict won't contain duplicates, and its length won't exceed 100.",
      "All the strings in input have length in range [1, 1000].",
      "Note: This question is the same as 758: https://leetcode.com/problems/bold-words-in-string/"
    ]
  },
  {
    "questionId": 617,
    "title": "Merge Two Binary Trees",
    "titleSlug": "merge-two-binary-trees",
    "content": "<p>You are given two binary trees `root1` and `root2`.</p>\n<p>Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.</p>\n<p>Return the merged tree.</p>\n<p>Note: The merging process must start from the root nodes of both trees.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def merge_two_binary_trees(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]",
        "output": "[3,4,5,5,4,null,7]"
      },
      {
        "input": "root1 = [1], root2 = [1,2]",
        "output": "[2,2]"
      }
    ],
    "constraints": [
      "The number of nodes in both trees is in the range [0, 2000].",
      "-104 <= Node.val <= 104"
    ]
  },
  {
    "questionId": 621,
    "title": "Task Scheduler",
    "titleSlug": "task-scheduler",
    "content": "<p>Given a characters array `tasks`, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.</p>\n<p>However, there is a non-negative integer `n` that represents the cooldown period between two same tasks (the same letter in the array), that is that there must be at least `n` units of time between any two same tasks.</p>\n<p>Return the least number of units of times that the CPU will take to finish all the given tasks.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def task_scheduler(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2",
        "output": "8",
        "explanation": "A -> B -> idle -> A -> B -> idle -> A -> B"
      },
      {
        "input": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 0",
        "output": "6",
        "explanation": "On this case any permutation of size 6 would work since n = 0."
      },
      {
        "input": "tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2",
        "output": "16",
        "explanation": "One possible solution is"
      }
    ],
    "constraints": [
      "1 <= task.length <= 104",
      "tasks[i] is upper-case English letter.",
      "The integer n is in the range [0, 100]."
    ]
  },
  {
    "questionId": 622,
    "title": "Design Circular Queue",
    "titleSlug": "design-circular-queue",
    "content": "<p>Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called \"Ring Buffer\".</p>\n<p>One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.</p>\n<p>Implementation the `MyCircularQueue` class:\n`MyCircularQueue(k)` Initializes the object with the size of the queue to be `k`.</p>\n<p>`int Front()` Gets the front item from the queue. If the queue is empty, return `-1`.</p>\n<p>`int Rear()` Gets the last item from the queue. If the queue is empty, return `-1`.</p>\n<p>`boolean enQueue(int value)` Inserts an element into the circular queue. Return `true` if the operation is successful.</p>\n<p>`boolean deQueue()` Deletes an element from the circular queue. Return `true` if the operation is successful.</p>\n<p>`boolean isEmpty()` Checks whether the circular queue is empty or not.</p>\n<p>`boolean isFull()` Checks whether the circular queue is full or not.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def design_circular_queue(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= k <= 1000",
      "0 <= value <= 1000",
      "At most 3000 calls will be made to enQueue, deQueue, Front, Rear, isEmpty, and isFull.",
      "Follow up: Could you solve the problem without using the built-in queue?"
    ]
  },
  {
    "questionId": 623,
    "title": "Add One Row to Tree",
    "titleSlug": "add-one-row-to-tree",
    "content": "<p>Given the `root` of a binary tree and two integers `val` and `depth`, add a row of nodes with value `val` at the given depth `depth`.</p>\n<p>Note that the `root` node is at depth `1`.</p>\n<p>The adding rule is:\nGiven the integer `depth`, for each not null tree node `cur` at the depth `depth - 1`, create two tree nodes with value `val` as `cur`'s left subtree root and right subtree root.</p>\n<p>`cur`'s original left subtree should be the left subtree of the new left subtree root.</p>\n<p>`cur`'s original right subtree should be the right subtree of the new right subtree root.</p>\n<p>If `depth == 1` that means there is no depth `depth - 1` at all, then create a tree node with value `val` as the new root of the whole original tree, and the original tree is the new root's left subtree.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def add_one_row_to_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [4,2,6,3,1,5], val = 1, depth = 2",
        "output": "[4,1,1,2,null,null,6,3,1,5]"
      },
      {
        "input": "root = [4,2,null,3,1], val = 1, depth = 3",
        "output": "[4,2,null,1,1,3,null,null,1]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 104].",
      "The depth of the tree is in the range [1, 104].",
      "-100 <= Node.val <= 100",
      "-105 <= val <= 105",
      "1 <= depth <= the depth of tree + 1"
    ]
  },
  {
    "questionId": 624,
    "title": "Maximum Distance in Arrays",
    "titleSlug": "maximum-distance-in-arrays",
    "content": "<p>You are given `m` `arrays`, where each array is sorted in ascending order.</p>\n<p>You can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers `a` and `b` to be their absolute difference `|a - b|`.</p>\n<p>Return the maximum distance.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_distance_in_arrays(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arrays = [[1,2,3],[4,5],[1,2,3]]",
        "output": "4",
        "explanation": "One way to reach the maximum distance 4 is to pick 1 in the first or third array and pick 5 in the second array."
      },
      {
        "input": "arrays = [[1],[1]]",
        "output": "0"
      },
      {
        "input": "arrays = [[1],[2]]",
        "output": "1"
      },
      {
        "input": "arrays = [[1,4],[0,5]]",
        "output": "4"
      }
    ],
    "constraints": [
      "m == arrays.length",
      "2 <= m <= 105",
      "1 <= arrays[i].length <= 500",
      "-104 <= arrays[i][j] <= 104",
      "arrays[i] is sorted in ascending order.",
      "There will be at most 105 integers in all the arrays."
    ]
  },
  {
    "questionId": 628,
    "title": "Maximum Product of Three Numbers",
    "titleSlug": "maximum-product-of-three-numbers",
    "content": "<p>Given an integer array `nums`, find three numbers whose product is maximum and return the maximum product.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_product_of_three_numbers(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3]",
        "output": "6"
      },
      {
        "input": "nums = [1,2,3,4]",
        "output": "24"
      },
      {
        "input": "nums = [-1,-2,-3]",
        "output": "-6"
      }
    ],
    "constraints": [
      "3 <= nums.length <= 104",
      "-1000 <= nums[i] <= 1000"
    ]
  },
  {
    "questionId": 633,
    "title": "Sum of Square Numbers",
    "titleSlug": "sum-of-square-numbers",
    "content": "<p>Given a non-negative integer `c`, decide whether there're two integers `a` and `b` such that `a2 + b2 = c`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sum_of_square_numbers(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "c = 5",
        "output": "true",
        "explanation": "1 * 1 + 2 * 2 = 5"
      },
      {
        "input": "c = 3",
        "output": "false"
      },
      {
        "input": "c = 4",
        "output": "true"
      },
      {
        "input": "c = 2",
        "output": "true"
      },
      {
        "input": "c = 1",
        "output": "true"
      }
    ],
    "constraints": [
      "0 <= c <= 231 - 1"
    ]
  },
  {
    "questionId": 635,
    "title": "Design Log Storage System",
    "titleSlug": "design-log-storage-system",
    "content": "<p>You are given several logs, where each log contains a unique ID and timestamp. Timestamp is a string that has the following format: `Year:Month:Day:Hour:Minute:Second`, for example, `2017:01:01:23:59:59`. All domains are zero-padded decimal numbers.</p>\n<p>Implement the `LogSystem` class:\n`LogSystem()` Initializes the `LogSystem` object.</p>\n<p>`void put(int id, string timestamp)` Stores the given log `(id, timestamp)` in your storage system.</p>\n<p>`int[] retrieve(string start, string end, string granularity)` Returns the IDs of the logs whose timestamps are within the range from `start` to `end` inclusive. `start` and `end` all have the same format as `timestamp`, and `granularity` means how precise the range should be (i.e. to the exact `Day`, `Minute`, etc.). For example, `start = \"2017:01:01:23:59:59\"`, `end = \"2017:01:02:23:59:59\"`, and `granularity = \"Day\"` means that we need to find the logs within the inclusive range from Jan. 1st 2017 to Jan. 2nd 2017, and the `Hour`, `Minute`, and `Second` for each log entry can be ignored.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def design_log_storage_system(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= id <= 500",
      "2000 <= Year <= 2017",
      "1 <= Month <= 12",
      "1 <= Day <= 31",
      "0 <= Hour <= 23",
      "0 <= Minute, Second <= 59",
      "granularity is one of the values [\"Year\", \"Month\", \"Day\", \"Hour\", \"Minute\", \"Second\"].",
      "At most 500 calls will be made to put and retrieve."
    ]
  },
  {
    "questionId": 636,
    "title": "Exclusive Time of Functions",
    "titleSlug": "exclusive-time-of-functions",
    "content": "<p>On a single-threaded CPU, we execute a program containing `n` functions. Each function has a unique ID between `0` and `n-1`.</p>\n<p>Function calls are stored in a call stack: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is the current function being executed. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp.</p>\n<p>You are given a list `logs`, where `logs[i]` represents the `ith` log message formatted as a string `\"{function_id}:{\"start\" | \"end\"}:{timestamp}\"`. For example, `\"0:start:3\"` means a function call with function ID `0` started at the beginning of timestamp `3`, and `\"1:end:2\"` means a function call with function ID `1` ended at the end of timestamp `2`. Note that a function can be called multiple times, possibly recursively.</p>\n<p>A function's exclusive time is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for `2` time units and another call executing for `1` time unit, the exclusive time is `2 + 1 = 3`.</p>\n<p>Return the exclusive time of each function in an array, where the value at the `ith` index represents the exclusive time for the function with ID `i`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def exclusive_time_of_functions(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 2, logs = [\"0:start:0\",\"1:start:2\",\"1:end:5\",\"0:end:6\"]",
        "output": "[3,4]",
        "explanation": "Function 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1."
      },
      {
        "input": "n = 1, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"0:start:6\",\"0:end:6\",\"0:end:7\"]",
        "output": "[8]",
        "explanation": "Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself."
      },
      {
        "input": "n = 2, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"1:start:6\",\"1:end:6\",\"0:end:7\"]",
        "output": "[7,1]",
        "explanation": "Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself."
      },
      {
        "input": "n = 2, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"1:start:7\",\"1:end:7\",\"0:end:8\"]",
        "output": "[8,1]"
      },
      {
        "input": "n = 1, logs = [\"0:start:0\",\"0:end:0\"]",
        "output": "[1]"
      }
    ],
    "constraints": [
      "1 <= n <= 100",
      "1 <= logs.length <= 500",
      "0 <= function_id < n",
      "0 <= timestamp <= 109",
      "No two start events will happen at the same timestamp.",
      "No two end events will happen at the same timestamp.",
      "Each function has an \"end\" log for each \"start\" log."
    ]
  },
  {
    "questionId": 637,
    "title": "Average of Levels in Binary Tree",
    "titleSlug": "average-of-levels-in-binary-tree",
    "content": "<p>Given the `root` of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within `10-5` of the actual answer will be accepted.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def average_of_levels_in_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [3,9,20,null,15,7]",
        "output": "[3.00000,14.50000,11.00000]",
        "explanation": "The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11."
      },
      {
        "input": "root = [3,9,20,15,7]",
        "output": "[3.00000,14.50000,11.00000]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 104].",
      "-231 <= Node.val <= 231 - 1"
    ]
  },
  {
    "questionId": 645,
    "title": "Set Mismatch",
    "titleSlug": "set-mismatch",
    "content": "<p>You have a set of integers `s`, which originally contains all the numbers from `1` to `n`. Unfortunately, due to some error, one of the numbers in `s` got duplicated to another number in the set, which results in repetition of one number and loss of another number.</p>\n<p>You are given an integer array `nums` representing the data status of this set after the error.</p>\n<p>Find the number that occurs twice and the number that is missing and return them in the form of an array.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def set_mismatch(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,2,4]",
        "output": "[2,3]"
      },
      {
        "input": "nums = [1,1]",
        "output": "[1,2]"
      }
    ],
    "constraints": [
      "2 <= nums.length <= 104",
      "1 <= nums[i] <= 104"
    ]
  },
  {
    "questionId": 648,
    "title": "Replace Words",
    "titleSlug": "replace-words",
    "content": "<p>In English, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word successor. For example, when the root `\"an\"` is followed by the successor word `\"other\"`, we can form a new word `\"another\"`.</p>\n<p>Given a `dictionary` consisting of many roots and a `sentence` consisting of words separated by spaces, replace all the successors in the sentence with the root forming it. If a successor can be replaced by more than one root, replace it with the root that has the shortest length.</p>\n<p>Return the `sentence` after the replacement.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def replace_words(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "dictionary = [\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"",
        "output": "\"the cat was rat by the bat\""
      },
      {
        "input": "dictionary = [\"a\",\"b\",\"c\"], sentence = \"aadsfasf absbs bbab cadsfafs\"",
        "output": "\"a a b c\""
      },
      {
        "input": "dictionary = [\"a\", \"aa\", \"aaa\", \"aaaa\"], sentence = \"a aa a aaaa aaa aaa aaa aaaaaa bbb baba ababa\"",
        "output": "\"a a a a a a a a bbb baba a\""
      },
      {
        "input": "dictionary = [\"catt\",\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"",
        "output": "\"the cat was rat by the bat\""
      },
      {
        "input": "dictionary = [\"ac\",\"ab\"], sentence = \"it is abnormal that this solution is accepted\"",
        "output": "\"it is ab that this solution is ac\""
      }
    ],
    "constraints": [
      "1 <= dictionary.length <= 1000",
      "1 <= dictionary[i].length <= 100",
      "dictionary[i] consists of only lower-case letters.",
      "1 <= sentence.length <= 10^6",
      "sentence consists of only lower-case letters and spaces.",
      "The number of words in sentence is in the range [1, 1000]",
      "The length of each word in sentence is in the range [1, 1000]",
      "Each two consecutive words in sentence will be separated by exactly one space.",
      "sentence does not have leading or trailing spaces."
    ]
  },
  {
    "questionId": 652,
    "title": "Find Duplicate Subtrees",
    "titleSlug": "find-duplicate-subtrees",
    "content": "<p>Given the `root` of a binary tree, return all duplicate subtrees.</p>\n<p>For each kind of duplicate subtrees, you only need to return the root node of any one of them.</p>\n<p>Two trees are duplicate if they have the same structure with the same node values.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_duplicate_subtrees(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2,3,4,null,2,4,null,null,4]",
        "output": "[[2,4],[4]]"
      },
      {
        "input": "root = [2,1,1]",
        "output": "[[1]]"
      },
      {
        "input": "root = [2,2,2,3,null,3,null]",
        "output": "[[2,3],[3]]"
      }
    ],
    "constraints": [
      "The number of the nodes in the tree will be in the range [1, 10^4]",
      "-200 <= Node.val <= 200"
    ]
  },
  {
    "questionId": 653,
    "title": "Two Sum IV - Input is a BST",
    "titleSlug": "two-sum-iv---input-is-a-bst",
    "content": "<p>Given the `root` of a Binary Search Tree and a target number `k`, return `true` if there exist two elements in the BST such that their sum is equal to the given target.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def two_sum_iv___input_is_a_bst(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [5,3,6,2,4,null,7], k = 9",
        "output": "true"
      },
      {
        "input": "root = [5,3,6,2,4,null,7], k = 28",
        "output": "false"
      },
      {
        "input": "root = [2,1,3], k = 4",
        "output": "true"
      },
      {
        "input": "root = [2,1,3], k = 1",
        "output": "false"
      },
      {
        "input": "root = [2,1,3], k = 3",
        "output": "true"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 104].",
      "-104 <= Node.val <= 104",
      "root is guaranteed to be a valid binary search tree.",
      "-105 <= k <= 105"
    ]
  },
  {
    "questionId": 654,
    "title": "Maximum Binary Tree",
    "titleSlug": "maximum-binary-tree",
    "content": "<p>You are given an integer array `nums` with no duplicates. A maximum binary tree can be built recursively from `nums` using the following algorithm:\nCreate a root node whose value is the maximum value in `nums`.</p>\n<p>Recursively build the left subtree on the subarray prefix to the left of the maximum value.</p>\n<p>Recursively build the right subtree on the subarray suffix to the right of the maximum value.</p>\n<p>Return the maximum binary tree built from `nums`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [3,2,1,6,0,5]",
        "output": "[6,3,5,null,2,0,null,null,1]",
        "explanation": "The recursive calls are as follow:"
      },
      {
        "input": "nums = [3,2,1]",
        "output": "[3,null,2,null,1]"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 1000",
      "0 <= nums[i] <= 1000",
      "All integers in nums are unique."
    ]
  },
  {
    "questionId": 657,
    "title": "Robot Return to Origin",
    "titleSlug": "robot-return-to-origin",
    "content": "<p>There is a robot starting at position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.</p>\n<p>The move sequence is represented by a string, and the character moves[i] represents its ith move. Valid moves are R (right), L (left), U (up), and D (down). If the robot returns to the origin after it finishes all of its moves, return true. Otherwise, return false.</p>\n<p>Note: The way that the robot is \"facing\" is irrelevant. \"R\" will always make the robot move to the right once, \"L\" will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def robot_return_to_origin(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "moves = \"UD\"",
        "output": "true",
        "explanation": "The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true."
      },
      {
        "input": "moves = \"LL\"",
        "output": "false",
        "explanation": "The robot moves left twice. It ends up two \"moves\" to the left of the origin. We return false because it is not at the origin at the end of its moves."
      },
      {
        "input": "moves = \"RRDD\"",
        "output": "false"
      },
      {
        "input": "moves = \"LDRRLRUULR\"",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= moves.length <= 2 * 104",
      "moves only contains the characters 'U', 'D', 'L' and 'R'."
    ]
  },
  {
    "questionId": 658,
    "title": "Find K Closest Elements",
    "titleSlug": "find-k-closest-elements",
    "content": "<p>Given a sorted integer array `arr`, two integers `k` and `x`, return the `k` closest integers to `x` in the array. The result should also be sorted in ascending order.</p>\n<p>An integer `a` is closer to `x` than an integer `b` if:\n`|a - x| < |b - x|`, or\n`|a - x| == |b - x|` and `a < b`</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_k_closest_elements(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [1,2,3,4,5], k = 4, x = 3",
        "output": "[1,2,3,4]"
      },
      {
        "input": "arr = [1,2,3,4,5], k = 4, x = -1",
        "output": "[1,2,3,4]"
      }
    ],
    "constraints": [
      "1 <= k <= arr.length",
      "1 <= arr.length <= 104",
      "arr is sorted in ascending order.",
      "-104 <= arr[i], x <= 104"
    ]
  },
  {
    "questionId": 659,
    "title": "Split Array into Consecutive Subsequences",
    "titleSlug": "split-array-into-consecutive-subsequences",
    "content": "<p>Given an integer array `nums` that is sorted in ascending order, return `true` if and only if you can split it into one or more subsequences such that each subsequence consists of consecutive integers and has a length of at least `3`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def split_array_into_consecutive_subsequences(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3,3,4,5]",
        "output": "true",
        "explanation": "You can split them into two consecutive subsequences :"
      },
      {
        "input": "nums = [1,2,3,3,4,4,5,5]",
        "output": "true",
        "explanation": "You can split them into two consecutive subsequences :"
      },
      {
        "input": "nums = [1,2,3,4,4,5]",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 104",
      "-1000 <= nums[i] <= 1000",
      "nums is sorted in an ascending order."
    ]
  },
  {
    "questionId": 662,
    "title": "Maximum Width of Binary Tree",
    "titleSlug": "maximum-width-of-binary-tree",
    "content": "<p>Given a binary tree, write a function to get the maximum width of the given tree. The maximum width of a tree is the maximum width among all levels.</p>\n<p>The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the `null` nodes between the end-nodes are also counted into the length calculation.</p>\n<p>It is guaranteed that the answer will in the range of 32-bit signed integer.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_width_of_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "1",
        "output": "4",
        "explanation": "The maximum width existing in the third level with the length 4 (5,3,null,9)."
      },
      {
        "input": "1",
        "output": "2",
        "explanation": "The maximum width existing in the third level with the length 2 (5,3)."
      },
      {
        "input": "1",
        "output": "2",
        "explanation": "The maximum width existing in the second level with the length 2 (3,2)."
      },
      {
        "input": "1",
        "output": "8",
        "explanation": "The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7)."
      }
    ],
    "constraints": [
      "The given binary tree will have between 1 and 3000 nodes."
    ]
  },
  {
    "questionId": 665,
    "title": "Non-decreasing Array",
    "titleSlug": "non-decreasing-array",
    "content": "<p>Given an array `nums` with `n` integers, your task is to check if it could become non-decreasing by modifying at most one element.</p>\n<p>We define an array is non-decreasing if `nums[i] <= nums[i + 1]` holds for every `i` (0-based) such that (`0 <= i <= n - 2`).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def non_decreasing_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [4,2,3]",
        "output": "true",
        "explanation": "You could modify the first `4` to `1` to get a non-decreasing array."
      },
      {
        "input": "nums = [4,2,1]",
        "output": "false",
        "explanation": "You can't get a non-decreasing array by modify at most one element."
      }
    ],
    "constraints": [
      "n == nums.length",
      "1 <= n <= 104",
      "-105 <= nums[i] <= 105"
    ]
  },
  {
    "questionId": 669,
    "title": "Trim a Binary Search Tree",
    "titleSlug": "trim-a-binary-search-tree",
    "content": "<p>Given the `root` of a binary search tree and the lowest and highest boundaries as `low` and `high`, trim the tree so that all its elements lies in `[low, high]`. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a unique answer.</p>\n<p>Return the root of the trimmed binary search tree. Note that the root may change depending on the given bounds.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def trim_a_binary_search_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,0,2], low = 1, high = 2",
        "output": "[1,null,2]"
      },
      {
        "input": "root = [3,0,4,null,2,null,null,1], low = 1, high = 3",
        "output": "[3,2,null,1]"
      },
      {
        "input": "root = [1], low = 1, high = 2",
        "output": "[1]"
      },
      {
        "input": "root = [1,null,2], low = 1, high = 3",
        "output": "[1,null,2]"
      },
      {
        "input": "root = [1,null,2], low = 2, high = 4",
        "output": "[2]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree in the range [1, 104].",
      "0 <= Node.val <= 104",
      "The value of each node in the tree is unique.",
      "root is guaranteed to be a valid binary search tree.",
      "0 <= low <= high <= 104"
    ]
  },
  {
    "questionId": 671,
    "title": "Second Minimum Node In a Binary Tree",
    "titleSlug": "second-minimum-node-in-a-binary-tree",
    "content": "<p>Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly `two` or `zero` sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property `root.val = min(root.left.val, root.right.val)` always holds.</p>\n<p>Given such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree.</p>\n<p>If no such second minimum value exists, output -1 instead.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def second_minimum_node_in_a_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [2,2,5,null,null,5,7]",
        "output": "5",
        "explanation": "The smallest value is 2, the second smallest value is 5."
      },
      {
        "input": "root = [2,2,2]",
        "output": "-1",
        "explanation": "The smallest value is 2, but there isn't any second smallest value."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 25].",
      "1 <= Node.val <= 231 - 1",
      "root.val == min(root.left.val, root.right.val) for each internal node of the tree."
    ]
  },
  {
    "questionId": 673,
    "title": "Number of Longest Increasing Subsequence",
    "titleSlug": "number-of-longest-increasing-subsequence",
    "content": "<p>Given an integer array `nums`, return the number of longest increasing subsequences.</p>\n<p>Notice that the sequence has to be strictly increasing.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_longest_increasing_subsequence(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,3,5,4,7]",
        "output": "2",
        "explanation": "The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7]."
      },
      {
        "input": "nums = [2,2,2,2,2]",
        "output": "5",
        "explanation": "The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 2000",
      "-106 <= nums[i] <= 106"
    ]
  },
  {
    "questionId": 674,
    "title": "Longest Continuous Increasing Subsequence",
    "titleSlug": "longest-continuous-increasing-subsequence",
    "content": "<p>Given an unsorted array of integers `nums`, return the length of the longest continuous increasing subsequence (i.e. subarray). The subsequence must be strictly increasing.</p>\n<p>A continuous increasing subsequence is defined by two indices `l` and `r` (`l < r`) such that it is `[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]` and for each `l <= i < r`, `nums[i] < nums[i + 1]`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_continuous_increasing_subsequence(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,3,5,4,7]",
        "output": "3",
        "explanation": "The longest continuous increasing subsequence is [1,3,5] with length 3."
      },
      {
        "input": "nums = [2,2,2,2,2]",
        "output": "1",
        "explanation": "The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly"
      }
    ],
    "constraints": [
      "0 <= nums.length <= 104",
      "-109 <= nums[i] <= 109"
    ]
  },
  {
    "questionId": 676,
    "title": "Implement Magic Dictionary",
    "titleSlug": "implement-magic-dictionary",
    "content": "<p>Design a data structure that is initialized with a list of different words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.</p>\n<p>Implement the `MagicDictionary` class:\n`MagicDictionary()` Initializes the object.</p>\n<p>`void buildDict(String[] dictionary)` Sets the data structure with an array of distinct strings `dictionary`.</p>\n<p>`bool search(String searchWord)` Returns `true` if you can change exactly one character in `searchWord` to match any string in the data structure, otherwise returns `false`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def implement_magic_dictionary(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= dictionary.length <= 100",
      "1 <= dictionary[i].length <= 100",
      "dictionary[i] consists of only lower-case English letters.",
      "All the strings in dictionary are distinct.",
      "1 <= searchWord.length <= 100",
      "searchWord consists of only lower-case English letters.",
      "buildDict will be called only once before search.",
      "At most 100 calls will be made to search."
    ]
  },
  {
    "questionId": 677,
    "title": "Map Sum Pairs",
    "titleSlug": "map-sum-pairs",
    "content": "<p>Implement the `MapSum` class:\n`MapSum()` Initializes the `MapSum` object.</p>\n<p>`void insert(String key, int val)` Inserts the `key-val` pair into the map. If the `key` already existed, the original `key-value` pair will be overridden to the new one.</p>\n<p>`int sum(string prefix)` Returns the sum of all the pairs' value whose `key` starts with the `prefix`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def map_sum_pairs(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= key.length, prefix.length <= 50",
      "key and prefix consist of only lowercase English letters.",
      "1 <= val <= 1000",
      "At most 50 calls will be made to insert and sum."
    ]
  },
  {
    "questionId": 678,
    "title": "Valid Parenthesis String",
    "titleSlug": "valid-parenthesis-string",
    "content": "<p>Given a string `s` containing only three types of characters: `'('`, `')'` and `'*'`, return `true` if `s` is valid.</p>\n<p>The following rules define a valid string:\nAny left parenthesis `'('` must have a corresponding right parenthesis `')'`.</p>\n<p>Any right parenthesis `')'` must have a corresponding left parenthesis `'('`.</p>\n<p>Left parenthesis `'('` must go before the corresponding right parenthesis `')'`.</p>\n<p>`'*'` could be treated as a single right parenthesis `')'` or a single left parenthesis `'('` or an empty string `\"\"`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def valid_parenthesis_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"()\"",
        "output": "true"
      },
      {
        "input": "s = \"(*)\"",
        "output": "true"
      },
      {
        "input": "s = \"(*))\"",
        "output": "true"
      }
    ],
    "constraints": [
      "1 <= s.length <= 100",
      "s[i] is '(', ')' or '*'."
    ]
  },
  {
    "questionId": 681,
    "title": "Next Closest Time",
    "titleSlug": "next-closest-time",
    "content": "<p>Given a `time` represented in the format `\"HH:MM\"`, form the next closest time by reusing the current digits. There is no limit on how many times a digit can be reused.</p>\n<p>You may assume the given input string is always valid. For example, `\"01:34\"`, `\"12:09\"` are all valid. `\"1:34\"`, `\"12:9\"` are all invalid.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def next_closest_time(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "time = \"19:34\"",
        "output": "\"19:39\"",
        "explanation": "The next closest time choosing from digits 1, 9, 3, 4, is 19:39, which occurs 5 minutes later."
      },
      {
        "input": "time = \"23:59\"",
        "output": "\"22:22\"",
        "explanation": "The next closest time choosing from digits 2, 3, 5, 9, is 22:22."
      }
    ],
    "constraints": [
      "time.length == 5",
      "time is a valid time in the form \"HH:MM\".",
      "0 <= HH < 24",
      "0 <= MM < 60"
    ]
  },
  {
    "questionId": 682,
    "title": "Baseball Game",
    "titleSlug": "baseball-game",
    "content": "<p>You are keeping score for a baseball game with strange rules. The game consists of several rounds, where the scores of past rounds may affect future rounds' scores.</p>\n<p>At the beginning of the game, you start with an empty record. You are given a list of strings `ops`, where `ops[i]` is the `ith` operation you must apply to the record and is one of the following:\nAn integer `x` - Record a new score of `x`.</p>\n<p>`\"+\"` - Record a new score that is the sum of the previous two scores. It is guaranteed there will always be two previous scores.</p>\n<p>`\"D\"` - Record a new score that is double the previous score. It is guaranteed there will always be a previous score.</p>\n<p>`\"C\"` - Invalidate the previous score, removing it from the record. It is guaranteed there will always be a previous score.</p>\n<p>Return the sum of all the scores on the record.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def baseball_game(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "ops = [\"5\",\"2\",\"C\",\"D\",\"+\"]",
        "output": "30",
        "explanation": "\"5\" - Add 5 to the record, record is now [5]."
      },
      {
        "input": "ops = [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]",
        "output": "27",
        "explanation": "\"5\" - Add 5 to the record, record is now [5]."
      },
      {
        "input": "ops = [\"1\"]",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= ops.length <= 1000",
      "ops[i] is \"C\", \"D\", \"+\", or a string representing an integer in the range [-3 * 104, 3 * 104].",
      "For operation \"+\", there will always be at least two previous scores on the record.",
      "For operations \"C\" and \"D\", there will always be at least one previous score on the record."
    ]
  },
  {
    "questionId": 686,
    "title": "Repeated String Match",
    "titleSlug": "repeated-string-match",
    "content": "<p>Given two strings `a` and `b`, return the minimum number of times you should repeat string `a` so that string `b` is a substring of it. If it is impossible for `b`\u200b\u200b\u200b\u200b\u200b\u200b to be a substring of `a` after repeating it, return `-1`.</p>\n<p>Notice: string `\"abc\"` repeated 0 times is `\"\"`,  repeated 1 time is `\"abc\"` and repeated 2 times is `\"abcabc\"`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def repeated_string_match(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "a = \"abcd\", b = \"cdabcdab\"",
        "output": "3",
        "explanation": "We return 3 because by repeating a three times \"abcdabcdabcd\", b is a substring of it."
      },
      {
        "input": "a = \"a\", b = \"aa\"",
        "output": "2"
      },
      {
        "input": "a = \"a\", b = \"a\"",
        "output": "1"
      },
      {
        "input": "a = \"abc\", b = \"wxyz\"",
        "output": "-1"
      }
    ],
    "constraints": [
      "1 <= a.length <= 104",
      "1 <= b.length <= 104",
      "a and b consist of lower-case English letters."
    ]
  },
  {
    "questionId": 687,
    "title": "Longest Univalue Path",
    "titleSlug": "longest-univalue-path",
    "content": "<p>Given the `root` of a binary tree, return the length of the longest path, where each node in the path has the same value. This path may or may not pass through the root.</p>\n<p>The length of the path between two nodes is represented by the number of edges between them.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_univalue_path(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [5,4,5,1,1,5]",
        "output": "2"
      },
      {
        "input": "root = [1,4,5,4,4,5]",
        "output": "2"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 104].",
      "-1000 <= Node.val <= 1000",
      "The depth of the tree will not exceed 1000."
    ]
  },
  {
    "questionId": 693,
    "title": "Binary Number with Alternating Bits",
    "titleSlug": "binary-number-with-alternating-bits",
    "content": "<p>Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def binary_number_with_alternating_bits(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 5",
        "output": "true",
        "explanation": "The binary representation of 5 is: 101"
      },
      {
        "input": "n = 7",
        "output": "false",
        "explanation": "The binary representation of 7 is: 111."
      },
      {
        "input": "n = 11",
        "output": "false",
        "explanation": "The binary representation of 11 is: 1011."
      },
      {
        "input": "n = 10",
        "output": "true",
        "explanation": "The binary representation of 10 is: 1010."
      },
      {
        "input": "n = 3",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= n <= 231 - 1"
    ]
  },
  {
    "questionId": 697,
    "title": "Degree of an Array",
    "titleSlug": "degree-of-an-array",
    "content": "<p>Given a non-empty array of non-negative integers `nums`, the degree of this array is defined as the maximum frequency of any one of its elements.</p>\n<p>Your task is to find the smallest possible length of a (contiguous) subarray of `nums`, that has the same degree as `nums`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def degree_of_an_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,2,3,1]",
        "output": "2",
        "explanation": "The input array has a degree of 2 because both elements 1 and 2 appear twice."
      },
      {
        "input": "nums = [1,2,2,3,1,4,2]",
        "output": "6",
        "explanation": "The degree is 3 because the element 2 is repeated 3 times."
      }
    ],
    "constraints": [
      "nums.length will be between 1 and 50,000.",
      "nums[i] will be an integer between 0 and 49,999."
    ]
  },
  {
    "questionId": 700,
    "title": "Search in a Binary Search Tree",
    "titleSlug": "search-in-a-binary-search-tree",
    "content": "<p>You are given the `root` of a binary search tree (BST) and an integer `val`.</p>\n<p>Find the node in the BST that the node's value equals `val` and return the subtree rooted with that node. If such a node does not exist, return `null`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def search_in_a_binary_search_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [4,2,7,1,3], val = 2",
        "output": "[2,1,3]"
      },
      {
        "input": "root = [4,2,7,1,3], val = 5",
        "output": "[]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 5000].",
      "1 <= Node.val <= 107",
      "root is a binary search tree.",
      "1 <= val <= 107"
    ]
  },
  {
    "questionId": 701,
    "title": "Insert into a Binary Search Tree",
    "titleSlug": "insert-into-a-binary-search-tree",
    "content": "<p>You are given the `root` node of a binary search tree (BST) and a `value` to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.</p>\n<p>Notice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def insert_into_a_binary_search_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [4,2,7,1,3], val = 5",
        "output": "[4,2,7,1,3,5]",
        "explanation": "Another accepted tree is:"
      },
      {
        "input": "root = [40,20,60,10,30,50,70], val = 25",
        "output": "[40,20,60,10,30,50,70,null,null,25]"
      },
      {
        "input": "root = [4,2,7,1,3,null,null,null,null,null,null], val = 5",
        "output": "[4,2,7,1,3,5]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree will be in the range [0, 104].",
      "-108 <= Node.val <= 108",
      "All the values Node.val are unique.",
      "-108 <= val <= 108",
      "It's guaranteed that val does not exist in the original BST."
    ]
  },
  {
    "questionId": 702,
    "title": "Search in a Sorted Array of Unknown Size",
    "titleSlug": "search-in-a-sorted-array-of-unknown-size",
    "content": "<p>Given an integer array sorted in ascending order, write a function to search `target` in `nums`.  If `target` exists, then return its index, otherwise return `-1`. However, the array size is unknown to you. You may only access the array using an `ArrayReader` interface, where `ArrayReader.get(k)` returns the element of the array at index `k` (0-indexed).</p>\n<p>You may assume all integers in the array are less than `10000`, and if you access the array out of bounds, `ArrayReader.get` will return `2147483647`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def search_in_a_sorted_array_of_unknown_size(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "`array` = [-1,0,3,5,9,12], `target` = 9",
        "output": "4",
        "explanation": "9 exists in `nums` and its index is 4"
      },
      {
        "input": "`array` = [-1,0,3,5,9,12], `target` = 2",
        "output": "-1",
        "explanation": "2 does not exist in `nums` so return -1"
      }
    ],
    "constraints": [
      "You may assume that all elements in the array are unique.",
      "The value of each element in the array will be in the range [-9999, 9999].",
      "The length of the array will be in the range [1, 10^4]."
    ]
  },
  {
    "questionId": 703,
    "title": "Kth Largest Element in a Stream",
    "titleSlug": "kth-largest-element-in-a-stream",
    "content": "<p>Design a class to find the `kth` largest element in a stream. Note that it is the `kth` largest element in the sorted order, not the `kth` distinct element.</p>\n<p>Implement `KthLargest` class:\n`KthLargest(int k, int[] nums)` Initializes the object with the integer `k` and the stream of integers `nums`.</p>\n<p>`int add(int val)` Returns the element representing the `kth` largest element in the stream.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def kth_largest_element_in_a_stream(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= k <= 104",
      "0 <= nums.length <= 104",
      "-104 <= nums[i] <= 104",
      "-104 <= val <= 104",
      "At most 104 calls will be made to add.",
      "It is guaranteed that there will be at least k elements in the array when you search for the kth element."
    ]
  },
  {
    "questionId": 704,
    "title": "Binary Search",
    "titleSlug": "binary-search",
    "content": "<p>Given an array of integers `nums` which is sorted in ascending order, and an integer `target`, write a function to search `target` in `nums`. If `target` exists, then return its index. Otherwise, return `-1`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def binary_search(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [-1,0,3,5,9,12], target = 9",
        "output": "4",
        "explanation": "9 exists in nums and its index is 4"
      },
      {
        "input": "nums = [-1,0,3,5,9,12], target = 2",
        "output": "-1",
        "explanation": "2 does not exist in nums so return -1"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 104",
      "-9999 <= nums[i], target <= 9999",
      "All the integers in nums are unique.",
      "nums is sorted in an ascending order."
    ]
  },
  {
    "questionId": 705,
    "title": "Design HashSet",
    "titleSlug": "design-hashset",
    "content": "<p>Design a HashSet without using any built-in hash table libraries.</p>\n<p>Implement `MyHashSet` class:\n`void add(key)` Inserts the value `key` into the HashSet.</p>\n<p>`bool contains(key)` Returns whether the value `key` exists in the HashSet or not.</p>\n<p>`void remove(key)` Removes the value `key` in the HashSet. If `key` does not exist in the HashSet, do nothing.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def design_hashset(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "0 <= key <= 106",
      "At most 104 calls will be made to add, remove, and contains.",
      "Follow up: Could you solve the problem without using the built-in HashSet library?"
    ]
  },
  {
    "questionId": 706,
    "title": "Design HashMap",
    "titleSlug": "design-hashmap",
    "content": "<p>Design a HashMap without using any built-in hash table libraries.</p>\n<p>Implement the `MyHashMap` class:\n`MyHashMap()` initializes the object with an empty map.</p>\n<p>`void put(int key, int value)` inserts a `(key, value)` pair into the HashMap. If the `key` already exists in the map, update the corresponding `value`.</p>\n<p>`int get(int key)` returns the `value` to which the specified `key` is mapped, or `-1` if this map contains no mapping for the `key`.</p>\n<p>`void remove(key)` removes the `key` and its corresponding `value` if the map contains the mapping for the `key`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def design_hashmap(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "0 <= key, value <= 106",
      "At most 104 calls will be made to put, get, and remove.",
      "Follow up: Please do not use the built-in HashMap library."
    ]
  },
  {
    "questionId": 707,
    "title": "Design Linked List",
    "titleSlug": "design-linked-list",
    "content": "<p>Design your implementation of the linked list. You can choose to use a singly or doubly linked list.</p>\n<p>A node in a singly linked list should have two attributes: `val` and `next`. `val` is the value of the current node, and `next` is a pointer/reference to the next node.</p>\n<p>If you want to use the doubly linked list, you will need one more attribute `prev` to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.</p>\n<p>Implement the `MyLinkedList` class:\n`MyLinkedList()` Initializes the `MyLinkedList` object.</p>\n<p>`int get(int index)` Get the value of the `indexth` node in the linked list. If the index is invalid, return `-1`.</p>\n<p>`void addAtHead(int val)` Add a node of value `val` before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.</p>\n<p>`void addAtTail(int val)` Append a node of value `val` as the last element of the linked list.</p>\n<p>`void addAtIndex(int index, int val)` Add a node of value `val` before the `indexth` node in the linked list. If `index` equals the length of the linked list, the node will be appended to the end of the linked list. If `index` is greater than the length, the node will not be inserted.</p>\n<p>`void deleteAtIndex(int index)` Delete the `indexth` node in the linked list, if the index is valid.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def design_linked_list(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "0 <= index, val <= 1000",
      "Please do not use the built-in LinkedList library.",
      "At most 2000 calls will be made to get, addAtHead, addAtTail, addAtIndex and deleteAtIndex."
    ]
  },
  {
    "questionId": 708,
    "title": "Insert into a Sorted Circular Linked List",
    "titleSlug": "insert-into-a-sorted-circular-linked-list",
    "content": "<p>Given a node from a Circular Linked List which is sorted in ascending order, write a function to insert a value `insertVal` into the list such that it remains a sorted circular list. The given node can be a reference to any single node in the list, and may not be necessarily the smallest value in the circular list.</p>\n<p>If there are multiple suitable places for insertion, you may choose any place to insert the new value. After the insertion, the circular list should remain sorted.</p>\n<p>If the list is empty (i.e., given node is `null`), you should create a new single circular list and return the reference to that single node. Otherwise, you should return the original given node.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def insert_into_a_sorted_circular_linked_list(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [3,4,1], insertVal = 2",
        "output": "[3,4,1,2]",
        "explanation": "In the figure above, there is a sorted circular list of three elements. You are given a reference to the node with value 3, and we need to insert 2 into the list. The new node should be inserted between node 1 and node 3. After the insertion, the list should look like this, and we should still return node 3."
      },
      {
        "input": "head = [], insertVal = 1",
        "output": "[1]",
        "explanation": "The list is empty (given head is `null`). We create a new single circular list and return the reference to that single node."
      },
      {
        "input": "head = [1], insertVal = 0",
        "output": "[1,0]"
      }
    ],
    "constraints": [
      "0 <= Number of Nodes <= 5 * 10^4",
      "-10^6 <= Node.val <= 10^6",
      "-10^6 <= insertVal <= 10^6"
    ]
  },
  {
    "questionId": 714,
    "title": "Best Time to Buy and Sell Stock with Transaction Fee",
    "titleSlug": "best-time-to-buy-and-sell-stock-with-transaction-fee",
    "content": "<p>You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day, and an integer `fee` representing a transaction fee.</p>\n<p>Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.</p>\n<p>Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def best_time_to_buy_and_sell_stock_with_transaction_fee(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "prices = [1,3,2,8,4,9], fee = 2",
        "output": "8",
        "explanation": "The maximum profit can be achieved by:"
      },
      {
        "input": "prices = [1,3,7,5,10,3], fee = 3",
        "output": "6"
      }
    ],
    "constraints": [
      "1 <= prices.length <= 5 * 104",
      "1 <= prices[i] < 5 * 104",
      "0 <= fee < 5 * 104"
    ]
  },
  {
    "questionId": 716,
    "title": "Max Stack",
    "titleSlug": "max-stack",
    "content": "<p>Design a max stack data structure that supports the stack operations and supports finding the stack's maximum element.</p>\n<p>Implement the `MaxStack` class:\n`MaxStack()` Initializes the stack object.</p>\n<p>`void push(int x)` Pushes element `x` onto the stack.</p>\n<p>`int pop()` Removes the element on top of the stack and returns it.</p>\n<p>`int top()` Gets the element on the top of the stack without removing it.</p>\n<p>`int peekMax()` Retrieves the maximum element in the stack without removing it.</p>\n<p>`int popMax()` Retrieves the maximum element in the stack and removes it. If there is more than one maximum element, only remove the top-most one.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def max_stack(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "-107 <= x <= 107",
      "At most 104 calls will be made to push, pop, top, peekMax, and popMax.",
      "There will be at least one element in the stack when pop, top, peekMax, or popMax is called.",
      "Follow up: Could you come up with a solution that supports O(1) for each top call and O(logn) for each other call?"
    ]
  },
  {
    "questionId": 720,
    "title": "Longest Word in Dictionary",
    "titleSlug": "longest-word-in-dictionary",
    "content": "<p>Given an array of strings `words` representing an English Dictionary, return the longest word in `words` that can be built one character at a time by other words in `words`.</p>\n<p>If there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_word_in_dictionary(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "words = [\"w\",\"wo\",\"wor\",\"worl\",\"world\"]",
        "output": "\"world\"",
        "explanation": "The word \"world\" can be built one character at a time by \"w\", \"wo\", \"wor\", and \"worl\"."
      },
      {
        "input": "words = [\"a\",\"banana\",\"app\",\"appl\",\"ap\",\"apply\",\"apple\"]",
        "output": "\"apple\"",
        "explanation": "Both \"apply\" and \"apple\" can be built from other words in the dictionary. However, \"apple\" is lexicographically smaller than \"apply\"."
      }
    ],
    "constraints": [
      "1 <= words.length <= 1000",
      "1 <= words[i].length <= 30",
      "words[i] consists of lowercase English letters."
    ]
  },
  {
    "questionId": 721,
    "title": "Accounts Merge",
    "titleSlug": "accounts-merge",
    "content": "<p>Given a list of `accounts` where each element `accounts[i]` is a list of strings, where the first element `accounts[i][0]` is a name, and the rest of the elements are emails representing emails of the account.</p>\n<p>Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.</p>\n<p>After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. The accounts themselves can be returned in any order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def accounts_merge(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "accounts = [[\"John\",\"johnsmith@mail.com\",\"john_newyork@mail.com\"],[\"John\",\"johnsmith@mail.com\",\"john00@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]",
        "output": "[[\"John\",\"john00@mail.com\",\"john_newyork@mail.com\",\"johnsmith@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]",
        "explanation": "The first and third John's are the same person as they have the common email \"johnsmith@mail.com\"."
      },
      {
        "input": "accounts = [[\"Gabe\",\"Gabe0@m.co\",\"Gabe3@m.co\",\"Gabe1@m.co\"],[\"Kevin\",\"Kevin3@m.co\",\"Kevin5@m.co\",\"Kevin0@m.co\"],[\"Ethan\",\"Ethan5@m.co\",\"Ethan4@m.co\",\"Ethan0@m.co\"],[\"Hanzo\",\"Hanzo3@m.co\",\"Hanzo1@m.co\",\"Hanzo0@m.co\"],[\"Fern\",\"Fern5@m.co\",\"Fern1@m.co\",\"Fern0@m.co\"]]",
        "output": "[[\"Ethan\",\"Ethan0@m.co\",\"Ethan4@m.co\",\"Ethan5@m.co\"],[\"Gabe\",\"Gabe0@m.co\",\"Gabe1@m.co\",\"Gabe3@m.co\"],[\"Hanzo\",\"Hanzo0@m.co\",\"Hanzo1@m.co\",\"Hanzo3@m.co\"],[\"Kevin\",\"Kevin0@m.co\",\"Kevin3@m.co\",\"Kevin5@m.co\"],[\"Fern\",\"Fern0@m.co\",\"Fern1@m.co\",\"Fern5@m.co\"]]"
      }
    ],
    "constraints": [
      "1 <= accounts.length <= 1000",
      "2 <= accounts[i].length <= 10",
      "1 <= accounts[i][j] <= 30",
      "accounts[i][0] consists of English letters.",
      "accounts[i][j] (for j > 0) is a valid email."
    ]
  },
  {
    "questionId": 724,
    "title": "Find Pivot Index",
    "titleSlug": "find-pivot-index",
    "content": "<p>Given an array of integers `nums`, calculate the pivot index of this array.</p>\n<p>The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.</p>\n<p>If the index is on the left edge of the array, then the left sum is `0` because there are no elements to the left. This also applies to the right edge of the array.</p>\n<p>Return the leftmost pivot index. If no such index exists, return -1.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_pivot_index(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,7,3,6,5,6]",
        "output": "3",
        "explanation": "The pivot index is 3."
      },
      {
        "input": "nums = [1,2,3]",
        "output": "-1",
        "explanation": "There is no index that satisfies the conditions in the problem statement."
      },
      {
        "input": "nums = [2,1,-1]",
        "output": "0",
        "explanation": "The pivot index is 0."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 104",
      "-1000 <= nums[i] <= 1000"
    ]
  },
  {
    "questionId": 734,
    "title": "Sentence Similarity",
    "titleSlug": "sentence-similarity",
    "content": "<p>We can represent a sentence as an array of words, for example, the sentence `\"I am happy with leetcode\"` can be represented as `arr = [\"I\",\"am\",happy\",\"with\",\"leetcode\"]`.</p>\n<p>Given two sentences `sentence1` and `sentence2` each represented as a string array and given an array of string pairs `similarPairs` where `similarPairs[i] = [xi, yi]` indicates that the two words `xi` and `yi` are similar.</p>\n<p>Return `true` if `sentence1` and `sentence2` are similar, or `false` if they are not similar.</p>\n<p>Two sentences are similar if:\nThey have the same length (i.e. the same number of words)\n`sentence1[i]` and `sentence2[i]` are similar.</p>\n<p>Notice that a word is always similar to itself, also notice that the similarity relation is not transitive. For example, if the words `a` and `b` are similar and the words `b` and `c` are similar, `a` and `c` are not necessarily similar.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sentence_similarity(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "sentence1 = [\"great\",\"acting\",\"skills\"], sentence2 = [\"fine\",\"drama\",\"talent\"], similarPairs = [[\"great\",\"fine\"],[\"drama\",\"acting\"],[\"skills\",\"talent\"]]",
        "output": "true",
        "explanation": "The two sentences have the same length and each word i of sentence1 is also similar to the corresponding word in sentence2."
      },
      {
        "input": "sentence1 = [\"great\"], sentence2 = [\"great\"], similarPairs = []",
        "output": "true",
        "explanation": "A word is similar to itself."
      },
      {
        "input": "sentence1 = [\"great\"], sentence2 = [\"doubleplus\",\"good\"], similarPairs = [[\"great\",\"doubleplus\"]]",
        "output": "false",
        "explanation": "As they don't have the same length, we return false."
      }
    ],
    "constraints": [
      "1 <= sentence1.length, sentence2.length <= 1000",
      "1 <= sentence1[i].length, sentence2[i].length <= 20",
      "sentence1[i] and sentence2[i] consist of lower-case and upper-case English letters.",
      "0 <= similarPairs.length <= 1000",
      "similarPairs[i].length == 2",
      "1 <= xi.length, yi.length <= 20",
      "xi and yi consist of lower-case and upper-case English letters.",
      "All the pairs (xi, yi) are distinct."
    ]
  },
  {
    "questionId": 735,
    "title": "Asteroid Collision",
    "titleSlug": "asteroid-collision",
    "content": "<p>We are given an array `asteroids` of integers representing asteroids in a row.</p>\n<p>For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.</p>\n<p>Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def asteroid_collision(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "asteroids = [5,10,-5]",
        "output": "[5,10]",
        "explanation": "The 10 and -5 collide resulting in 10. The 5 and 10 never collide."
      },
      {
        "input": "asteroids = [8,-8]",
        "output": "[]",
        "explanation": "The 8 and -8 collide exploding each other."
      },
      {
        "input": "asteroids = [10,2,-5]",
        "output": "[10]",
        "explanation": "The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10."
      },
      {
        "input": "asteroids = [-2,-1,1,2]",
        "output": "[-2,-1,1,2]",
        "explanation": "The -2 and -1 are moving left, while the 1 and 2 are moving right. Asteroids moving the same direction never meet, so no asteroids will meet each other."
      }
    ],
    "constraints": [
      "2 <= asteroids.length <= 104",
      "-1000 <= asteroids[i] <= 1000",
      "asteroids[i] != 0"
    ]
  },
  {
    "questionId": 740,
    "title": "Delete and Earn",
    "titleSlug": "delete-and-earn",
    "content": "<p>Given an array `nums` of integers, you can perform operations on the array.</p>\n<p>In each operation, you pick any `nums[i]` and delete it to earn `nums[i]` points. After, you must delete every element equal to `nums[i] - 1` or `nums[i] + 1`.</p>\n<p>You start with `0` points. Return the maximum number of points you can earn by applying such operations.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def delete_and_earn(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [3,4,2]",
        "output": "6",
        "explanation": "Delete 4 to earn 4 points, consequently 3 is also deleted."
      },
      {
        "input": "nums = [2,2,3,3,3,4]",
        "output": "9",
        "explanation": "Delete 3 to earn 3 points, deleting both 2's and the 4."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 2 * 104",
      "1 <= nums[i] <= 104"
    ]
  },
  {
    "questionId": 743,
    "title": "Network Delay Time",
    "titleSlug": "network-delay-time",
    "content": "<p>You are given a network of `n` nodes, labeled from `1` to `n`. You are also given `times`, a list of travel times as directed edges `times[i] = (ui, vi, wi)`, where `ui` is the source node, `vi` is the target node, and `wi` is the time it takes for a signal to travel from source to target.</p>\n<p>We will send a signal from a given node `k`. Return the time it takes for all the `n` nodes to receive the signal. If it is impossible for all the `n` nodes to receive the signal, return `-1`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def network_delay_time(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2",
        "output": "2"
      },
      {
        "input": "times = [[1,2,1]], n = 2, k = 1",
        "output": "1"
      },
      {
        "input": "times = [[1,2,1]], n = 2, k = 2",
        "output": "-1"
      }
    ],
    "constraints": [
      "1 <= k <= n <= 100",
      "1 <= times.length <= 6000",
      "times[i].length == 3",
      "1 <= ui, vi <= n",
      "ui != vi",
      "0 <= wi <= 100",
      "All the pairs (ui, vi) are unique. (i.e., no multiple edges.)"
    ]
  },
  {
    "questionId": 746,
    "title": "Min Cost Climbing Stairs",
    "titleSlug": "min-cost-climbing-stairs",
    "content": "<p>You are given an integer array `cost` where `cost[i]` is the cost of `ith` step on a staircase. Once you pay the cost, you can either climb one or two steps.</p>\n<p>You can either start from the step with index `0`, or the step with index `1`.</p>\n<p>Return the minimum cost to reach the top of the floor.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def min_cost_climbing_stairs(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "cost = [10,15,20]",
        "output": "15",
        "explanation": "Cheapest is: start on cost[1], pay that cost, and go to the top."
      },
      {
        "input": "cost = [1,100,1,1,1,100,1,1,100,1]",
        "output": "6",
        "explanation": "Cheapest is: start on cost[0], and only step on 1s, skipping cost[3]."
      }
    ],
    "constraints": [
      "2 <= cost.length <= 1000",
      "0 <= cost[i] <= 999"
    ]
  },
  {
    "questionId": 748,
    "title": "Shortest Completing Word",
    "titleSlug": "shortest-completing-word",
    "content": "<p>Given a string `licensePlate` and an array of strings `words`, find the shortest completing word in `words`.</p>\n<p>A completing word is a word that contains all the letters in `licensePlate`. Ignore numbers and spaces in `licensePlate`, and treat letters as case insensitive. If a letter appears more than once in `licensePlate`, then it must appear in the word the same number of times or more.</p>\n<p>For example, if `licensePlate`` = \"aBc 12c\"`, then it contains letters `'a'`, `'b'` (ignoring case), and `'c'` twice. Possible completing words are `\"abccdef\"`, `\"caaacab\"`, and `\"cbca\"`.</p>\n<p>Return the shortest completing word in `words`. It is guaranteed an answer exists. If there are multiple shortest completing words, return the first one that occurs in `words`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def shortest_completing_word(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "licensePlate = \"1s3 PSt\", words = [\"step\",\"steps\",\"stripe\",\"stepple\"]",
        "output": "\"steps\"",
        "explanation": "licensePlate contains letters 's', 'p', 's' (ignoring case), and 't'."
      },
      {
        "input": "licensePlate = \"1s3 456\", words = [\"looks\",\"pest\",\"stew\",\"show\"]",
        "output": "\"pest\"",
        "explanation": "licensePlate only contains the letter 's'. All the words contain 's', but among these \"pest\", \"stew\", and \"show\" are shortest. The answer is \"pest\" because it is the word that appears earliest of the 3."
      },
      {
        "input": "licensePlate = \"Ah71752\", words = [\"suggest\",\"letter\",\"of\",\"husband\",\"easy\",\"education\",\"drug\",\"prevent\",\"writer\",\"old\"]",
        "output": "\"husband\""
      },
      {
        "input": "licensePlate = \"OgEu755\", words = [\"enough\",\"these\",\"play\",\"wide\",\"wonder\",\"box\",\"arrive\",\"money\",\"tax\",\"thus\"]",
        "output": "\"enough\""
      },
      {
        "input": "licensePlate = \"iMSlpe4\", words = [\"claim\",\"consumer\",\"student\",\"camera\",\"public\",\"never\",\"wonder\",\"simple\",\"thought\",\"use\"]",
        "output": "\"simple\""
      }
    ],
    "constraints": [
      "1 <= licensePlate.length <= 7",
      "licensePlate contains digits, letters (uppercase or lowercase), or space ' '.",
      "1 <= words.length <= 1000",
      "1 <= words[i].length <= 15",
      "words[i] consists of lower case English letters."
    ]
  },
  {
    "questionId": 752,
    "title": "Open the Lock",
    "titleSlug": "open-the-lock",
    "content": "<p>You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: `'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'`. The wheels can rotate freely and wrap around: for example we can turn `'9'` to be `'0'`, or `'0'` to be `'9'`. Each move consists of turning one wheel one slot.</p>\n<p>The lock initially starts at `'0000'`, a string representing the state of the 4 wheels.</p>\n<p>You are given a list of `deadends` dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.</p>\n<p>Given a `target` representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def open_the_lock(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "deadends = [\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"], target = \"0202\"",
        "output": "6",
        "explanation": "A sequence of valid moves would be \"0000\" -> \"1000\" -> \"1100\" -> \"1200\" -> \"1201\" -> \"1202\" -> \"0202\"."
      },
      {
        "input": "deadends = [\"8888\"], target = \"0009\"",
        "output": "1",
        "explanation": "We can turn the last wheel in reverse to move from \"0000\" -> \"0009\"."
      },
      {
        "input": "deadends = [\"8887\",\"8889\",\"8878\",\"8898\",\"8788\",\"8988\",\"7888\",\"9888\"], target = \"8888\"",
        "output": "-1",
        "explanation": "We can't reach the target without getting stuck."
      },
      {
        "input": "deadends = [\"0000\"], target = \"8888\"",
        "output": "-1"
      }
    ],
    "constraints": [
      "1 <= deadends.length <= 500",
      "deadends[i].length == 4",
      "target.length == 4",
      "target will not be in the list deadends.",
      "target and deadends[i] consist of digits only."
    ]
  },
  {
    "questionId": 756,
    "title": "Pyramid Transition Matrix",
    "titleSlug": "pyramid-transition-matrix",
    "content": "<p>We are stacking blocks to form a pyramid. Each block has a color which is a one-letter string.</p>\n<p>We are allowed to place any color block `C` on top of two adjacent blocks of colors `A` and `B`, if and only if `ABC` is an allowed triple.</p>\n<p>We start with a bottom row of `bottom`, represented as a single string. We also start with a list of allowed triples `allowed`. Each allowed triple is represented as a string of length `3`.</p>\n<p>Return `true` if we can build the pyramid all the way to the top, otherwise `false`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def pyramid_transition_matrix(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "bottom = \"BCD\", allowed = [\"BCG\",\"CDE\",\"GEA\",\"FFF\"]",
        "output": "true",
        "explanation": "We can stack the pyramid like this:"
      },
      {
        "input": "bottom = \"AABA\", allowed = [\"AAA\",\"AAB\",\"ABA\",\"ABB\",\"BAC\"]",
        "output": "false",
        "explanation": "We cannot stack the pyramid to the top."
      }
    ],
    "constraints": [
      "2 <= bottom.length <= 8",
      "0 <= allowed.length <= 200",
      "allowed[i].length == 3",
      "The letters in all input strings are from the set {'A', 'B', 'C', 'D', 'E', 'F', 'G'}."
    ]
  },
  {
    "questionId": 758,
    "title": "Bold Words in String",
    "titleSlug": "bold-words-in-string",
    "content": "<p>Given a set of keywords `words` and a string `S`, make all appearances of all keywords in `S` bold. Any letters between `<b>` and `</b>` tags become bold.</p>\n<p>The returned string should use the least number of tags possible, and of course the tags should form a valid combination.</p>\n<p>For example, given that `words = [\"ab\", \"bc\"]` and `S = \"aabcd\"`, we should return `\"a<b>abc</b>d\"`. Note that returning `\"a<b>a<b>b</b>c</b>d\"` would use more tags, so it is incorrect.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def bold_words_in_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "words has length in range [0, 50].",
      "words[i] has length in range [1, 10].",
      "S has length in range [0, 500].",
      "All characters in words[i] and S are lowercase letters.",
      "Note: This question is the same as 616: https://leetcode.com/problems/add-bold-tag-in-string/"
    ]
  },
  {
    "questionId": 766,
    "title": "Toeplitz Matrix",
    "titleSlug": "toeplitz-matrix",
    "content": "<p>Given an `m x n` `matrix`, return `true` if the matrix is Toeplitz. Otherwise, return `false`.</p>\n<p>A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def toeplitz_matrix(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]",
        "output": "true",
        "explanation": "In the above grid, the diagonals are:"
      },
      {
        "input": "matrix = [[1,2],[2,2]]",
        "output": "false",
        "explanation": "The diagonal \"[1, 2]\" has different elements."
      }
    ],
    "constraints": [
      "m == matrix.length",
      "n == matrix[i].length",
      "1 <= m, n <= 20",
      "0 <= matrix[i][j] <= 99",
      "Follow up:",
      "What if the matrix is stored on disk, and the memory is limited such that you can only load at most one row of the matrix into the memory at once?",
      "What if the matrix is so large that you can only load up a partial row into the memory at once?"
    ]
  },
  {
    "questionId": 771,
    "title": "Jewels and Stones",
    "titleSlug": "jewels-and-stones",
    "content": "<p>You're given strings `jewels` representing the types of stones that are jewels, and `stones` representing the stones you have. Each character in `stones` is a type of stone you have. You want to know how many of the stones you have are also jewels.</p>\n<p>Letters are case sensitive, so `\"a\"` is considered a different type of stone from `\"A\"`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def jewels_and_stones(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "jewels = \"aA\", stones = \"aAAbbbb\"",
        "output": "3"
      },
      {
        "input": "jewels = \"z\", stones = \"ZZ\"",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= jewels.length, stones.length <= 50",
      "jewels and stones consist of only English letters.",
      "All the characters of jewels are unique."
    ]
  },
  {
    "questionId": 777,
    "title": "Swap Adjacent in LR String",
    "titleSlug": "swap-adjacent-in-lr-string",
    "content": "<p>In a string composed of `'L'`, `'R'`, and `'X'` characters, like `\"RXXLRXRXL\"`, a move consists of either replacing one occurrence of `\"XL\"` with `\"LX\"`, or replacing one occurrence of `\"RX\"` with `\"XR\"`. Given the starting string `start` and the ending string `end`, return `True` if and only if there exists a sequence of moves to transform one string to the other.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def swap_adjacent_in_lr_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "start = \"RXXLRXRXL\", end = \"XRLXXRRLX\"",
        "output": "true",
        "explanation": "We can transform start to end following these steps:"
      },
      {
        "input": "start = \"X\", end = \"L\"",
        "output": "false"
      },
      {
        "input": "start = \"LLR\", end = \"RRL\"",
        "output": "false"
      },
      {
        "input": "start = \"XL\", end = \"LX\"",
        "output": "true"
      },
      {
        "input": "start = \"XLLR\", end = \"LXLX\"",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= start.length <= 104",
      "start.length == end.length",
      "Both start and end will only consist of characters in 'L', 'R', and 'X'."
    ]
  },
  {
    "questionId": 783,
    "title": "Minimum Distance Between BST Nodes",
    "titleSlug": "minimum-distance-between-bst-nodes",
    "content": "<p>Given the `root` of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.</p>\n<p>Note: This question is the same as 530: https://leetcode.com/problems/minimum-absolute-difference-in-bst/</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_distance_between_bst_nodes(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [4,2,6,1,3]",
        "output": "1"
      },
      {
        "input": "root = [1,0,48,null,null,12,49]",
        "output": "1"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [2, 100].",
      "0 <= Node.val <= 105"
    ]
  },
  {
    "questionId": 784,
    "title": "Letter Case Permutation",
    "titleSlug": "letter-case-permutation",
    "content": "<p>Given a string S, we can transform every letter individually to be lowercase or uppercase to create another string.</p>\n<p>Return a list of all possible strings we could create. You can return the output in any order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def letter_case_permutation(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "S = \"a1b2\"",
        "output": "[\"a1b2\",\"a1B2\",\"A1b2\",\"A1B2\"]"
      },
      {
        "input": "S = \"3z4\"",
        "output": "[\"3z4\",\"3Z4\"]"
      },
      {
        "input": "S = \"12345\"",
        "output": "[\"12345\"]"
      },
      {
        "input": "S = \"0\"",
        "output": "[\"0\"]"
      }
    ],
    "constraints": [
      "S will be a string with length between 1 and 12.",
      "S will consist only of letters or digits."
    ]
  },
  {
    "questionId": 785,
    "title": "Is Graph Bipartite?",
    "titleSlug": "is-graph-bipartite",
    "content": "<p>There is an undirected graph with `n` nodes, where each node is numbered between `0` and `n - 1`. You are given a 2D array `graph`, where `graph[u]` is an array of nodes that node `u` is adjacent to. More formally, for each `v` in `graph[u]`, there is an undirected edge between node `u` and node `v`. The graph has the following properties:\nThere are no self-edges (`graph[u]` does not contain `u`).</p>\n<p>There are no parallel edges (`graph[u]` does not contain duplicate values).</p>\n<p>If `v` is in `graph[u]`, then `u` is in `graph[v]` (the graph is undirected).</p>\n<p>The graph may not be connected, meaning there may be two nodes `u` and `v` such that there is no path between them.</p>\n<p>A graph is bipartite if the nodes can be partitioned into two independent sets `A` and `B` such that every edge in the graph connects a node in set `A` and a node in set `B`.</p>\n<p>Return `true` if and only if it is bipartite.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def is_graph_bipartite(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "graph = [[1,2,3],[0,2],[0,1,3],[0,2]]",
        "output": "false",
        "explanation": "There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other."
      },
      {
        "input": "graph = [[1,3],[0,2],[1,3],[0,2]]",
        "output": "true",
        "explanation": "We can partition the nodes into two sets: {0, 2} and {1, 3}."
      }
    ],
    "constraints": [
      "graph.length == n",
      "1 <= n <= 100",
      "0 <= graph[u].length < n",
      "0 <= graph[u][i] <= n - 1",
      "graph[u] does not contain u.",
      "All the values of graph[u] are unique.",
      "If graph[u] contains v, then graph[v] contains u."
    ]
  },
  {
    "questionId": 787,
    "title": "Cheapest Flights Within K Stops",
    "titleSlug": "cheapest-flights-within-k-stops",
    "content": "<p>There are `n` cities connected by `m` flights. Each flight starts from city `u` and arrives at `v` with a price `w`.</p>\n<p>Now given all the cities and flights, together with starting city `src` and the destination `dst`, your task is to find the cheapest price from `src` to `dst` with up to `k` stops. If there is no such route, output `-1`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def cheapest_flights_within_k_stops(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]",
        "output": "200",
        "explanation": "The graph looks like this:"
      },
      {
        "input": "n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]",
        "output": "500",
        "explanation": "The graph looks like this:"
      }
    ],
    "constraints": [
      "The number of nodes n will be in range [1, 100], with nodes labeled from 0 to n - 1.",
      "The size of flights will be in range [0, n * (n - 1) / 2].",
      "The format of each flight will be (src, dst, price).",
      "The price of each flight will be in the range [1, 10000].",
      "k is in the range of [0, n - 1].",
      "There will not be any duplicated flights or self cycles."
    ]
  },
  {
    "questionId": 789,
    "title": "Escape The Ghosts",
    "titleSlug": "escape-the-ghosts",
    "content": "<p>You are playing a simplified PAC-MAN game on an infinite 2-D grid. You start at the point `[0, 0]`, and you are given a destination point `target = [xtarget, ytarget]`, which you are trying to get to. There are several ghosts on the map with their starting positions given as an array `ghosts`, where `ghosts[i] = [xi, yi]` represents the starting position of the `ith` ghost. All inputs are integral coordinates.</p>\n<p>Each turn, you and all the ghosts may independently choose to either move 1 unit in any of the four cardinal directions: north, east, south, or west or stay still. All actions happen simultaneously.</p>\n<p>You escape if and only if you can reach the target before any ghost reaches you. If you reach any square (including the target) at the same time as a ghost, it does not count as an escape.</p>\n<p>Return `true` if it is possible to escape, otherwise return `false`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def escape_the_ghosts(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "ghosts = [[1,0],[0,3]], target = [0,1]",
        "output": "true",
        "explanation": "You can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you."
      },
      {
        "input": "ghosts = [[1,0]], target = [2,0]",
        "output": "false",
        "explanation": "You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination."
      },
      {
        "input": "ghosts = [[2,0]], target = [1,0]",
        "output": "false",
        "explanation": "The ghost can reach the target at the same time as you."
      },
      {
        "input": "ghosts = [[5,0],[-10,-2],[0,-5],[-2,-2],[-7,1]], target = [7,7]",
        "output": "false"
      },
      {
        "input": "ghosts = [[-1,0],[0,1],[-1,0],[0,1],[-1,0]], target = [0,0]",
        "output": "true"
      }
    ],
    "constraints": [
      "1 <= ghosts.length <= 100",
      "ghosts[i].length == 2",
      "-104 <= xi, yi <= 104",
      "There can be multiple ghosts in the same location.",
      "target.length == 2",
      "-104 <= xtarget, ytarget <= 104"
    ]
  },
  {
    "questionId": 792,
    "title": "Number of Matching Subsequences",
    "titleSlug": "number-of-matching-subsequences",
    "content": "<p>Given a string `s` and an array of strings `words`, return the number of `words[i]` that is a subsequence of `s`.</p>\n<p>A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.</p>\n<p>For example, `\"ace\"` is a subsequence of `\"abcde\"`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_matching_subsequences(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"abcde\", words = [\"a\",\"bb\",\"acd\",\"ace\"]",
        "output": "3",
        "explanation": "There are three strings in words that are a subsequence of s: \"a\", \"acd\", \"ace\"."
      },
      {
        "input": "s = \"dsahjpjauf\", words = [\"ahjpjau\",\"ja\",\"ahbwzgqnuk\",\"tnmlanowax\"]",
        "output": "2"
      }
    ],
    "constraints": [
      "1 <= s.length <= 5 * 104",
      "1 <= words.length <= 5000",
      "1 <= words[i].length <= 50",
      "s and words[i] consist of only lowercase English letters."
    ]
  },
  {
    "questionId": 797,
    "title": "All Paths From Source to Target",
    "titleSlug": "all-paths-from-source-to-target",
    "content": "<p>Given a directed acyclic graph (DAG) of `n` nodes labeled from 0 to n - 1, find all possible paths from node `0` to node `n - 1`, and return them in any order.</p>\n<p>The graph is given as follows: `graph[i]` is a list of all nodes you can visit from node `i` (i.e., there is a directed edge from node `i` to node `graph[i][j]`).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def all_paths_from_source_to_target(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "graph = [[1,2],[3],[3],[]]",
        "output": "[[0,1,3],[0,2,3]]",
        "explanation": "There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3."
      },
      {
        "input": "graph = [[4,3,1],[3,2,4],[3],[4],[]]",
        "output": "[[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]"
      },
      {
        "input": "graph = [[1],[]]",
        "output": "[[0,1]]"
      },
      {
        "input": "graph = [[1,2,3],[2],[3],[]]",
        "output": "[[0,1,2,3],[0,2,3],[0,3]]"
      },
      {
        "input": "graph = [[1,3],[2],[3],[]]",
        "output": "[[0,1,2,3],[0,3]]"
      }
    ],
    "constraints": [
      "n == graph.length",
      "2 <= n <= 15",
      "0 <= graph[i][j] < n",
      "graph[i][j] != i (i.e., there will be no self-loops).",
      "The input graph is guaranteed to be a DAG."
    ]
  },
  {
    "questionId": 799,
    "title": "Champagne Tower",
    "titleSlug": "champagne-tower",
    "content": "<p>We stack glasses in a pyramid, where the first row has `1` glass, the second row has `2` glasses, and so on until the 100th row.  Each glass holds one cup of champagne.</p>\n<p>Then, some champagne is poured into the first glass at the top.  When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.  When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.  (A glass at the bottom row has its excess champagne fall on the floor.)\nFor example, after one cup of champagne is poured, the top most glass is full.  After two cups of champagne are poured, the two glasses on the second row are half full.  After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.  After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.</p>\n<p>Now after pouring some non-negative integer cups of champagne, return how full the `jth` glass in the `ith` row is (both `i` and `j` are 0-indexed.)</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def champagne_tower(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "poured = 1, query_row = 1, query_glass = 1",
        "output": "0.00000",
        "explanation": "We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty."
      },
      {
        "input": "poured = 2, query_row = 1, query_glass = 1",
        "output": "0.50000",
        "explanation": "We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange."
      },
      {
        "input": "poured = 100000009, query_row = 33, query_glass = 17",
        "output": "1.00000"
      }
    ],
    "constraints": [
      "0 <= poured <= 109",
      "0 <= query_glass <= query_row < 100"
    ]
  },
  {
    "questionId": 802,
    "title": "Find Eventual Safe States",
    "titleSlug": "find-eventual-safe-states",
    "content": "<p>We start at some node in a directed graph, and every turn, we walk along a directed edge of the graph. If we reach a terminal node (that is, it has no outgoing directed edges), we stop.</p>\n<p>We define a starting node to be safe if we must eventually walk to a terminal node. More specifically, there is a natural number `k`, so that we must have stopped at a terminal node in less than `k` steps for any choice of where to walk.</p>\n<p>Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.</p>\n<p>The directed graph has `n` nodes with labels from `0` to `n - 1`, where `n` is the length of `graph`. The graph is given in the following form: `graph[i]` is a list of labels `j` such that `(i, j)` is a directed edge of the graph, going from node `i` to node `j`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_eventual_safe_states(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "graph = [[1,2],[2,3],[5],[0],[5],[],[]]",
        "output": "[2,4,5,6]",
        "explanation": "The given graph is shown above."
      },
      {
        "input": "graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]",
        "output": "[4]"
      }
    ],
    "constraints": [
      "n == graph.length",
      "1 <= n <= 104",
      "0 <= graph[i].legnth <= n",
      "graph[i] is sorted in a strictly increasing order.",
      "The graph may contain self-loops.",
      "The number of edges in the graph will be in the range [1, 4 * 104]."
    ]
  },
  {
    "questionId": 806,
    "title": "Number of Lines To Write String",
    "titleSlug": "number-of-lines-to-write-string",
    "content": "<p>You are given a string `s` of lowercase English letters and an array `widths` denoting how many pixels wide each lowercase English letter is. Specifically, `widths[0]` is the width of `'a'`, `widths[1]` is the width of `'b'`, and so on.</p>\n<p>You are trying to write `s` across several lines, where each line is no longer than `100` pixels. Starting at the beginning of `s`, write as many letters on the first line such that the total width does not exceed `100` pixels. Then, from where you stopped in `s`, continue writing as many letters as you can on the second line. Continue this process until you have written all of `s`.</p>\n<p>Return an array `result` of length 2 where:\n`result[0]` is the total number of lines.</p>\n<p>`result[1]` is the width of the last line in pixels.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_lines_to_write_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "[3,60]",
        "explanation": "You can write s as follows:"
      },
      {
        "input": "widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"bbbcccdddaaa\"",
        "output": "[2,4]",
        "explanation": "You can write s as follows:"
      }
    ],
    "constraints": [
      "widths.length == 26",
      "2 <= widths[i] <= 10",
      "1 <= s.length <= 1000",
      "s contains only lowercase English letters."
    ]
  },
  {
    "questionId": 809,
    "title": "Expressive Words",
    "titleSlug": "expressive-words",
    "content": "<p>Sometimes people repeat letters to represent extra feeling, such as \"hello\" -> \"heeellooo\", \"hi\" -> \"hiiii\".  In these strings like \"heeellooo\", we have groups of adjacent letters that are all the same:  \"h\", \"eee\", \"ll\", \"ooo\".</p>\n<p>For some given string `S`, a query word is stretchy if it can be made to be equal to `S` by any number of applications of the following extension operation: choose a group consisting of characters `c`, and add some number of characters `c` to the group so that the size of the group is 3 or more.</p>\n<p>For example, starting with \"hello\", we could do an extension on the group \"o\" to get \"hellooo\", but we cannot get \"helloo\" since the group \"oo\" has size less than 3.  Also, we could do another extension like \"ll\" -> \"lllll\" to get \"helllllooo\".  If `S = \"helllllooo\"`, then the query word \"hello\" would be stretchy because of these two extension operations: `query = \"hello\" -> \"hellooo\" -> \"helllllooo\" = S`.</p>\n<p>Given a list of query words, return the number of words that are stretchy.</p>\n<p>Example:\nInput: \nS = \"heeellooo\"\nwords = [\"hello\", \"hi\", \"helo\"]\nOutput: 1\nExplanation: \nWe can extend \"e\" and \"o\" in the word \"hello\" to get \"heeellooo\".</p>\n<p>We can't extend \"helo\" to get \"heeellooo\" because the group \"ll\" is not size 3 or more.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def expressive_words(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "0 <= len(S) <= 100.",
      "0 <= len(words) <= 100.",
      "0 <= len(words[i]) <= 100.",
      "S and all words in words consist only of lowercase letters"
    ]
  },
  {
    "questionId": 819,
    "title": "Most Common Word",
    "titleSlug": "most-common-word",
    "content": "<p>Given a string `paragraph` and a string array of the banned words `banned`, return the most frequent word that is not banned. It is guaranteed there is at least one word that is not banned, and that the answer is unique.</p>\n<p>The words in `paragraph` are case-insensitive and the answer should be returned in lowercase.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def most_common_word(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\", banned = [\"hit\"]",
        "output": "\"ball\"",
        "explanation": "\"hit\" occurs 3 times, but it is a banned word."
      },
      {
        "input": "paragraph = \"a.\", banned = []",
        "output": "\"a\""
      }
    ],
    "constraints": [
      "1 <= paragraph.length <= 1000",
      "paragraph consists of English letters, space ' ', or one of the symbols: \"!?',;.\".",
      "0 <= banned.length <= 100",
      "1 <= banned[i].length <= 10",
      "banned[i] consists of only lowercase English letters."
    ]
  },
  {
    "questionId": 820,
    "title": "Short Encoding of Words",
    "titleSlug": "short-encoding-of-words",
    "content": "<p>A valid encoding of an array of `words` is any reference string `s` and array of indices `indices` such that:\n`words.length == indices.length`\nThe reference string `s` ends with the `'#'` character.</p>\n<p>For each index `indices[i]`, the substring of `s` starting from `indices[i]` and up to (but not including) the next `'#'` character is equal to `words[i]`.</p>\n<p>Given an array of `words`, return the length of the shortest reference string `s` possible of any valid encoding of `words`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def short_encoding_of_words(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "words = [\"time\", \"me\", \"bell\"]",
        "output": "10",
        "explanation": "A valid encoding would be s = `\"time#bell#\" and indices = [0, 2, 5`]."
      },
      {
        "input": "words = [\"t\"]",
        "output": "2",
        "explanation": "A valid encoding would be s = \"t#\" and indices = [0]."
      }
    ],
    "constraints": [
      "1 <= words.length <= 2000",
      "1 <= words[i].length <= 7",
      "words[i] consists of only lowercase letters."
    ]
  },
  {
    "questionId": 821,
    "title": "Shortest Distance to a Character",
    "titleSlug": "shortest-distance-to-a-character",
    "content": "<p>Given a string `s` and a character `c` that occurs in `s`, return an array of integers `answer` where `answer.length == s.length` and `answer[i]` is the distance from index `i` to the closest occurrence of character `c` in `s`.</p>\n<p>The distance between two indices `i` and `j` is `abs(i - j)`, where `abs` is the absolute value function.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def shortest_distance_to_a_character(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"loveleetcode\", c = \"e\"",
        "output": "[3,2,1,0,1,0,0,1,2,2,1,0]",
        "explanation": "The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed)."
      },
      {
        "input": "s = \"aaab\", c = \"b\"",
        "output": "[3,2,1,0]"
      }
    ],
    "constraints": [
      "1 <= s.length <= 104",
      "s[i] and c are lowercase English letters.",
      "It is guaranteed that c occurs at least once in s."
    ]
  },
  {
    "questionId": 823,
    "title": "Binary Trees With Factors",
    "titleSlug": "binary-trees-with-factors",
    "content": "<p>Given an array of unique integers, `arr`, where each integer `arr[i]` is strictly greater than `1`.</p>\n<p>We make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node's value should be equal to the product of the values of its children.</p>\n<p>Return the number of binary trees we can make. The answer may be too large so return the answer modulo `109 + 7`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def binary_trees_with_factors(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [2,4]",
        "output": "3",
        "explanation": "We can make these trees: `[2], [4], [4, 2, 2]`"
      },
      {
        "input": "arr = [2,4,5,10]",
        "output": "7",
        "explanation": "We can make these trees: `[2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2]`."
      }
    ],
    "constraints": [
      "1 <= arr.length <= 1000",
      "2 <= arr[i] <= 109",
      "All the values of arr are unique."
    ]
  },
  {
    "questionId": 830,
    "title": "Positions of Large Groups",
    "titleSlug": "positions-of-large-groups",
    "content": "<p>In a string `s` of lowercase letters, these letters form consecutive groups of the same character.</p>\n<p>For example, a string like `s = \"abbxxxxzyy\"` has the groups `\"a\"`, `\"bb\"`, `\"xxxx\"`, `\"z\"`, and `\"yy\"`.</p>\n<p>A group is identified by an interval `[start, end]`, where `start` and `end` denote the start and end indices (inclusive) of the group. In the above example, `\"xxxx\"` has the interval `[3,6]`.</p>\n<p>A group is considered large if it has 3 or more characters.</p>\n<p>Return the intervals of every large group sorted in increasing order by start index.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def positions_of_large_groups(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"abbxxxxzzy\"",
        "output": "[[3,6]]",
        "explanation": "`\"xxxx\" is the only `large group with start index 3 and end index 6."
      },
      {
        "input": "s = \"abc\"",
        "output": "[]",
        "explanation": "We have groups \"a\", \"b\", and \"c\", none of which are large groups."
      },
      {
        "input": "s = \"abcdddeeeeaabbbcd\"",
        "output": "[[3,5],[6,9],[12,14]]",
        "explanation": "The large groups are \"ddd\", \"eeee\", and \"bbb\"."
      },
      {
        "input": "s = \"aba\"",
        "output": "[]"
      }
    ],
    "constraints": [
      "1 <= s.length <= 1000",
      "s contains lower-case English letters only."
    ]
  },
  {
    "questionId": 832,
    "title": "Flipping an Image",
    "titleSlug": "flipping-an-image",
    "content": "<p>Given an `n x n` binary matrix `image`, flip the image horizontally, then invert it, and return the resulting image.</p>\n<p>To flip an image horizontally means that each row of the image is reversed.</p>\n<p>For example, flipping `[1,1,0]` horizontally results in `[0,1,1]`.</p>\n<p>To invert an image means that each `0` is replaced by `1`, and each `1` is replaced by `0`.</p>\n<p>For example, inverting `[0,1,1]` results in `[1,0,0]`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def flipping_an_image(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "image = [[1,1,0],[1,0,1],[0,0,0]]",
        "output": "[[1,0,0],[0,1,0],[1,1,1]]",
        "explanation": "First reverse each row: [[0,1,1],[1,0,1],[0,0,0]]."
      },
      {
        "input": "image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]",
        "output": "[[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]",
        "explanation": "First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]."
      }
    ],
    "constraints": [
      "n == image.length",
      "n == image[i].length",
      "1 <= n <= 20",
      "images[i][j] is either 0 or 1."
    ]
  },
  {
    "questionId": 833,
    "title": "Find And Replace in String",
    "titleSlug": "find-and-replace-in-string",
    "content": "<p>To some string `S`, we will perform some replacement operations that replace groups of letters with new ones (not necessarily the same size).</p>\n<p>Each replacement operation has `3` parameters: a starting index `i`, a source word `x` and a target word `y`.  The rule is that if `x` starts at position `i` in the original string `S`, then we will replace that occurrence of `x` with `y`.  If not, we do nothing.</p>\n<p>For example, if we have `S = \"abcd\"` and we have some replacement operation `i = 2, x = \"cd\", y = \"ffff\"`, then because `\"cd\"` starts at position `2` in the original string `S`, we will replace it with `\"ffff\"`.</p>\n<p>Using another example on `S = \"abcd\"`, if we have both the replacement operation `i = 0, x = \"ab\", y = \"eee\"`, as well as another replacement operation `i = 2, x = \"ec\", y = \"ffff\"`, this second operation does nothing because in the original string `S[2] = 'c'`, which doesn't match `x[0] = 'e'`.</p>\n<p>All these operations occur simultaneously.  It's guaranteed that there won't be any overlap in replacement: for example, `S = \"abc\", indexes = [0, 1], sources = [\"ab\",\"bc\"]` is not a valid test case.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_and_replace_in_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "S = \"abcd\", indexes = [0, 2], sources = [\"a\", \"cd\"], targets = [\"eee\", \"ffff\"]",
        "output": "\"eeebffff\"",
        "explanation": "\"a\" starts at index 0 in S, so it's replaced by \"eee\"."
      },
      {
        "input": "S = \"abcd\", indexes = [0, 2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]",
        "output": "\"eeecd\"",
        "explanation": "\"ab\" starts at index 0 in S, so it's replaced by \"eee\"."
      }
    ],
    "constraints": [
      "0 <= S.length <= 1000",
      "S consists of only lowercase English letters.",
      "0 <= indexes.length <= 100",
      "0 <= indexes[i] < S.length",
      "sources.length == indexes.length",
      "targets.length == indexes.length",
      "1 <= sources[i].length, targets[i].length <= 50",
      "sources[i] and targets[i] consist of only lowercase English letters."
    ]
  },
  {
    "questionId": 835,
    "title": "Image Overlap",
    "titleSlug": "image-overlap",
    "content": "<p>You are given two images `img1` and `img2` both of size `n x n`, represented as binary, square matrices of the same size. (A binary matrix has only 0s and 1s as values.)\nWe translate one image however we choose (sliding it left, right, up, or down any number of units), and place it on top of the other image.  After, the overlap of this translation is the number of positions that have a 1 in both images.</p>\n<p>(Note also that a translation does not include any kind of rotation.)\nWhat is the largest possible overlap?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def image_overlap(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]",
        "output": "3",
        "explanation": "We slide img1 to right by 1 unit and down by 1 unit."
      },
      {
        "input": "img1 = [[1]], img2 = [[1]]",
        "output": "1"
      },
      {
        "input": "img1 = [[0]], img2 = [[0]]",
        "output": "0"
      }
    ],
    "constraints": [
      "n == img1.length",
      "n == img1[i].length",
      "n == img2.length ",
      "n == img2[i].length",
      "1 <= n <= 30",
      "img1[i][j] is 0 or 1.",
      "img2[i][j] is 0 or 1."
    ]
  },
  {
    "questionId": 836,
    "title": "Rectangle Overlap",
    "titleSlug": "rectangle-overlap",
    "content": "<p>An axis-aligned rectangle is represented as a list `[x1, y1, x2, y2]`, where `(x1, y1)` is the coordinate of its bottom-left corner, and `(x2, y2)` is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.</p>\n<p>Two rectangles overlap if the area of their intersection is positive. To be clear, two rectangles that only touch at the corner or edges do not overlap.</p>\n<p>Given two axis-aligned rectangles `rec1` and `rec2`, return `true` if they overlap, otherwise return `false`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def rectangle_overlap(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "rec1 = [0,0,2,2], rec2 = [1,1,3,3]",
        "output": "true"
      },
      {
        "input": "rec1 = [0,0,1,1], rec2 = [1,0,2,1]",
        "output": "false"
      },
      {
        "input": "rec1 = [0,0,1,1], rec2 = [2,2,3,3]",
        "output": "false"
      }
    ],
    "constraints": [
      "rect1.length == 4",
      "rect2.length == 4",
      "-109 <= rec1[i], rec2[i] <= 109",
      "rec1[0] <= rec1[2] and rec1[1] <= rec1[3]",
      "rec2[0] <= rec2[2] and rec2[1] <= rec2[3]"
    ]
  },
  {
    "questionId": 840,
    "title": "Magic Squares In Grid",
    "titleSlug": "magic-squares-in-grid",
    "content": "<p>A `3 x 3` magic square is a `3 x 3` grid filled with distinct numbers from `1` to `9` such that each row, column, and both diagonals all have the same sum.</p>\n<p>Given a `row x col` `grid` of integers, how many `3 x 3` \"magic square\" subgrids are there?  (Each subgrid is contiguous).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def magic_squares_in_grid(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]",
        "output": "1",
        "explanation": "The following subgrid is a 3 x 3 magic square:"
      },
      {
        "input": "grid = [[8]]",
        "output": "0"
      },
      {
        "input": "grid = [[4,4],[3,3]]",
        "output": "0"
      },
      {
        "input": "grid = [[4,7,8],[9,5,1],[2,3,6]]",
        "output": "0"
      }
    ],
    "constraints": [
      "row == grid.length",
      "col == grid[i].length",
      "1 <= row, col <= 10",
      "0 <= grid[i][j] <= 15"
    ]
  },
  {
    "questionId": 844,
    "title": "Backspace String Compare",
    "titleSlug": "backspace-string-compare",
    "content": "<p>Given two strings `s` and `t`, return `true` if they are equal when both are typed into empty text editors. `'#'` means a backspace character.</p>\n<p>Note that after backspacing an empty text, the text will continue empty.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def backspace_string_compare(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"ab#c\", t = \"ad#c\"",
        "output": "true",
        "explanation": "Both s and t become \"ac\"."
      },
      {
        "input": "s = \"ab##\", t = \"c#d#\"",
        "output": "true",
        "explanation": "Both s and t become \"\"."
      },
      {
        "input": "s = \"a##c\", t = \"#a#c\"",
        "output": "true",
        "explanation": "Both s and t become \"c\"."
      },
      {
        "input": "s = \"a#c\", t = \"b\"",
        "output": "false",
        "explanation": "s becomes \"c\" while t becomes \"b\"."
      }
    ],
    "constraints": [
      "1 <= s.length, t.length <= 200",
      "s and t only contain lowercase letters and '#' characters.",
      "Follow up: Can you solve it in O(n) time and O(1) space?"
    ]
  },
  {
    "questionId": 845,
    "title": "Longest Mountain in Array",
    "titleSlug": "longest-mountain-in-array",
    "content": "<p>You may recall that an array `arr` is a mountain array if and only if:\n`arr.length >= 3`\nThere exists some index `i` (0-indexed) with `0 < i < arr.length - 1` such that:</p>\n<p>`arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n`arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\nGiven an integer array `arr`, return the length of the longest subarray, which is a mountain. Return `0` if there is no mountain subarray.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_mountain_in_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [2,1,4,7,3,2,5]",
        "output": "5",
        "explanation": "The largest mountain is [1,4,7,3,2] which has length 5."
      },
      {
        "input": "arr = [2,2,2]",
        "output": "0",
        "explanation": "There is no mountain."
      }
    ],
    "constraints": [
      "1 <= arr.length <= 104",
      "0 <= arr[i] <= 104",
      "Follow up:",
      "Can you solve it using only one pass?",
      "Can you solve it in O(1) space?"
    ]
  },
  {
    "questionId": 846,
    "title": "Hand of Straights",
    "titleSlug": "hand-of-straights",
    "content": "<p>Alice has a `hand` of cards, given as an array of integers.</p>\n<p>Now she wants to rearrange the cards into groups so that each group is size `W`, and consists of `W` consecutive cards.</p>\n<p>Return `true` if and only if she can.</p>\n<p>Note: This question is the same as 1296: https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def hand_of_straights(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "hand = [1,2,3,6,2,3,4,7,8], W = 3",
        "output": "true",
        "explanation": "Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]"
      },
      {
        "input": "hand = [1,2,3,4,5], W = 4",
        "output": "false",
        "explanation": "Alice's hand can't be rearranged into groups of 4."
      }
    ],
    "constraints": [
      "1 <= hand.length <= 10000",
      "0 <= hand[i] <= 10^9",
      "1 <= W <= hand.length"
    ]
  },
  {
    "questionId": 849,
    "title": "Maximize Distance to Closest Person",
    "titleSlug": "maximize-distance-to-closest-person",
    "content": "<p>You are given an array representing a row of `seats` where `seats[i] = 1` represents a person sitting in the `ith` seat, and `seats[i] = 0` represents that the `ith` seat is empty (0-indexed).</p>\n<p>There is at least one empty seat, and at least one person sitting.</p>\n<p>Alex wants to sit in the seat such that the distance between him and the closest person to him is maximized. \nReturn that maximum distance to the closest person.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximize_distance_to_closest_person(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "seats = [1,0,0,0,1,0,1]",
        "output": "2",
        "explanation": "If Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2."
      },
      {
        "input": "seats = [1,0,0,0]",
        "output": "3",
        "explanation": "If Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away."
      },
      {
        "input": "seats = [0,1]",
        "output": "1"
      }
    ],
    "constraints": [
      "2 <= seats.length <= 2 * 104",
      "seats[i] is 0 or 1.",
      "At least one seat is empty.",
      "At least one seat is occupied."
    ]
  },
  {
    "questionId": 852,
    "title": "Peak Index in a Mountain Array",
    "titleSlug": "peak-index-in-a-mountain-array",
    "content": "<p>Let's call an array `arr` a mountain if the following properties hold:\n`arr.length >= 3`\nThere exists some `i` with `0 < i < arr.length - 1` such that:</p>\n<p>`arr[0] < arr[1] < ... arr[i-1] < arr[i] `\n`arr[i] > arr[i+1] > ... > arr[arr.length - 1]`\nGiven an integer array `arr` that is guaranteed to be a mountain, return any `i` such that `arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def peak_index_in_a_mountain_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [0,1,0]",
        "output": "1"
      },
      {
        "input": "arr = [0,2,1,0]",
        "output": "1"
      },
      {
        "input": "arr = [0,10,5,2]",
        "output": "1"
      },
      {
        "input": "arr = [3,4,5,1]",
        "output": "2"
      },
      {
        "input": "arr = [24,69,100,99,79,78,67,36,26,19]",
        "output": "2"
      }
    ],
    "constraints": [
      "3 <= arr.length <= 104",
      "0 <= arr[i] <= 106",
      "arr is guaranteed to be a mountain array.",
      "Follow up: Finding the O(n) is straightforward, could you find an O(log(n)) solution?"
    ]
  },
  {
    "questionId": 859,
    "title": "Buddy Strings",
    "titleSlug": "buddy-strings",
    "content": "<p>Given two strings `a` and `b`, return `true` if you can swap two letters in `a` so the result is equal to `b`, otherwise, return `false`.</p>\n<p>Swapping letters is defined as taking two indices `i` and `j` (0-indexed) such that `i != j` and swapping the characters at `a[i]` and `b[j]`. For example, swapping at indices `0` and `2` in `\"abcd\"` results in `\"cbad\"`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def buddy_strings(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "a = \"ab\", b = \"ba\"",
        "output": "true",
        "explanation": "You can swap a[0] = 'a' and a[1] = 'b' to get \"ba\", which is equal to b."
      },
      {
        "input": "a = \"ab\", b = \"ab\"",
        "output": "false",
        "explanation": "The only letters you can swap are a[0] = 'a' and a[1] = 'b', which results in \"ba\" != b."
      },
      {
        "input": "a = \"aa\", b = \"aa\"",
        "output": "true",
        "explanation": "You can swap a[0] = 'a' and a[1] = 'a' to get \"aa\", which is equal to b."
      },
      {
        "input": "a = \"aaaaaaabc\", b = \"aaaaaaacb\"",
        "output": "true"
      }
    ],
    "constraints": [
      "1 <= a.length, b.length <= 2 * 104",
      "a and b consist of lowercase letters."
    ]
  },
  {
    "questionId": 865,
    "title": "Smallest Subtree with all the Deepest Nodes",
    "titleSlug": "smallest-subtree-with-all-the-deepest-nodes",
    "content": "<p>Given the `root` of a binary tree, the depth of each node is the shortest distance to the root.</p>\n<p>Return the smallest subtree such that it contains all the deepest nodes in the original tree.</p>\n<p>A node is called the deepest if it has the largest depth possible among any node in the entire tree.</p>\n<p>The subtree of a node is tree consisting of that node, plus the set of all descendants of that node.</p>\n<p>Note: This question is the same as 1123: https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def smallest_subtree_with_all_the_deepest_nodes(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4]",
        "output": "[2,7,4]",
        "explanation": "We return the node with value 2, colored in yellow in the diagram."
      },
      {
        "input": "root = [1]",
        "output": "[1]",
        "explanation": "The root is the deepest node in the tree."
      },
      {
        "input": "root = [0,1,3,null,2]",
        "output": "[2]",
        "explanation": "The deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest."
      }
    ],
    "constraints": [
      "The number of nodes in the tree will be in the range [1, 500].",
      "0 <= Node.val <= 500",
      "The values of the nodes in the tree are unique."
    ]
  },
  {
    "questionId": 867,
    "title": "Transpose Matrix",
    "titleSlug": "transpose-matrix",
    "content": "<p>Given a 2D integer array `matrix`, return the transpose of `matrix`.</p>\n<p>The transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def transpose_matrix(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
        "output": "[[1,4,7],[2,5,8],[3,6,9]]"
      },
      {
        "input": "matrix = [[1,2,3],[4,5,6]]",
        "output": "[[1,4],[2,5],[3,6]]"
      }
    ],
    "constraints": [
      "m == matrix.length",
      "n == matrix[i].length",
      "1 <= m, n <= 1000",
      "1 <= m * n <= 105",
      "-109 <= matrix[i][j] <= 109"
    ]
  },
  {
    "questionId": 868,
    "title": "Binary Gap",
    "titleSlug": "binary-gap",
    "content": "<p>Given a positive integer `n`, find and return the longest distance between any two adjacent `1`'s in the binary representation of `n`. If there are no two adjacent `1`'s, return `0`.</p>\n<p>Two `1`'s are adjacent if there are only `0`'s separating them (possibly no `0`'s). The distance between two `1`'s is the absolute difference between their bit positions. For example, the two `1`'s in `\"1001\"` have a distance of 3.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def binary_gap(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 22",
        "output": "2",
        "explanation": "22 in binary is \"10110\"."
      },
      {
        "input": "n = 5",
        "output": "2",
        "explanation": "5 in binary is \"101\"."
      },
      {
        "input": "n = 6",
        "output": "1",
        "explanation": "6 in binary is \"110\"."
      },
      {
        "input": "n = 8",
        "output": "0",
        "explanation": "8 in binary is \"1000\"."
      },
      {
        "input": "n = 1",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= n <= 109"
    ]
  },
  {
    "questionId": 869,
    "title": "Reordered Power of 2",
    "titleSlug": "reordered-power-of-2",
    "content": "<p>You are given an integer `n`. We reorder the digits in any order (including the original order) such that the leading digit is not zero.</p>\n<p>Return `true` if and only if we can do this so that the resulting number is a power of two.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def reordered_power_of_2(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 1",
        "output": "true"
      },
      {
        "input": "n = 10",
        "output": "false"
      },
      {
        "input": "n = 16",
        "output": "true"
      },
      {
        "input": "n = 24",
        "output": "false"
      },
      {
        "input": "n = 46",
        "output": "true"
      }
    ],
    "constraints": [
      "1 <= n <= 109"
    ]
  },
  {
    "questionId": 872,
    "title": "Leaf-Similar Trees",
    "titleSlug": "leaf-similar-trees",
    "content": "<p>Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.</p>\n<p>For example, in the given tree above, the leaf value sequence is `(6, 7, 4, 9, 8)`.</p>\n<p>Two binary trees are considered leaf-similar if their leaf value sequence is the same.</p>\n<p>Return `true` if and only if the two given trees with head nodes `root1` and `root2` are leaf-similar.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def leaf_similar_trees(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]",
        "output": "true"
      },
      {
        "input": "root1 = [1], root2 = [1]",
        "output": "true"
      },
      {
        "input": "root1 = [1], root2 = [2]",
        "output": "false"
      },
      {
        "input": "root1 = [1,2], root2 = [2,2]",
        "output": "true"
      },
      {
        "input": "root1 = [1,2,3], root2 = [1,3,2]",
        "output": "false"
      }
    ],
    "constraints": [
      "The number of nodes in each tree will be in the range [1, 200].",
      "Both of the given trees will have values in the range [0, 200]."
    ]
  },
  {
    "questionId": 873,
    "title": "Length of Longest Fibonacci Subsequence",
    "titleSlug": "length-of-longest-fibonacci-subsequence",
    "content": "<p>A sequence `X1, X2, ..., Xn` is Fibonacci-like if:\n`n >= 3`\n`Xi + Xi+1 = Xi+2` for all `i + 2 <= n`\nGiven a strictly increasing array `arr` of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of `arr`. If one does not exist, return `0`.</p>\n<p>A subsequence is derived from another sequence `arr` by deleting any number of elements (including none) from `arr`, without changing the order of the remaining elements. For example, `[3, 5, 8]` is a subsequence of `[3, 4, 5, 6, 7, 8]`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def length_of_longest_fibonacci_subsequence(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [1,2,3,4,5,6,7,8]",
        "output": "5",
        "explanation": "The longest subsequence that is fibonacci-like: [1,2,3,5,8]."
      },
      {
        "input": "arr = [1,3,7,11,12,14,18]",
        "output": "3",
        "explanation": "The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18]."
      }
    ],
    "constraints": [
      "3 <= arr.length <= 1000",
      "1 <= arr[i] < arr[i + 1] <= 109"
    ]
  },
  {
    "questionId": 874,
    "title": "Walking Robot Simulation",
    "titleSlug": "walking-robot-simulation",
    "content": "<p>A robot on an infinite XY-plane starts at point `(0, 0)` and faces north. The robot can receive one of three possible types of `commands`:\n`-2`: turn left `90` degrees,\n`-1`: turn right `90` degrees, or\n`1 <= k <= 9`: move forward `k` units.</p>\n<p>Some of the grid squares are `obstacles`. The `ith` obstacle is at grid point `obstacles[i] = (xi, yi)`.</p>\n<p>If the robot would try to move onto them, the robot stays on the previous grid square instead (but still continues following the rest of the route.)\nReturn the maximum Euclidean distance that the robot will be from the origin squared (i.e. if the distance is `5`, return `25`).</p>\n<p>Note:\nNorth means +Y direction.</p>\n<p>East means +X direction.</p>\n<p>South means -Y direction.</p>\n<p>West means -X direction.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def walking_robot_simulation(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "commands = [4,-1,3], obstacles = []",
        "output": "25",
        "explanation": "The robot starts at (0, 0):"
      },
      {
        "input": "commands = [4,-1,4,-2,4], obstacles = [[2,4]]",
        "output": "65",
        "explanation": "The robot starts at (0, 0):"
      }
    ],
    "constraints": [
      "1 <= commands.length <= 104",
      "commands[i] is one of the values in the list [-2,-1,1,2,3,4,5,6,7,8,9].",
      "0 <= obstacles.length <= 104",
      "-3 * 104 <= xi, yi <= 3 * 104",
      "The answer is guaranteed to be less than 231."
    ]
  },
  {
    "questionId": 875,
    "title": "Koko Eating Bananas",
    "titleSlug": "koko-eating-bananas",
    "content": "<p>Koko loves to eat bananas. There are `n` piles of bananas, the `ith` pile has `piles[i]` bananas. The guards have gone and will come back in `h` hours.</p>\n<p>Koko can decide her bananas-per-hour eating speed of `k`. Each hour, she chooses some pile of bananas and eats `k` bananas from that pile. If the pile has less than `k` bananas, she eats all of them instead and will not eat any more bananas during this hour.</p>\n<p>Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.</p>\n<p>Return the minimum integer `k` such that she can eat all the bananas within `h` hours.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def koko_eating_bananas(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "piles = [3,6,7,11], h = 8",
        "output": "4"
      },
      {
        "input": "piles = [30,11,23,4,20], h = 5",
        "output": "30"
      },
      {
        "input": "piles = [30,11,23,4,20], h = 6",
        "output": "23"
      }
    ],
    "constraints": [
      "1 <= piles.length <= 104",
      "piles.length <= h <= 109",
      "1 <= piles[i] <= 109"
    ]
  },
  {
    "questionId": 877,
    "title": "Stone Game",
    "titleSlug": "stone-game",
    "content": "<p>Alex and Lee play a game with piles of stones.  There are an even number of piles arranged in a row, and each pile has a positive integer number of stones `piles[i]`.</p>\n<p>The objective of the game is to end with the most stones.  The total number of stones is odd, so there are no ties.</p>\n<p>Alex and Lee take turns, with Alex starting first.  Each turn, a player takes the entire pile of stones from either the beginning or the end of the row.  This continues until there are no more piles left, at which point the person with the most stones wins.</p>\n<p>Assuming Alex and Lee play optimally, return `True` if and only if Alex wins the game.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def stone_game(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "piles = [5,3,4,5]",
        "output": "true",
        "explanation": "Alex starts first, and can only take the first 5 or the last 5."
      }
    ],
    "constraints": [
      "2 <= piles.length <= 500",
      "piles.length is even.",
      "1 <= piles[i] <= 500",
      "sum(piles) is odd."
    ]
  },
  {
    "questionId": 880,
    "title": "Decoded String at Index",
    "titleSlug": "decoded-string-at-index",
    "content": "<p>An encoded string `S` is given.  To find and write the decoded string to a tape, the encoded string is read one character at a time and the following steps are taken:\nIf the character read is a letter, that letter is written onto the tape.</p>\n<p>If the character read is a digit (say `d`), the entire current tape is repeatedly written `d-1` more times in total.</p>\n<p>Now for some encoded string `S`, and an index `K`, find and return the `K`-th letter (1 indexed) in the decoded string.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def decoded_string_at_index(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "S = \"leet2code3\", K = 10",
        "output": "\"o\"",
        "explanation": "The decoded string is \"leetleetcodeleetleetcodeleetleetcode\"."
      },
      {
        "input": "S = \"ha22\", K = 5",
        "output": "\"h\"",
        "explanation": "The decoded string is \"hahahaha\".  The 5th letter is \"h\"."
      },
      {
        "input": "S = \"a2345678999999999999999\", K = 1",
        "output": "\"a\"",
        "explanation": "The decoded string is \"a\" repeated 8301530446056247680 times.  The 1st letter is \"a\"."
      }
    ],
    "constraints": [
      "2 <= S.length <= 100",
      "S will only contain lowercase letters and digits 2 through 9.",
      "S starts with a letter.",
      "1 <= K <= 10^9",
      "It's guaranteed that K is less than or equal to the length of the decoded string.",
      "The decoded string is guaranteed to have less than 2^63 letters."
    ]
  },
  {
    "questionId": 881,
    "title": "Boats to Save People",
    "titleSlug": "boats-to-save-people",
    "content": "<p>You are given an array `people` where `people[i]` is the weight of the `ith` person, and an infinite number of boats where each boat can carry a maximum weight of `limit`. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most `limit`.</p>\n<p>Return the minimum number of boats to carry every given person.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def boats_to_save_people(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "people = [1,2], limit = 3",
        "output": "1",
        "explanation": "1 boat (1, 2)"
      },
      {
        "input": "people = [3,2,2,1], limit = 3",
        "output": "3",
        "explanation": "3 boats (1, 2), (2) and (3)"
      },
      {
        "input": "people = [3,5,3,4], limit = 5",
        "output": "4",
        "explanation": "4 boats (3), (3), (4), (5)"
      }
    ],
    "constraints": [
      "1 <= people.length <= 5 * 104",
      "1 <= people[i] <= limit <= 3 * 104"
    ]
  },
  {
    "questionId": 883,
    "title": "Projection Area of 3D Shapes",
    "titleSlug": "projection-area-of-3d-shapes",
    "content": "<p>You are given an `n x n` `grid` where we place some `1 x 1 x 1` cubes that are axis-aligned with the `x`, `y`, and `z` axes.</p>\n<p>Each value `v = grid[i][j]` represents a tower of `v` cubes placed on top of the cell `(i, j)`.</p>\n<p>We view the projection of these cubes onto the `xy`, `yz`, and `zx` planes.</p>\n<p>A projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. We are viewing the \"shadow\" when looking at the cubes from the top, the front, and the side.</p>\n<p>Return the total area of all three projections.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def projection_area_of_3d_shapes(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "grid = [[1,2],[3,4]]",
        "output": "17",
        "explanation": "Here are the three projections (\"shadows\") of the shape made with each axis-aligned plane."
      },
      {
        "input": "grid = [[2]]",
        "output": "5"
      },
      {
        "input": "grid = [[1,0],[0,2]]",
        "output": "8"
      },
      {
        "input": "grid = [[1,1,1],[1,0,1],[1,1,1]]",
        "output": "14"
      },
      {
        "input": "grid = [[2,2,2],[2,1,2],[2,2,2]]",
        "output": "21"
      }
    ],
    "constraints": [
      "n == grid.length",
      "n == grid[i].length",
      "1 <= n <= 50",
      "0 <= grid[i][j] <= 50"
    ]
  },
  {
    "questionId": 886,
    "title": "Possible Bipartition",
    "titleSlug": "possible-bipartition",
    "content": "<p>Given a set of `N` people (numbered `1, 2, ..., N`), we would like to split everyone into two groups of any size.</p>\n<p>Each person may dislike some other people, and they should not go into the same group. \nFormally, if `dislikes[i] = [a, b]`, it means it is not allowed to put the people numbered `a` and `b` into the same group.</p>\n<p>Return `true` if and only if it is possible to split everyone into two groups in this way.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def possible_bipartition(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "N = 4, dislikes = [[1,2],[1,3],[2,4]]",
        "output": "true",
        "explanation": "group1 [1,4], group2 [2,3]"
      },
      {
        "input": "N = 3, dislikes = [[1,2],[1,3],[2,3]]",
        "output": "false"
      },
      {
        "input": "N = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= N <= 2000",
      "0 <= dislikes.length <= 10000",
      "dislikes[i].length == 2",
      "1 <= dislikes[i][j] <= N",
      "dislikes[i][0] < dislikes[i][1]",
      "There does not exist i != j for which dislikes[i] == dislikes[j]."
    ]
  },
  {
    "questionId": 892,
    "title": "Surface Area of 3D Shapes",
    "titleSlug": "surface-area-of-3d-shapes",
    "content": "<p>You are given an `n x n` `grid` where you have placed some `1 x 1 x 1` cubes. Each value `v = grid[i][j]` represents a tower of `v` cubes placed on top of cell `(i, j)`.</p>\n<p>After placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes.</p>\n<p>Return the total surface area of the resulting shapes.</p>\n<p>Note: The bottom face of each shape counts toward its surface area.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def surface_area_of_3d_shapes(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "grid = [[2]]",
        "output": "10"
      },
      {
        "input": "grid = [[1,2],[3,4]]",
        "output": "34"
      },
      {
        "input": "grid = [[1,0],[0,2]]",
        "output": "16"
      },
      {
        "input": "grid = [[1,1,1],[1,0,1],[1,1,1]]",
        "output": "32"
      },
      {
        "input": "grid = [[2,2,2],[2,1,2],[2,2,2]]",
        "output": "46"
      }
    ],
    "constraints": [
      "n == grid.length",
      "n == grid[i].length",
      "1 <= n <= 50",
      "0 <= grid[i][j] <= 50"
    ]
  },
  {
    "questionId": 894,
    "title": "All Possible Full Binary Trees",
    "titleSlug": "all-possible-full-binary-trees",
    "content": "<p>Given an integer `n`, return a list of all possible full binary trees with `n` nodes. Each node of each tree in the answer must have `Node.val == 0`.</p>\n<p>Each element of the answer is the root node of one possible tree. You may return the final list of trees in any order.</p>\n<p>A full binary tree is a binary tree where each node has exactly `0` or `2` children.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def all_possible_full_binary_trees(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 7",
        "output": "[[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]"
      },
      {
        "input": "n = 3",
        "output": "[[0,0,0]]"
      }
    ],
    "constraints": [
      "1 <= n <= 20"
    ]
  },
  {
    "questionId": 897,
    "title": "Increasing Order Search Tree",
    "titleSlug": "increasing-order-search-tree",
    "content": "<p>Given the `root` of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def increasing_order_search_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [5,3,6,2,4,null,8,1,null,null,null,7,9]",
        "output": "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]"
      },
      {
        "input": "root = [5,1,7]",
        "output": "[1,null,5,null,7]"
      }
    ],
    "constraints": [
      "The number of nodes in the given tree will be in the range [1, 100].",
      "0 <= Node.val <= 1000"
    ]
  },
  {
    "questionId": 898,
    "title": "Bitwise ORs of Subarrays",
    "titleSlug": "bitwise-ors-of-subarrays",
    "content": "<p>We have an array `arr` of non-negative integers.</p>\n<p>For every (contiguous) subarray `sub = [arr[i], arr[i + 1], ..., arr[j]]` (with `i <= j`), we take the bitwise OR of all the elements in `sub`, obtaining a result `arr[i] | arr[i + 1] | ... | arr[j]`.</p>\n<p>Return the number of possible results. Results that occur more than once are only counted once in the final answer</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def bitwise_ors_of_subarrays(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [0]",
        "output": "1",
        "explanation": "There is only one possible result: 0."
      },
      {
        "input": "arr = [1,1,2]",
        "output": "3",
        "explanation": "The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2]."
      },
      {
        "input": "arr = [1,2,4]",
        "output": "6",
        "explanation": "The possible results are 1, 2, 3, 4, 6, and 7."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 5 * 104",
      "0 <= nums[i] <= 109"
    ]
  },
  {
    "questionId": 907,
    "title": "Sum of Subarray Minimums",
    "titleSlug": "sum-of-subarray-minimums",
    "content": "<p>Given an array of integers arr, find the sum of `min(b)`, where `b` ranges over every (contiguous) subarray of `arr`. Since the answer may be large, return the answer modulo `109 + 7`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sum_of_subarray_minimums(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [3,1,2,4]",
        "output": "17",
        "explanation": "Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]."
      },
      {
        "input": "arr = [11,81,94,43,3]",
        "output": "444"
      }
    ],
    "constraints": [
      "1 <= arr.length <= 3 * 104",
      "1 <= arr[i] <= 3 * 104"
    ]
  },
  {
    "questionId": 912,
    "title": "Sort an Array",
    "titleSlug": "sort-an-array",
    "content": "<p>Given an array of integers `nums`, sort the array in ascending order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sort_an_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [5,2,3,1]",
        "output": "[1,2,3,5]"
      },
      {
        "input": "nums = [5,1,1,2,0,0]",
        "output": "[0,0,1,1,2,5]"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 50000",
      "-50000 <= nums[i] <= 50000"
    ]
  },
  {
    "questionId": 914,
    "title": "X of a Kind in a Deck of Cards",
    "titleSlug": "x-of-a-kind-in-a-deck-of-cards",
    "content": "<p>In a deck of cards, each card has an integer written on it.</p>\n<p>Return `true` if and only if you can choose `X >= 2` such that it is possible to split the entire deck into 1 or more groups of cards, where:\nEach group has exactly `X` cards.</p>\n<p>All the cards in each group have the same integer.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def x_of_a_kind_in_a_deck_of_cards(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "deck = [1,2,3,4,4,3,2,1]",
        "output": "true",
        "explanation": "Possible partition [1,1],[2,2],[3,3],[4,4]."
      },
      {
        "input": "deck = [1,1,1,2,2,2,3,3]",
        "output": "false",
        "explanation": "No possible partition."
      },
      {
        "input": "deck = [1]",
        "output": "false",
        "explanation": "No possible partition."
      },
      {
        "input": "deck = [1,1]",
        "output": "true",
        "explanation": "Possible partition [1,1]."
      },
      {
        "input": "deck = [1,1,2,2,2,2]",
        "output": "true",
        "explanation": "Possible partition [1,1],[2,2],[2,2]."
      }
    ],
    "constraints": [
      "1 <= deck.length <= 104",
      "0 <= deck[i] < 104"
    ]
  },
  {
    "questionId": 922,
    "title": "Sort Array By Parity II",
    "titleSlug": "sort-array-by-parity-ii",
    "content": "<p>Given an array of integers `nums`, half of the integers in `nums` are odd, and the other half are even.</p>\n<p>Sort the array so that whenever `nums[i]` is odd, `i` is odd, and whenever `nums[i]` is even, `i` is even.</p>\n<p>Return any answer array that satisfies this condition.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sort_array_by_parity_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [4,2,5,7]",
        "output": "[4,5,2,7]",
        "explanation": "[4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted."
      },
      {
        "input": "nums = [2,3]",
        "output": "[2,3]"
      }
    ],
    "constraints": [
      "2 <= nums.length <= 2 * 104",
      "nums.length is even.",
      "Half of the integers in nums are even.",
      "0 <= nums[i] <= 1000"
    ]
  },
  {
    "questionId": 923,
    "title": "3Sum With Multiplicity",
    "titleSlug": "3sum-with-multiplicity",
    "content": "<p>Given an integer array `arr`, and an integer `target`, return the number of tuples `i, j, k` such that `i < j < k` and `arr[i] + arr[j] + arr[k] == target`.</p>\n<p>As the answer can be very large, return it modulo `109 + 7`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def 3sum_with_multiplicity(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [1,1,2,2,3,3,4,4,5,5], target = 8",
        "output": "20",
        "explanation": "Enumerating by the values (arr[i], arr[j], arr[k]):"
      },
      {
        "input": "arr = [1,1,2,2,2,2], target = 5",
        "output": "12",
        "explanation": "arr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times:"
      }
    ],
    "constraints": [
      "3 <= arr.length <= 3000",
      "0 <= arr[i] <= 100",
      "0 <= target <= 300"
    ]
  },
  {
    "questionId": 925,
    "title": "Long Pressed Name",
    "titleSlug": "long-pressed-name",
    "content": "<p>Your friend is typing his `name` into a keyboard. Sometimes, when typing a character `c`, the key might get long pressed, and the character will be typed 1 or more times.</p>\n<p>You examine the `typed` characters of the keyboard. Return `True` if it is possible that it was your friends name, with some characters (possibly none) being long pressed.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def long_pressed_name(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "name = \"alex\", typed = \"aaleex\"",
        "output": "true",
        "explanation": "'a' and 'e' in 'alex' were long pressed."
      },
      {
        "input": "name = \"saeed\", typed = \"ssaaedd\"",
        "output": "false",
        "explanation": "'e' must have been pressed twice, but it wasn't in the typed output."
      },
      {
        "input": "name = \"leelee\", typed = \"lleeelee\"",
        "output": "true"
      },
      {
        "input": "name = \"laiden\", typed = \"laiden\"",
        "output": "true",
        "explanation": "It's not necessary to long press any character."
      }
    ],
    "constraints": [
      "1 <= name.length <= 1000",
      "1 <= typed.length <= 1000",
      "name and typed contain only lowercase English letters."
    ]
  },
  {
    "questionId": 929,
    "title": "Unique Email Addresses",
    "titleSlug": "unique-email-addresses",
    "content": "<p>Every valid email consists of a local name and a domain name, separated by the `'@'` sign. Besides lowercase letters, the email may contain one or more `'.'` or `'+'`.</p>\n<p>For example, in `\"alice@leetcode.com\"`, `\"alice\"` is the local name, and `\"leetcode.com\"` is the domain name.</p>\n<p>If you add periods `'.'` between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule does not apply to domain names.</p>\n<p>For example, `\"alice.z@leetcode.com\"` and `\"alicez@leetcode.com\"` forward to the same email address.</p>\n<p>If you add a plus `'+'` in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered. Note that this rule does not apply to domain names.</p>\n<p>For example, `\"m.y+name@email.com\"` will be forwarded to `\"my@email.com\"`.</p>\n<p>It is possible to use both of these rules at the same time.</p>\n<p>Given an array of strings `emails` where we send one email to each `email[i]`, return the number of different addresses that actually receive mails.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def unique_email_addresses(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "emails = [\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]",
        "output": "2",
        "explanation": "\"testemail@leetcode.com\" and \"testemail@lee.tcode.com\" actually receive mails."
      },
      {
        "input": "emails = [\"a@leetcode.com\",\"b@leetcode.com\",\"c@leetcode.com\"]",
        "output": "3"
      }
    ],
    "constraints": [
      "1 <= emails.length <= 100",
      "1 <= emails[i].length <= 100",
      "email[i] consist of lowercase English letters, '+', '.' and '@'.",
      "Each emails[i] contains exactly one '@' character.",
      "All local and domain names are non-empty.",
      "Local names do not start with a '+' character."
    ]
  },
  {
    "questionId": 931,
    "title": "Minimum Falling Path Sum",
    "titleSlug": "minimum-falling-path-sum",
    "content": "<p>Given an `n x n` array of integers `matrix`, return the minimum sum of any falling path through `matrix`.</p>\n<p>A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position `(row, col)` will be `(row + 1, col - 1)`, `(row + 1, col)`, or `(row + 1, col + 1)`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_falling_path_sum(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "matrix = [[2,1,3],[6,5,4],[7,8,9]]",
        "output": "13",
        "explanation": "There are two falling paths with a minimum sum underlined below:"
      },
      {
        "input": "matrix = [[-19,57],[-40,-5]]",
        "output": "-59",
        "explanation": "The falling path with a minimum sum is underlined below:"
      },
      {
        "input": "matrix = [[-48]]",
        "output": "-48"
      }
    ],
    "constraints": [
      "n == matrix.length",
      "n == matrix[i].length",
      "1 <= n <= 100",
      "-100 <= matrix[i][j] <= 100"
    ]
  },
  {
    "questionId": 933,
    "title": "Number of Recent Calls",
    "titleSlug": "number-of-recent-calls",
    "content": "<p>You have a `RecentCounter` class which counts the number of recent requests within a certain time frame.</p>\n<p>Implement the `RecentCounter` class:\n`RecentCounter()` Initializes the counter with zero recent requests.</p>\n<p>`int ping(int t)` Adds a new request at time `t`, where `t` represents some time in milliseconds, and returns the number of requests that has happened in the past `3000` milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range `[t - 3000, t]`.</p>\n<p>It is guaranteed that every call to `ping` uses a strictly larger value of `t` than the previous call.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_recent_calls(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= t <= 109",
      "Each test case will call ping with strictly increasing values of t.",
      "At most 104 calls will be made to ping."
    ]
  },
  {
    "questionId": 934,
    "title": "Shortest Bridge",
    "titleSlug": "shortest-bridge",
    "content": "<p>In a given 2D binary array `A`, there are two islands.  (An island is a 4-directionally connected group of `1`s not connected to any other 1s.)\nNow, we may change `0`s to `1`s so as to connect the two islands together to form 1 island.</p>\n<p>Return the smallest number of `0`s that must be flipped.  (It is guaranteed that the answer is at least 1.)</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def shortest_bridge(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "A = [[0,1],[1,0]]",
        "output": "1"
      },
      {
        "input": "A = [[0,1,0],[0,0,0],[0,0,1]]",
        "output": "2"
      },
      {
        "input": "A = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]",
        "output": "1"
      }
    ],
    "constraints": [
      "2 <= A.length == A[0].length <= 100",
      "A[i][j] == 0 or A[i][j] == 1"
    ]
  },
  {
    "questionId": 935,
    "title": "Knight Dialer",
    "titleSlug": "knight-dialer",
    "content": "<p>The chess knight has a unique movement, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L). The possible movements of chess knight are shown in this diagaram:\nA chess knight can move as indicated in the chess diagram below:\nWe have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell (i.e. blue cell).</p>\n<p>Given an integer `n`, return how many distinct phone numbers of length `n` we can dial.</p>\n<p>You are allowed to place the knight on any numeric cell initially and then you should perform `n - 1` jumps to dial a number of length `n`. All jumps should be valid knight jumps.</p>\n<p>As the answer may be very large, return the answer modulo `109 + 7`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def knight_dialer(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 1",
        "output": "10",
        "explanation": "We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient."
      },
      {
        "input": "n = 2",
        "output": "20",
        "explanation": "All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]"
      },
      {
        "input": "n = 3",
        "output": "46"
      },
      {
        "input": "n = 4",
        "output": "104"
      },
      {
        "input": "n = 3131",
        "output": "136006598",
        "explanation": "Please take care of the mod."
      }
    ],
    "constraints": [
      "1 <= n <= 5000"
    ]
  },
  {
    "questionId": 937,
    "title": "Reorder Data in Log Files",
    "titleSlug": "reorder-data-in-log-files",
    "content": "<p>You are given an array of `logs`. Each log is a space-delimited string of words, where the first word is the identifier.</p>\n<p>There are two types of logs:\nLetter-logs: All words (except the identifier) consist of lowercase English letters.</p>\n<p>Digit-logs: All words (except the identifier) consist of digits.</p>\n<p>Reorder these logs so that:\nThe letter-logs come before all digit-logs.</p>\n<p>The letter-logs are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.</p>\n<p>The digit-logs maintain their relative ordering.</p>\n<p>Return the final order of the logs.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def reorder_data_in_log_files(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "logs = [\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"]",
        "output": "[\"let1 art can\",\"let3 art zero\",\"let2 own kit dig\",\"dig1 8 1 5 1\",\"dig2 3 6\"]",
        "explanation": "The letter-log contents are all different, so their ordering is \"art can\", \"art zero\", \"own kit dig\"."
      },
      {
        "input": "logs = [\"a1 9 2 3 1\",\"g1 act car\",\"zo4 4 7\",\"ab1 off key dog\",\"a8 act zoo\"]",
        "output": "[\"g1 act car\",\"a8 act zoo\",\"ab1 off key dog\",\"a1 9 2 3 1\",\"zo4 4 7\"]"
      }
    ],
    "constraints": [
      "1 <= logs.length <= 100",
      "3 <= logs[i].length <= 100",
      "All the tokens of logs[i] are separated by a single space.",
      "logs[i] is guaranteed to have an identifier and at least one word after the identifier."
    ]
  },
  {
    "questionId": 938,
    "title": "Range Sum of BST",
    "titleSlug": "range-sum-of-bst",
    "content": "<p>Given the `root` node of a binary search tree, return the sum of values of all nodes with a value in the range `[low, high]`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def range_sum_of_bst(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [10,5,15,3,7,null,18], low = 7, high = 15",
        "output": "32"
      },
      {
        "input": "root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10",
        "output": "23"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 2 * 104].",
      "1 <= Node.val <= 105",
      "1 <= low <= high <= 105",
      "All Node.val are unique."
    ]
  },
  {
    "questionId": 941,
    "title": "Valid Mountain Array",
    "titleSlug": "valid-mountain-array",
    "content": "<p>Given an array of integers `arr`, return `true` if and only if it is a valid mountain array.</p>\n<p>Recall that arr is a mountain array if and only if:\n`arr.length >= 3`\nThere exists some `i` with `0 < i < arr.length - 1` such that:</p>\n<p>`arr[0] < arr[1] < ... < arr[i - 1] < arr[i] `\n`arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def valid_mountain_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [2,1]",
        "output": "false"
      },
      {
        "input": "arr = [3,5,5]",
        "output": "false"
      },
      {
        "input": "arr = [0,3,2,1]",
        "output": "true"
      }
    ],
    "constraints": [
      "1 <= arr.length <= 104",
      "0 <= arr[i] <= 104"
    ]
  },
  {
    "questionId": 942,
    "title": "DI String Match",
    "titleSlug": "di-string-match",
    "content": "<p>A permutation `perm` of `n + 1` integers of all the integers in the range `[0, n]` can be represented as a string `s` of length `n` where:\n`s[i] == 'I'` if `perm[i] < perm[i + 1]`, and\n`s[i] == 'D'` if `perm[i] > perm[i + 1]`.</p>\n<p>Given a string `s`, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return any of them.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def di_string_match(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"IDID\"",
        "output": "[0,4,1,3,2]"
      },
      {
        "input": "s = \"III\"",
        "output": "[0,1,2,3]"
      },
      {
        "input": "s = \"DDI\"",
        "output": "[3,2,0,1]"
      }
    ],
    "constraints": [
      "1 <= s.length <= 105",
      "s[i] is either 'I' or 'D'."
    ]
  },
  {
    "questionId": 944,
    "title": "Delete Columns to Make Sorted",
    "titleSlug": "delete-columns-to-make-sorted",
    "content": "<p>You are given an array of `n` strings `strs`, all of the same length.</p>\n<p>The strings can be arranged such that there is one on each line, making a grid. For example, `strs = [\"abc\", \"bce\", \"cae\"]` can be arranged as:\nabc\nbce\ncae\nYou want to delete the columns that are not sorted lexicographically. In the above example (0-indexed), columns 0 (`'a'`, `'b'`, `'c'`) and 2 (`'c'`, `'e'`, `'e'`) are sorted while column 1 (`'b'`, `'c'`, `'a'`) is not, so you would delete column 1.</p>\n<p>Return the number of columns that you will delete.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def delete_columns_to_make_sorted(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "strs = [\"cba\",\"daf\",\"ghi\"]",
        "output": "1",
        "explanation": "The grid looks as follows:"
      },
      {
        "input": "strs = [\"a\",\"b\"]",
        "output": "0",
        "explanation": "The grid looks as follows:"
      },
      {
        "input": "strs = [\"zyx\",\"wvu\",\"tsr\"]",
        "output": "3",
        "explanation": "The grid looks as follows:"
      }
    ],
    "constraints": [
      "n == strs.length",
      "1 <= n <= 100",
      "1 <= strs[i].length <= 1000",
      "strs[i] consists of lowercase English letters."
    ]
  },
  {
    "questionId": 946,
    "title": "Validate Stack Sequences",
    "titleSlug": "validate-stack-sequences",
    "content": "<p>Given two sequences `pushed` and `popped` with distinct values, return `true` if and only if this could have been the result of a sequence of push and pop operations on an initially empty stack.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def validate_stack_sequences(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "pushed = [1,2,3,4,5], popped = [4,5,3,2,1]",
        "output": "true",
        "explanation": "We might do the following sequence:"
      },
      {
        "input": "pushed = [1,2,3,4,5], popped = [4,3,5,1,2]",
        "output": "false",
        "explanation": "1 cannot be popped before 2."
      }
    ],
    "constraints": [
      "0 <= pushed.length == popped.length <= 1000",
      "0 <= pushed[i], popped[i] < 1000",
      "pushed is a permutation of popped.",
      "pushed and popped have distinct values."
    ]
  },
  {
    "questionId": 947,
    "title": "Most Stones Removed with Same Row or Column",
    "titleSlug": "most-stones-removed-with-same-row-or-column",
    "content": "<p>On a 2D plane, we place `n` stones at some integer coordinate points. Each coordinate point may have at most one stone.</p>\n<p>A stone can be removed if it shares either the same row or the same column as another stone that has not been removed.</p>\n<p>Given an array `stones` of length `n` where `stones[i] = [xi, yi]` represents the location of the `ith` stone, return the largest possible number of stones that can be removed.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def most_stones_removed_with_same_row_or_column(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]",
        "output": "5",
        "explanation": "One way to remove 5 stones is as follows:"
      },
      {
        "input": "stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]",
        "output": "3",
        "explanation": "One way to make 3 moves is as follows:"
      },
      {
        "input": "stones = [[0,0]]",
        "output": "0",
        "explanation": "[0,0] is the only stone on the plane, so you cannot remove it."
      }
    ],
    "constraints": [
      "1 <= stones.length <= 1000",
      "0 <= xi, yi <= 104",
      "No two stones are at the same coordinate point."
    ]
  },
  {
    "questionId": 948,
    "title": "Bag of Tokens",
    "titleSlug": "bag-of-tokens",
    "content": "<p>You have an initial power of `P`, an initial score of `0`, and a bag of `tokens` where `tokens[i]` is the value of the `ith` token (0-indexed).</p>\n<p>Your goal is to maximize your total score by potentially playing each token in one of two ways:\nIf your current power is at least `tokens[i]`, you may play the `ith` token face up, losing `tokens[i]` power and gaining `1` score.</p>\n<p>If your current score is at least `1`, you may play the `ith` token face down, gaining `tokens[i]` power and losing `1` score.</p>\n<p>Each token may be played at most once and in any order. You do not have to play all the tokens.</p>\n<p>Return the largest possible score you can achieve after playing any number of tokens.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def bag_of_tokens(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "tokens = [100], P = 50",
        "output": "0",
        "explanation": "Playing the only token in the bag is impossible because you either have too little power or too little score."
      },
      {
        "input": "tokens = [100,200], P = 150",
        "output": "1",
        "explanation": "Play the 0th token (100) face up, your power becomes 50 and score becomes 1."
      },
      {
        "input": "tokens = [100,200,300,400], P = 200",
        "output": "2",
        "explanation": "Play the tokens in this order to get a score of 2:"
      }
    ],
    "constraints": [
      "0 <= tokens.length <= 1000",
      "0 <= tokens[i], P < 104"
    ]
  },
  {
    "questionId": 949,
    "title": "Largest Time for Given Digits",
    "titleSlug": "largest-time-for-given-digits",
    "content": "<p>Given an array `arr` of 4 digits, find the latest 24-hour time that can be made using each digit exactly once.</p>\n<p>24-hour times are formatted as `\"HH:MM\"`, where `HH` is between `00` and `23`, and `MM` is between `00` and `59`. The earliest 24-hour time is `00:00`, and the latest is `23:59`.</p>\n<p>Return the latest 24-hour time in `\"HH:MM\"` format.  If no valid time can be made, return an empty string.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def largest_time_for_given_digits(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "A = [1,2,3,4]",
        "output": "\"23:41\"",
        "explanation": "The valid 24-hour times are \"12:34\", \"12:43\", \"13:24\", \"13:42\", \"14:23\", \"14:32\", \"21:34\", \"21:43\", \"23:14\", and \"23:41\". Of these times, \"23:41\" is the latest."
      },
      {
        "input": "A = [5,5,5,5]",
        "output": "\"\"",
        "explanation": "There are no valid 24-hour times as \"55:55\" is not valid."
      },
      {
        "input": "A = [0,0,0,0]",
        "output": "\"00:00\""
      },
      {
        "input": "A = [0,0,1,0]",
        "output": "\"10:00\""
      }
    ],
    "constraints": [
      "arr.length == 4",
      "0 <= arr[i] <= 9"
    ]
  },
  {
    "questionId": 951,
    "title": "Flip Equivalent Binary Trees",
    "titleSlug": "flip-equivalent-binary-trees",
    "content": "<p>For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.</p>\n<p>A binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.</p>\n<p>Given the roots of two binary trees `root1` and `root2`, return `true` if the two trees are flip equivelent or `false` otherwise.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def flip_equivalent_binary_trees(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]",
        "output": "true",
        "explanation": "We flipped at nodes with values 1, 3, and 5."
      },
      {
        "input": "root1 = [], root2 = []",
        "output": "true"
      },
      {
        "input": "root1 = [], root2 = [1]",
        "output": "false"
      },
      {
        "input": "root1 = [0,null,1], root2 = []",
        "output": "false"
      },
      {
        "input": "root1 = [0,null,1], root2 = [0,1]",
        "output": "true"
      }
    ],
    "constraints": [
      "The number of nodes in each tree is in the range [0, 100].",
      "Each tree will have unique node values in the range [0, 99]."
    ]
  },
  {
    "questionId": 953,
    "title": "Verifying an Alien Dictionary",
    "titleSlug": "verifying-an-alien-dictionary",
    "content": "<p>In an alien language, surprisingly they also use english lowercase letters, but possibly in a different `order`. The `order` of the alphabet is some permutation of lowercase letters.</p>\n<p>Given a sequence of `words` written in the alien language, and the `order` of the alphabet, return `true` if and only if the given `words` are sorted lexicographicaly in this alien language.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def verifying_an_alien_dictionary(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "words = [\"hello\",\"leetcode\"], order = \"hlabcdefgijkmnopqrstuvwxyz\"",
        "output": "true",
        "explanation": "As 'h' comes before 'l' in this language, then the sequence is sorted."
      },
      {
        "input": "words = [\"word\",\"world\",\"row\"], order = \"worldabcefghijkmnpqstuvxyz\"",
        "output": "false",
        "explanation": "As 'd' comes after 'l' in this language, then words[0] > words[1], hence the sequence is unsorted."
      },
      {
        "input": "words = [\"apple\",\"app\"], order = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "false",
        "explanation": "The first three characters \"app\" match, and the second string is shorter (in size.) According to lexicographical rules \"apple\" > \"app\", because 'l' > '\u2205', where '\u2205' is defined as the blank character which is less than any other character (More info)."
      }
    ],
    "constraints": [
      "1 <= words.length <= 100",
      "1 <= words[i].length <= 20",
      "order.length == 26",
      "All characters in words[i] and order are English lowercase letters."
    ]
  },
  {
    "questionId": 954,
    "title": "Array of Doubled Pairs",
    "titleSlug": "array-of-doubled-pairs",
    "content": "<p>Given an array of integers `arr` of even length, return `true` if and only if it is possible to reorder it such that `arr[2 * i + 1] = 2 * arr[2 * i]` for every `0 <= i < len(arr) / 2`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def array_of_doubled_pairs(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [3,1,3,6]",
        "output": "false"
      },
      {
        "input": "arr = [2,1,2,6]",
        "output": "false"
      },
      {
        "input": "arr = [4,-2,2,-4]",
        "output": "true",
        "explanation": "We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4]."
      },
      {
        "input": "arr = [1,2,4,16,8,4]",
        "output": "false"
      }
    ],
    "constraints": [
      "0 <= arr.length <= 3 * 104",
      "arr.length is even.",
      "-105 <= arr[i] <= 105"
    ]
  },
  {
    "questionId": 955,
    "title": "Delete Columns to Make Sorted II",
    "titleSlug": "delete-columns-to-make-sorted-ii",
    "content": "<p>You are given an array of `n` strings `strs`, all of the same length.</p>\n<p>We may choose any deletion indices, and we delete all the characters in those indices for each string.</p>\n<p>For example, if we have `strs = [\"abcdef\",\"uvwxyz\"]` and deletion indices `{0, 2, 3}`, then the final array after deletions is `[\"bef\", \"vyz\"]`.</p>\n<p>Suppose we chose a set of deletion indices `answer` such that after deletions, the final array has its elements in lexicographic order (i.e., `strs[0] <= strs[1] <= strs[2] <= ... <= strs[n - 1]`). Return the minimum possible value of `answer.length`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def delete_columns_to_make_sorted_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "strs = [\"ca\",\"bb\",\"ac\"]",
        "output": "1",
        "explanation": "After deleting the first column, strs = [\"a\", \"b\", \"c\"]."
      },
      {
        "input": "strs = [\"xc\",\"yb\",\"za\"]",
        "output": "0",
        "explanation": "strs is already in lexicographic order, so we do not need to delete anything."
      },
      {
        "input": "strs = [\"zyx\",\"wvu\",\"tsr\"]",
        "output": "3",
        "explanation": "We have to delete every column."
      }
    ],
    "constraints": [
      "n == strs.length",
      "1 <= n <= 100",
      "1 <= strs[i].length <= 100",
      "strs[i] consists of lowercase English letters."
    ]
  },
  {
    "questionId": 957,
    "title": "Prison Cells After N Days",
    "titleSlug": "prison-cells-after-n-days",
    "content": "<p>There are `8` prison cells in a row and each cell is either occupied or vacant.</p>\n<p>Each day, whether the cell is occupied or vacant changes according to the following rules:\nIf a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.</p>\n<p>Otherwise, it becomes vacant.</p>\n<p>Note that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors.</p>\n<p>You are given an integer array `cells` where `cells[i] == 1` if the `ith` cell is occupied and `cells[i] == 0` if the `ith` cell is vacant, and you are given an integer `n`.</p>\n<p>Return the state of the prison after `n` days (i.e., `n` such changes described above).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def prison_cells_after_n_days(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "cells = [0,1,0,1,1,0,0,1], n = 7",
        "output": "[0,0,1,1,0,0,0,0]",
        "explanation": "The following table summarizes the state of the prison on each day:"
      },
      {
        "input": "cells = [1,0,0,1,0,0,1,0], n = 1000000000",
        "output": "[0,0,1,1,1,1,1,0]"
      }
    ],
    "constraints": [
      "cells.length == 8",
      "cells[i] is either 0 or 1.",
      "1 <= n <= 109"
    ]
  },
  {
    "questionId": 958,
    "title": "Check Completeness of a Binary Tree",
    "titleSlug": "check-completeness-of-a-binary-tree",
    "content": "<p>Given the `root` of a binary tree, determine if it is a complete binary tree.</p>\n<p>In a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between `1` and `2h` nodes inclusive at the last level `h`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def check_completeness_of_a_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2,3,4,5,6]",
        "output": "true",
        "explanation": "Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible."
      },
      {
        "input": "root = [1,2,3,4,5,null,7]",
        "output": "false",
        "explanation": "The node with value 7 isn't as far left as possible."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 100].",
      "1 <= Node.val <= 1000"
    ]
  },
  {
    "questionId": 966,
    "title": "Vowel Spellchecker",
    "titleSlug": "vowel-spellchecker",
    "content": "<p>Given a `wordlist`, we want to implement a spellchecker that converts a query word into a correct word.</p>\n<p>For a given `query` word, the spell checker handles two categories of spelling mistakes:\nCapitalization: If the query matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the case in the wordlist.</p>\n<p>Example: `wordlist = [\"yellow\"]`, `query = \"YellOw\"`: `correct = \"yellow\"`</p>\n<p>Example: `wordlist = [\"Yellow\"]`, `query = \"yellow\"`: `correct = \"Yellow\"`</p>\n<p>Example: `wordlist = [\"yellow\"]`, `query = \"yellow\"`: `correct = \"yellow\"`\nVowel Errors: If after replacing the vowels `('a', 'e', 'i', 'o', 'u')` of the query word with any vowel individually, it matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the match in the wordlist.</p>\n<p>Example: `wordlist = [\"YellOw\"]`, `query = \"yollow\"`: `correct = \"YellOw\"`</p>\n<p>Example: `wordlist = [\"YellOw\"]`, `query = \"yeellow\"`: `correct = \"\"` (no match)</p>\n<p>Example: `wordlist = [\"YellOw\"]`, `query = \"yllw\"`: `correct = \"\"` (no match)\nIn addition, the spell checker operates under the following precedence rules:\nWhen the query exactly matches a word in the wordlist (case-sensitive), you should return the same word back.</p>\n<p>When the query matches a word up to capitlization, you should return the first such match in the wordlist.</p>\n<p>When the query matches a word up to vowel errors, you should return the first such match in the wordlist.</p>\n<p>If the query has no matches in the wordlist, you should return the empty string.</p>\n<p>Given some `queries`, return a list of words `answer`, where `answer[i]` is the correct word for `query = queries[i]`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def vowel_spellchecker(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "wordlist = [\"KiTe\",\"kite\",\"hare\",\"Hare\"], queries = [\"kite\",\"Kite\",\"KiTe\",\"Hare\",\"HARE\",\"Hear\",\"hear\",\"keti\",\"keet\",\"keto\"]",
        "output": "[\"kite\",\"KiTe\",\"KiTe\",\"Hare\",\"hare\",\"\",\"\",\"KiTe\",\"\",\"KiTe\"]"
      },
      {
        "input": "wordlist = [\"yellow\"], queries = [\"YellOw\"]",
        "output": "[\"yellow\"]"
      }
    ],
    "constraints": [
      "1 <= wordlist.length, queries.length <= 5000",
      "1 <= wordlist[i].length, queries[i].length <= 7",
      "wordlist[i] and queries[i] consist only of only English letters."
    ]
  },
  {
    "questionId": 967,
    "title": "Numbers With Same Consecutive Differences",
    "titleSlug": "numbers-with-same-consecutive-differences",
    "content": "<p>Return all non-negative integers of length `n` such that the absolute difference between every two consecutive digits is `k`.</p>\n<p>Note that every number in the answer must not have leading zeros. For example, `01` has one leading zero and is invalid.</p>\n<p>You may return the answer in any order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def numbers_with_same_consecutive_differences(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 3, k = 7",
        "output": "[181,292,707,818,929]",
        "explanation": "Note that 070 is not a valid number, because it has leading zeroes."
      },
      {
        "input": "n = 2, k = 1",
        "output": "[10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]"
      },
      {
        "input": "n = 2, k = 0",
        "output": "[11,22,33,44,55,66,77,88,99]"
      },
      {
        "input": "n = 2, k = 2",
        "output": "[13,20,24,31,35,42,46,53,57,64,68,75,79,86,97]"
      }
    ],
    "constraints": [
      "2 <= n <= 9",
      "0 <= k <= 9"
    ]
  },
  {
    "questionId": 969,
    "title": "Pancake Sorting",
    "titleSlug": "pancake-sorting",
    "content": "<p>Given an array of integers `arr`, sort the array by performing a series of pancake flips.</p>\n<p>In one pancake flip we do the following steps:\nChoose an integer `k` where `1 <= k <= arr.length`.</p>\n<p>Reverse the sub-array `arr[0...k-1]` (0-indexed).</p>\n<p>For example, if `arr = [3,2,1,4]` and we performed a pancake flip choosing `k = 3`, we reverse the sub-array `[3,2,1]`, so `arr = [1,2,3,4]` after the pancake flip at `k = 3`.</p>\n<p>Return an array of the `k`-values corresponding to a sequence of pancake flips that sort `arr`. Any valid answer that sorts the array within `10 * arr.length` flips will be judged as correct.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def pancake_sorting(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [3,2,4,1]",
        "output": "[4,2,4,3]",
        "explanation": "We perform 4 pancake flips, with k values 4, 2, 4, and 3."
      },
      {
        "input": "arr = [1,2,3]",
        "output": "[]",
        "explanation": "The input is already sorted, so there is no need to flip anything."
      }
    ],
    "constraints": [
      "1 <= arr.length <= 100",
      "1 <= arr[i] <= arr.length",
      "All integers in arr are unique (i.e. arr is a permutation of the integers from 1 to arr.length)."
    ]
  },
  {
    "questionId": 970,
    "title": "Powerful Integers",
    "titleSlug": "powerful-integers",
    "content": "<p>Given three integers `x`, `y`, and `bound`, return a list of all the powerful integers that have a value less than or equal to `bound`.</p>\n<p>An integer is powerful if it can be represented as `xi + yj` for some integers `i >= 0` and `j >= 0`.</p>\n<p>You may return the answer in any order. In your answer, each value should occur at most once.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def powerful_integers(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "x = 2, y = 3, bound = 10",
        "output": "[2,3,4,5,7,9,10]",
        "explanation": "2 = 20 + 30"
      },
      {
        "input": "x = 3, y = 5, bound = 15",
        "output": "[2,4,6,8,10,14]"
      }
    ],
    "constraints": [
      "1 <= x, y <= 100",
      "0 <= bound <= 106"
    ]
  },
  {
    "questionId": 971,
    "title": "Flip Binary Tree To Match Preorder Traversal",
    "titleSlug": "flip-binary-tree-to-match-preorder-traversal",
    "content": "<p>You are given the `root` of a binary tree with `n` nodes, where each node is uniquely assigned a value from `1` to `n`. You are also given a sequence of `n` values `voyage`, which is the desired pre-order traversal of the binary tree.</p>\n<p>Any node in the binary tree can be flipped by swapping its left and right subtrees. For example, flipping node 1 will have the following effect:\nFlip the smallest number of nodes so that the pre-order traversal of the tree matches `voyage`.</p>\n<p>Return a list of the values of all flipped nodes. You may return the answer in any order. If it is impossible to flip the nodes in the tree to make the pre-order traversal match `voyage`, return the list `[-1]`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def flip_binary_tree_to_match_preorder_traversal(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2], voyage = [2,1]",
        "output": "[-1]",
        "explanation": "It is impossible to flip the nodes such that the pre-order traversal matches voyage."
      },
      {
        "input": "root = [1,2,3], voyage = [1,3,2]",
        "output": "[1]",
        "explanation": "Flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage."
      },
      {
        "input": "root = [1,2,3], voyage = [1,2,3]",
        "output": "[]",
        "explanation": "The tree's pre-order traversal already matches voyage, so no nodes need to be flipped."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is n.",
      "n == voyage.length",
      "1 <= n <= 100",
      "1 <= Node.val, voyage[i] <= n",
      "All the values in the tree are unique.",
      "All the values in voyage are unique."
    ]
  },
  {
    "questionId": 973,
    "title": "K Closest Points to Origin",
    "titleSlug": "k-closest-points-to-origin",
    "content": "<p>Given an array of `points` where `points[i] = [xi, yi]` represents a point on the X-Y plane and an integer `k`, return the `k` closest points to the origin `(0, 0)`.</p>\n<p>The distance between two points on the X-Y plane is the Euclidean distance (i.e., `\u221a(x1 - x2)2 + (y1 - y2)2`).</p>\n<p>You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def k_closest_points_to_origin(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "points = [[1,3],[-2,2]], k = 1",
        "output": "[[-2,2]]",
        "explanation": "The distance between (1, 3) and the origin is sqrt(10)."
      },
      {
        "input": "points = [[3,3],[5,-1],[-2,4]], k = 2",
        "output": "[[3,3],[-2,4]]",
        "explanation": "The answer [[-2,4],[3,3]] would also be accepted."
      }
    ],
    "constraints": [
      "1 <= k <= points.length <= 104",
      "-104 < xi, yi < 104"
    ]
  },
  {
    "questionId": 976,
    "title": "Largest Perimeter Triangle",
    "titleSlug": "largest-perimeter-triangle",
    "content": "<p>Given an integer array `nums`, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. If it is impossible to form any triangle of a non-zero area, return `0`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def largest_perimeter_triangle(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [2,1,2]",
        "output": "5"
      },
      {
        "input": "nums = [1,2,1]",
        "output": "0"
      },
      {
        "input": "nums = [3,2,3,4]",
        "output": "10"
      },
      {
        "input": "nums = [3,6,2,3]",
        "output": "8"
      }
    ],
    "constraints": [
      "3 <= nums.length <= 104",
      "1 <= nums[i] <= 106"
    ]
  },
  {
    "questionId": 977,
    "title": "Squares of a Sorted Array",
    "titleSlug": "squares-of-a-sorted-array",
    "content": "<p>Given an integer array `nums` sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def squares_of_a_sorted_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [-4,-1,0,3,10]",
        "output": "[0,1,9,16,100]",
        "explanation": "After squaring, the array becomes [16,1,0,9,100]."
      },
      {
        "input": "nums = [-7,-3,2,3,11]",
        "output": "[4,9,9,49,121]"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 104",
      "-104 <= nums[i] <= 104",
      "nums is sorted in non-decreasing order.",
      "Follow up: Squaring each element and sorting the new array is very trivial, could you find an O(n) solution using a different approach?"
    ]
  },
  {
    "questionId": 978,
    "title": "Longest Turbulent Subarray",
    "titleSlug": "longest-turbulent-subarray",
    "content": "<p>Given an integer array `arr`, return the length of a maximum size turbulent subarray of `arr`.</p>\n<p>A subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.</p>\n<p>More formally, a subarray `[arr[i], arr[i + 1], ..., arr[j]]` of `arr` is said to be turbulent if and only if:\nFor `i <= k < j`:</p>\n<p>`arr[k] > arr[k + 1]` when `k` is odd, and\n`arr[k] < arr[k + 1]` when `k` is even.</p>\n<p>Or, for `i <= k < j`:</p>\n<p>`arr[k] > arr[k + 1]` when `k` is even, and\n`arr[k] < arr[k + 1]` when `k` is odd.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_turbulent_subarray(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [9,4,2,10,7,8,8,1,9]",
        "output": "5",
        "explanation": "arr[1] > arr[2] < arr[3] > arr[4] < arr[5]"
      },
      {
        "input": "arr = [4,8,12,16]",
        "output": "2"
      },
      {
        "input": "arr = [100]",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= arr.length <= 4 * 104",
      "0 <= arr[i] <= 109"
    ]
  },
  {
    "questionId": 979,
    "title": "Distribute Coins in Binary Tree",
    "titleSlug": "distribute-coins-in-binary-tree",
    "content": "<p>You are given the `root` of a binary tree with `n` nodes where each `node` in the tree has `node.val` coins and there are `n` coins total.</p>\n<p>In one move, we may choose two adjacent nodes and move one coin from one node to another. (A move may be from parent to child, or from child to parent.)\nReturn the number of moves required to make every node have exactly one coin.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def distribute_coins_in_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [3,0,0]",
        "output": "2",
        "explanation": "From the root of the tree, we move one coin to its left child, and one coin to its right child."
      },
      {
        "input": "root = [0,3,0]",
        "output": "3",
        "explanation": "From the left child of the root, we move two coins to the root [taking two moves].  Then, we move one coin from the root of the tree to the right child."
      },
      {
        "input": "root = [1,0,2]",
        "output": "2"
      },
      {
        "input": "root = [1,0,0,null,3]",
        "output": "4"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is n.",
      "1 <= n <= 100",
      "0 <= Node.val <= n",
      "The sum of Node.val is n."
    ]
  },
  {
    "questionId": 984,
    "title": "String Without AAA or BBB",
    "titleSlug": "string-without-aaa-or-bbb",
    "content": "<p>Given two integers `a` and `b`, return any string `s` such that:\n`s` has length `a + b` and contains exactly `a` `'a'` letters, and exactly `b` `'b'` letters,\nThe substring `'aaa'` does not occur in `s`, and\nThe substring `'bbb'` does not occur in `s`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def string_without_aaa_or_bbb(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "a = 1, b = 2",
        "output": "\"abb\"",
        "explanation": "\"abb\", \"bab\" and \"bba\" are all correct answers."
      },
      {
        "input": "a = 4, b = 1",
        "output": "\"aabaa\""
      }
    ],
    "constraints": [
      "0 <= a, b <= 100",
      "It is guaranteed such an s exists for the given a and b."
    ]
  },
  {
    "questionId": 986,
    "title": "Interval List Intersections",
    "titleSlug": "interval-list-intersections",
    "content": "<p>You are given two lists of closed intervals, `firstList` and `secondList`, where `firstList[i] = [starti, endi]` and `secondList[j] = [startj, endj]`. Each list of intervals is pairwise disjoint and in sorted order.</p>\n<p>Return the intersection of these two interval lists.</p>\n<p>A closed interval `[a, b]` (with `a < b`) denotes the set of real numbers `x` with `a <= x <= b`.</p>\n<p>The intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of `[1, 3]` and `[2, 4]` is `[2, 3]`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def interval_list_intersections(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]",
        "output": "[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]"
      },
      {
        "input": "firstList = [[1,3],[5,9]], secondList = []",
        "output": "[]"
      },
      {
        "input": "firstList = [], secondList = [[4,8],[10,12]]",
        "output": "[]"
      },
      {
        "input": "firstList = [[1,7]], secondList = [[3,10]]",
        "output": "[[3,7]]"
      }
    ],
    "constraints": [
      "0 <= firstList.length, secondList.length <= 1000",
      "firstList.length + secondList.length >= 1",
      "0 <= starti < endi <= 109",
      "endi < starti+1",
      "0 <= startj < endj <= 109 ",
      "endj < startj+1"
    ]
  },
  {
    "questionId": 989,
    "title": "Add to Array-Form of Integer",
    "titleSlug": "add-to-array-form-of-integer",
    "content": "<p>The array-form of an integer `num` is an array representing its digits in left to right order.</p>\n<p>For example, for `num = 1321`, the array form is `[1,3,2,1]`.</p>\n<p>Given `num`, the array-form of an integer, and an integer `k`, return the array-form of the integer `num + k`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def add_to_array_form_of_integer(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "num = [1,2,0,0], k = 34",
        "output": "[1,2,3,4]",
        "explanation": "1200 + 34 = 1234"
      },
      {
        "input": "num = [2,7,4], k = 181",
        "output": "[4,5,5]",
        "explanation": "274 + 181 = 455"
      },
      {
        "input": "num = [2,1,5], k = 806",
        "output": "[1,0,2,1]",
        "explanation": "215 + 806 = 1021"
      },
      {
        "input": "num = [9,9,9,9,9,9,9,9,9,9], k = 1",
        "output": "[1,0,0,0,0,0,0,0,0,0,0]",
        "explanation": "9999999999 + 1 = 10000000000"
      }
    ],
    "constraints": [
      "1 <= num.length <= 104",
      "0 <= num[i] <= 9",
      "num does not contain any leading zeros except for the zero itself.",
      "1 <= k <= 104"
    ]
  },
  {
    "questionId": 993,
    "title": "Cousins in Binary Tree",
    "titleSlug": "cousins-in-binary-tree",
    "content": "<p>In a binary tree, the root node is at depth `0`, and children of each depth `k` node are at depth `k+1`.</p>\n<p>Two nodes of a binary tree are cousins if they have the same depth, but have different parents.</p>\n<p>We are given the `root` of a binary tree with unique values, and the values `x` and `y` of two different nodes in the tree.</p>\n<p>Return `true` if and only if the nodes corresponding to the values `x` and `y` are cousins.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def cousins_in_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2,3,4], x = 4, y = 3",
        "output": "false"
      },
      {
        "input": "root = [1,2,3,null,4,null,5], x = 5, y = 4",
        "output": "true"
      },
      {
        "input": "root = [1,2,3,null,4], x = 2, y = 3",
        "output": "false"
      }
    ],
    "constraints": [
      "The number of nodes in the tree will be between 2 and 100.",
      "Each node has a unique integer value from 1 to 100."
    ]
  },
  {
    "questionId": 994,
    "title": "Rotting Oranges",
    "titleSlug": "rotting-oranges",
    "content": "<p>You are given an `m x n` `grid` where each cell can have one of three values:\n`0` representing an empty cell,\n`1` representing a fresh orange, or\n`2` representing a rotten orange.</p>\n<p>Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.</p>\n<p>Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return `-1`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def rotting_oranges(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "grid = [[2,1,1],[1,1,0],[0,1,1]]",
        "output": "4"
      },
      {
        "input": "grid = [[2,1,1],[0,1,1],[1,0,1]]",
        "output": "-1",
        "explanation": "The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally."
      },
      {
        "input": "grid = [[0,2]]",
        "output": "0",
        "explanation": "Since there are already no fresh oranges at minute 0, the answer is just 0."
      }
    ],
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m, n <= 10",
      "grid[i][j] is 0, 1, or 2."
    ]
  },
  {
    "questionId": 997,
    "title": "Find the Town Judge",
    "titleSlug": "find-the-town-judge",
    "content": "<p>In a town, there are `N` people labelled from `1` to `N`.  There is a rumor that one of these people is secretly the town judge.</p>\n<p>If the town judge exists, then:\nThe town judge trusts nobody.</p>\n<p>Everybody (except for the town judge) trusts the town judge.</p>\n<p>There is exactly one person that satisfies properties 1 and 2.</p>\n<p>You are given `trust`, an array of pairs `trust[i] = [a, b]` representing that the person labelled `a` trusts the person labelled `b`.</p>\n<p>If the town judge exists and can be identified, return the label of the town judge.  Otherwise, return `-1`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_the_town_judge(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "N = 2, trust = [[1,2]]",
        "output": "2"
      },
      {
        "input": "N = 3, trust = [[1,3],[2,3]]",
        "output": "3"
      },
      {
        "input": "N = 3, trust = [[1,3],[2,3],[3,1]]",
        "output": "-1"
      },
      {
        "input": "N = 3, trust = [[1,2],[2,3]]",
        "output": "-1"
      },
      {
        "input": "N = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]]",
        "output": "3"
      }
    ],
    "constraints": [
      "1 <= N <= 1000",
      "0 <= trust.length <= 10^4",
      "trust[i].length == 2",
      "trust[i] are all different",
      "trust[i][0] != trust[i][1]",
      "1 <= trust[i][0], trust[i][1] <= N"
    ]
  },
  {
    "questionId": 998,
    "title": "Maximum Binary Tree II",
    "titleSlug": "maximum-binary-tree-ii",
    "content": "<p>We are given the `root` node of a maximum tree: a tree where every node has a value greater than any other value in its subtree.</p>\n<p>Just as in the previous problem, the given tree was constructed from an list `A` (`root = Construct(A)`) recursively with the following `Construct(A)` routine:\nIf `A` is empty, return `null`.</p>\n<p>Otherwise, let `A[i]` be the largest element of `A`.  Create a `root` node with value `A[i]`.</p>\n<p>The left child of `root` will be `Construct([A[0], A[1], ..., A[i-1]])`\nThe right child of `root` will be `Construct([A[i+1], A[i+2], ..., A[A.length - 1]])`\nReturn `root`.</p>\n<p>Note that we were not given A directly, only a root node `root = Construct(A)`.</p>\n<p>Suppose `B` is a copy of `A` with the value `val` appended to it.  It is guaranteed that `B` has unique values.</p>\n<p>Return `Construct(B)`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_binary_tree_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [4,1,3,null,null,2], val = 5",
        "output": "[5,4,null,1,3,null,null,2]",
        "explanation": "A = [1,4,2,3], B = [1,4,2,3,5]"
      },
      {
        "input": "root = [5,2,4,null,1], val = 3",
        "output": "[5,2,4,null,1,null,3]",
        "explanation": "A = [2,1,5,4], B = [2,1,5,4,3]"
      },
      {
        "input": "root = [5,2,3,null,1], val = 4",
        "output": "[5,2,4,null,1,3]",
        "explanation": "A = [2,1,5,3], B = [2,1,5,3,4]"
      }
    ],
    "constraints": [
      "1 <= B.length <= 100"
    ]
  },
  {
    "questionId": 999,
    "title": "Available Captures for Rook",
    "titleSlug": "available-captures-for-rook",
    "content": "<p>On an `8 x 8` chessboard, there is exactly one white rook `'R'` and some number of white bishops `'B'`, black pawns `'p'`, and empty squares `'.'`.</p>\n<p>When the rook moves, it chooses one of four cardinal directions (north, east, south, or west), then moves in that direction until it chooses to stop, reaches the edge of the board, captures a black pawn, or is blocked by a white bishop. A rook is considered attacking a pawn if the rook can capture the pawn on the rook's turn. The number of available captures for the white rook is the number of pawns that the rook is attacking.</p>\n<p>Return the number of available captures for the white rook.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def available_captures_for_rook(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"R\",\".\",\".\",\".\",\"p\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]",
        "output": "3",
        "explanation": "In this example, the rook is attacking all the pawns."
      },
      {
        "input": "board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"B\",\"R\",\"B\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]",
        "output": "0",
        "explanation": "The bishops are blocking the rook from attacking any of the pawns."
      },
      {
        "input": "board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\"p\",\"p\",\".\",\"R\",\".\",\"p\",\"B\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]",
        "output": "3",
        "explanation": "The rook is attacking the pawns at positions b5, d6, and f5."
      }
    ],
    "constraints": [
      "board.length == 8",
      "board[i].length == 8",
      "board[i][j] is either 'R', '.', 'B', or 'p'",
      "There is exactly one cell with board[i][j] == 'R'"
    ]
  },
  {
    "questionId": 1003,
    "title": "Check If Word Is Valid After Substitutions",
    "titleSlug": "check-if-word-is-valid-after-substitutions",
    "content": "<p>Given a string `s`, determine if it is valid.</p>\n<p>A string `s` is valid if, starting with an empty string `t = \"\"`, you can transform `t` into `s` after performing the following operation any number of times:\nInsert string `\"abc\"` into any position in `t`. More formally, `t` becomes `tleft + \"abc\" + tright`, where `t == tleft + tright`. Note that `tleft` and `tright` may be empty.</p>\n<p>Return `true` if `s` is a valid string, otherwise, return `false`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def check_if_word_is_valid_after_substitutions(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"aabcbc\"",
        "output": "true",
        "explanation": "\"\" -> \"abc\" -> \"aabcbc\""
      },
      {
        "input": "s = \"abcabcababcc\"",
        "output": "true",
        "explanation": "\"\" -> \"abc\" -> \"abcabc\" -> \"abcabcabc\" -> \"abcabcababcc\""
      },
      {
        "input": "s = \"abccba\"",
        "output": "false",
        "explanation": "It is impossible to get \"abccba\" using the operation."
      },
      {
        "input": "s = \"cababc\"",
        "output": "false",
        "explanation": "It is impossible to get \"cababc\" using the operation."
      }
    ],
    "constraints": [
      "1 <= s.length <= 2 * 104",
      "s consists of letters 'a', 'b', and 'c'"
    ]
  },
  {
    "questionId": 1007,
    "title": "Minimum Domino Rotations For Equal Row",
    "titleSlug": "minimum-domino-rotations-for-equal-row",
    "content": "<p>In a row of dominoes, `A[i]` and `B[i]` represent the top and bottom halves of the `ith` domino.  (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)\nWe may rotate the `ith` domino, so that `A[i]` and `B[i]` swap values.</p>\n<p>Return the minimum number of rotations so that all the values in `A` are the same, or all the values in `B` are the same.</p>\n<p>If it cannot be done, return `-1`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_domino_rotations_for_equal_row(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "A = [2,1,2,4,2,2], B = [5,2,6,2,3,2]",
        "output": "2",
        "explanation": "The first figure represents the dominoes as given by A and B: before we do any rotations."
      },
      {
        "input": "A = [3,5,1,2,3], B = [3,6,3,3,4]",
        "output": "-1",
        "explanation": "In this case, it is not possible to rotate the dominoes to make one row of values equal."
      }
    ],
    "constraints": [
      "2 <= A.length == B.length <= 2 * 104",
      "1 <= A[i], B[i] <= 6"
    ]
  },
  {
    "questionId": 1008,
    "title": "Construct Binary Search Tree from Preorder Traversal",
    "titleSlug": "construct-binary-search-tree-from-preorder-traversal",
    "content": "<p>Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.</p>\n<p>It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.</p>\n<p>A binary search tree is a binary tree where for every node, any descendant of `Node.left` has a value strictly less than `Node.val`, and any descendant of `Node.right` has a value strictly greater than `Node.val`.</p>\n<p>A preorder traversal of a binary tree displays the value of the node first, then traverses `Node.left`, then traverses `Node.right`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def construct_binary_search_tree_from_preorder_traversal(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "preorder = [8,5,1,7,10,12]",
        "output": "[8,5,10,1,7,null,12]"
      },
      {
        "input": "preorder = [1,3]",
        "output": "[1,null,3]"
      }
    ],
    "constraints": [
      "1 <= preorder.length <= 100",
      "1 <= preorder[i] <= 108",
      "All the values of preorder are unique."
    ]
  },
  {
    "questionId": 1010,
    "title": "Pairs of Songs With Total Durations Divisible by 60",
    "titleSlug": "pairs-of-songs-with-total-durations-divisible-by-60",
    "content": "<p>You are given a list of songs where the ith song has a duration of `time[i]` seconds.</p>\n<p>Return the number of pairs of songs for which their total duration in seconds is divisible by `60`. Formally, we want the number of indices `i`, `j` such that `i < j` with `(time[i] + time[j]) % 60 == 0`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def pairs_of_songs_with_total_durations_divisible_by_60(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "time = [30,20,150,100,40]",
        "output": "3",
        "explanation": "Three pairs have a total duration divisible by 60:"
      },
      {
        "input": "time = [60,60,60]",
        "output": "3",
        "explanation": "All three pairs have a total duration of 120, which is divisible by 60."
      }
    ],
    "constraints": [
      "1 <= time.length <= 6 * 104",
      "1 <= time[i] <= 500"
    ]
  },
  {
    "questionId": 1011,
    "title": "Capacity To Ship Packages Within D Days",
    "titleSlug": "capacity-to-ship-packages-within-d-days",
    "content": "<p>A conveyor belt has packages that must be shipped from one port to another within `D` days.</p>\n<p>The ith package on the conveyor belt has a weight of `weights[i]`. Each day, we load the ship with packages on the conveyor belt (in the order given by `weights`). We may not load more weight than the maximum weight capacity of the ship.</p>\n<p>Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within `D` days.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def capacity_to_ship_packages_within_d_days(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "weights = [1,2,3,4,5,6,7,8,9,10], D = 5",
        "output": "15",
        "explanation": "A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:"
      },
      {
        "input": "weights = [3,2,2,4,1,4], D = 3",
        "output": "6",
        "explanation": "A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:"
      },
      {
        "input": "weights = [1,2,3,1,1], D = 4",
        "output": "3",
        "explanation": "1st day: 1"
      }
    ],
    "constraints": [
      "1 <= D <= weights.length <= 5 * 104",
      "1 <= weights[i] <= 500"
    ]
  },
  {
    "questionId": 1013,
    "title": "Partition Array Into Three Parts With Equal Sum",
    "titleSlug": "partition-array-into-three-parts-with-equal-sum",
    "content": "<p>Given an array of integers `arr`, return `true` if we can partition the array into three non-empty parts with equal sums.</p>\n<p>Formally, we can partition the array if we can find indexes `i + 1 < j` with `(arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])`</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def partition_array_into_three_parts_with_equal_sum(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [0,2,1,-6,6,-7,9,1,2,0,1]",
        "output": "true",
        "explanation": "0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1"
      },
      {
        "input": "arr = [0,2,1,-6,6,7,9,-1,2,0,1]",
        "output": "false"
      },
      {
        "input": "arr = [3,3,6,5,-2,2,5,1,-9,4]",
        "output": "true",
        "explanation": "3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4"
      }
    ],
    "constraints": [
      "3 <= arr.length <= 5 * 104",
      "-104 <= arr[i] <= 104"
    ]
  },
  {
    "questionId": 1014,
    "title": "Best Sightseeing Pair",
    "titleSlug": "best-sightseeing-pair",
    "content": "<p>You are given an integer array `values` where values[i] represents the value of the `ith` sightseeing spot. Two sightseeing spots `i` and `j` have a distance `j - i` between them.</p>\n<p>The score of a pair (`i < j`) of sightseeing spots is `values[i] + values[j] + i - j`: the sum of the values of the sightseeing spots, minus the distance between them.</p>\n<p>Return the maximum score of a pair of sightseeing spots.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def best_sightseeing_pair(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "values = [8,1,5,2,6]",
        "output": "11",
        "explanation": "i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11"
      },
      {
        "input": "values = [1,2]",
        "output": "2"
      }
    ],
    "constraints": [
      "2 <= values.length <= 5 * 104",
      "1 <= values[i] <= 1000"
    ]
  },
  {
    "questionId": 1015,
    "title": "Smallest Integer Divisible by K",
    "titleSlug": "smallest-integer-divisible-by-k",
    "content": "<p>Given a positive integer `K`, you need to find the length of the smallest positive integer `N` such that `N` is divisible by `K`, and `N` only contains the digit `1`.</p>\n<p>Return the length of `N`. If there is no such `N`, return -1.</p>\n<p>Note: `N` may not fit in a 64-bit signed integer.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def smallest_integer_divisible_by_k(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "K = 1",
        "output": "1",
        "explanation": "The smallest answer is N = 1, which has length 1."
      },
      {
        "input": "K = 2",
        "output": "-1",
        "explanation": "There is no such positive integer N divisible by 2."
      },
      {
        "input": "K = 3",
        "output": "3",
        "explanation": "The smallest answer is N = 111, which has length 3."
      }
    ],
    "constraints": [
      "1 <= K <= 105"
    ]
  },
  {
    "questionId": 1020,
    "title": "Number of Enclaves",
    "titleSlug": "number-of-enclaves",
    "content": "<p>You are given an `m x n` binary matrix `grid`, where `0` represents a sea cell and `1` represents a land cell.</p>\n<p>A move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the `grid`.</p>\n<p>Return the number of land cells in `grid` for which we cannot walk off the boundary of the grid in any number of moves.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_enclaves(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]",
        "output": "3",
        "explanation": "There are three 1s that are enclosed by 0s, and one 1 that is not enclosed because its on the boundary."
      },
      {
        "input": "grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]",
        "output": "0",
        "explanation": "All 1s are either on the boundary or can reach the boundary."
      }
    ],
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m, n <= 500",
      "grid[i][j] is either 0 or 1."
    ]
  },
  {
    "questionId": 1022,
    "title": "Sum of Root To Leaf Binary Numbers",
    "titleSlug": "sum-of-root-to-leaf-binary-numbers",
    "content": "<p>You are given the `root` of a binary tree where each node has a value `0` or `1`.  Each root-to-leaf path represents a binary number starting with the most significant bit.  For example, if the path is `0 -> 1 -> 1 -> 0 -> 1`, then this could represent `01101` in binary, which is `13`.</p>\n<p>For all leaves in the tree, consider the numbers represented by the path from the root to that leaf.</p>\n<p>Return the sum of these numbers. The answer is guaranteed to fit in a 32-bits integer.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sum_of_root_to_leaf_binary_numbers(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,0,1,0,1,0,1]",
        "output": "22",
        "explanation": "(100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22"
      },
      {
        "input": "root = [0]",
        "output": "0"
      },
      {
        "input": "root = [1]",
        "output": "1"
      },
      {
        "input": "root = [1,1]",
        "output": "3"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 1000].",
      "Node.val is 0 or 1."
    ]
  },
  {
    "questionId": 1024,
    "title": "Video Stitching",
    "titleSlug": "video-stitching",
    "content": "<p>You are given a series of video clips from a sporting event that lasted `T` seconds.  These video clips can be overlapping with each other and have varied lengths.</p>\n<p>Each video clip `clips[i]` is an interval: it starts at time `clips[i][0]` and ends at time `clips[i][1]`.  We can cut these clips into segments freely: for example, a clip `[0, 7]` can be cut into segments `[0, 1] + [1, 3] + [3, 7]`.</p>\n<p>Return the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event (`[0, T]`).  If the task is impossible, return `-1`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def video_stitching(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], T = 10",
        "output": "3",
        "explanation": "We take the clips [0,2], [8,10], [1,9]; a total of 3 clips."
      },
      {
        "input": "clips = [[0,1],[1,2]], T = 5",
        "output": "-1",
        "explanation": "We can't cover [0,5] with only [0,1] and [1,2]."
      },
      {
        "input": "clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], T = 9",
        "output": "3",
        "explanation": "We can take clips [0,4], [4,7], and [6,9]."
      },
      {
        "input": "clips = [[0,4],[2,8]], T = 5",
        "output": "2",
        "explanation": "Notice you can have extra video after the event ends."
      }
    ],
    "constraints": [
      "1 <= clips.length <= 100",
      "0 <= clips[i][0] <= clips[i][1] <= 100",
      "0 <= T <= 100"
    ]
  },
  {
    "questionId": 1025,
    "title": "Divisor Game",
    "titleSlug": "divisor-game",
    "content": "<p>Alice and Bob take turns playing a game, with Alice starting first.</p>\n<p>Initially, there is a number `n` on the chalkboard. On each player's turn, that player makes a move consisting of:\nChoosing any `x` with `0 < x < n` and `n % x == 0`.</p>\n<p>Replacing the number `n` on the chalkboard with `n - x`.</p>\n<p>Also, if a player cannot make a move, they lose the game.</p>\n<p>Return `true` if and only if Alice wins the game, assuming both players play optimally.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def divisor_game(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 2",
        "output": "true",
        "explanation": "Alice chooses 1, and Bob has no more moves."
      },
      {
        "input": "n = 3",
        "output": "false",
        "explanation": "Alice chooses 1, Bob chooses 1, and Alice has no more moves."
      }
    ],
    "constraints": [
      "1 <= n <= 1000"
    ]
  },
  {
    "questionId": 1026,
    "title": "Maximum Difference Between Node and Ancestor",
    "titleSlug": "maximum-difference-between-node-and-ancestor",
    "content": "<p>Given the `root` of a binary tree, find the maximum value `V` for which there exist different nodes `A` and `B` where `V = |A.val - B.val|` and `A` is an ancestor of `B`.</p>\n<p>A node `A` is an ancestor of `B` if either: any child of `A` is equal to `B`, or any child of `A` is an ancestor of `B`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_difference_between_node_and_ancestor(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [8,3,10,1,6,null,14,null,null,4,7,13]",
        "output": "7",
        "explanation": "We have various ancestor-node differences, some of which are given below :"
      },
      {
        "input": "root = [1,null,2,null,0,3]",
        "output": "3"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [2, 5000].",
      "0 <= Node.val <= 105"
    ]
  },
  {
    "questionId": 1027,
    "title": "Longest Arithmetic Subsequence",
    "titleSlug": "longest-arithmetic-subsequence",
    "content": "<p>Given an array `A` of integers, return the length of the longest arithmetic subsequence in `A`.</p>\n<p>Recall that a subsequence of `A` is a list `A[i_1], A[i_2], ..., A[i_k]` with `0 <= i_1 < i_2 < ... < i_k <= A.length - 1`, and that a sequence `B` is arithmetic if `B[i+1] - B[i]` are all the same value (for `0 <= i < B.length - 1`).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_arithmetic_subsequence(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "A = [3,6,9,12]",
        "output": "4",
        "explanation": "The whole array is an arithmetic sequence with steps of length = 3."
      },
      {
        "input": "A = [9,4,7,2,10]",
        "output": "3",
        "explanation": "The longest arithmetic subsequence is [4,7,10]."
      },
      {
        "input": "A = [20,1,15,3,10,5,8]",
        "output": "4",
        "explanation": "The longest arithmetic subsequence is [20,15,10,5]."
      }
    ],
    "constraints": [
      "2 <= A.length <= 1000",
      "0 <= A[i] <= 500"
    ]
  },
  {
    "questionId": 1029,
    "title": "Two City Scheduling",
    "titleSlug": "two-city-scheduling",
    "content": "<p>A company is planning to interview `2n` people. Given the array `costs` where `costs[i] = [aCosti, bCosti]`, the cost of flying the `ith` person to city `a` is `aCosti`, and the cost of flying the `ith` person to city `b` is `bCosti`.</p>\n<p>Return the minimum cost to fly every person to a city such that exactly `n` people arrive in each city.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def two_city_scheduling(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "costs = [[10,20],[30,200],[400,50],[30,20]]",
        "output": "110",
        "explanation": "The first person goes to city A for a cost of 10."
      },
      {
        "input": "costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]",
        "output": "1859"
      },
      {
        "input": "costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]",
        "output": "3086"
      }
    ],
    "constraints": [
      "2 * n == costs.length",
      "2 <= costs.length <= 100",
      "costs.length is even.",
      "1 <= aCosti, bCosti <= 1000"
    ]
  },
  {
    "questionId": 1037,
    "title": "Valid Boomerang",
    "titleSlug": "valid-boomerang",
    "content": "<p>Given an array `points` where `points[i] = [xi, yi]` represents a point on the X-Y plane, return `true` if these points are a boomerang.</p>\n<p>A boomerang is a set of three points that are all distinct and not in a straight line.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def valid_boomerang(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "points = [[1,1],[2,3],[3,2]]",
        "output": "true"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3]]",
        "output": "false"
      }
    ],
    "constraints": [
      "points.length == 3",
      "points[i].length == 2",
      "0 <= xi, yi <= 100"
    ]
  },
  {
    "questionId": 1038,
    "title": "Binary Search Tree to Greater Sum Tree",
    "titleSlug": "binary-search-tree-to-greater-sum-tree",
    "content": "<p>Given the `root` of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.</p>\n<p>As a reminder, a binary search tree is a tree that satisfies these constraints:\nThe left subtree of a node contains only nodes with keys less than the node's key.</p>\n<p>The right subtree of a node contains only nodes with keys greater than the node's key.</p>\n<p>Both the left and right subtrees must also be binary search trees.</p>\n<p>Note: This question is the same as 538: https://leetcode.com/problems/convert-bst-to-greater-tree/</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def binary_search_tree_to_greater_sum_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]",
        "output": "[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]"
      },
      {
        "input": "root = [0,null,1]",
        "output": "[1,null,1]"
      },
      {
        "input": "root = [1,0,2]",
        "output": "[3,3,2]"
      },
      {
        "input": "root = [3,2,4,1]",
        "output": "[7,9,4,10]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 100].",
      "0 <= Node.val <= 100",
      "All the values in the tree are unique.",
      "root is guaranteed to be a valid binary search tree."
    ]
  },
  {
    "questionId": 1039,
    "title": "Minimum Score Triangulation of Polygon",
    "titleSlug": "minimum-score-triangulation-of-polygon",
    "content": "<p>You have a convex `n`-sided polygon where each vertex has an integer value. You are given an integer array `values` where `values[i]` is the value of the `ith` vertex (i.e., clockwise order).</p>\n<p>You will triangulate the polygon into `n - 2` triangles. For each triangle, the value of that triangle is the product of the values of its vertices, and the total score of the triangulation is the sum of these values over all `n - 2` triangles in the triangulation.</p>\n<p>Return the smallest possible total score that you can achieve with some triangulation of the polygon.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_score_triangulation_of_polygon(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "values = [1,2,3]",
        "output": "6",
        "explanation": "The polygon is already triangulated, and the score of the only triangle is 6."
      },
      {
        "input": "values = [3,7,4,5]",
        "output": "144",
        "explanation": "There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144."
      },
      {
        "input": "values = [1,3,1,4,1,5]",
        "output": "13",
        "explanation": "The minimum score triangulation has score 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13."
      }
    ],
    "constraints": [
      "n == values.length",
      "3 <= n <= 50",
      "1 <= values[i] <= 100"
    ]
  },
  {
    "questionId": 1041,
    "title": "Robot Bounded In Circle",
    "titleSlug": "robot-bounded-in-circle",
    "content": "<p>On an infinite plane, a robot initially stands at `(0, 0)` and faces north. The robot can receive one of three instructions:\n`\"G\"`: go straight 1 unit;\n`\"L\"`: turn 90 degrees to the left;\n`\"R\"`: turn 90 degrees to the right.</p>\n<p>The robot performs the `instructions` given in order, and repeats them forever.</p>\n<p>Return `true` if and only if there exists a circle in the plane such that the robot never leaves the circle.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def robot_bounded_in_circle(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "instructions = \"GGLLGG\"",
        "output": "true",
        "explanation": "The robot moves from (0,0) to (0,2), turns 180 degrees, and then returns to (0,0)."
      },
      {
        "input": "instructions = \"GG\"",
        "output": "false",
        "explanation": "The robot moves north indefinitely."
      },
      {
        "input": "instructions = \"GL\"",
        "output": "true",
        "explanation": "The robot moves from (0, 0) -> (0, 1) -> (-1, 1) -> (-1, 0) -> (0, 0) -> ..."
      }
    ],
    "constraints": [
      "1 <= instructions.length <= 100",
      "instructions[i] is 'G', 'L' or, 'R'."
    ]
  },
  {
    "questionId": 1042,
    "title": "Flower Planting With No Adjacent",
    "titleSlug": "flower-planting-with-no-adjacent",
    "content": "<p>You have `n` gardens, labeled from `1` to `n`, and an array `paths` where `paths[i] = [xi, yi]` describes a bidirectional path between garden `xi` to garden `yi`. In each garden, you want to plant one of 4 types of flowers.</p>\n<p>All gardens have at most 3 paths coming into or leaving it.</p>\n<p>Your task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers.</p>\n<p>Return any such a choice as an array `answer`, where `answer[i]` is the type of flower planted in the `(i+1)th` garden. The flower types are denoted `1`, `2`, `3`, or `4`. It is guaranteed an answer exists.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def flower_planting_with_no_adjacent(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 3, paths = [[1,2],[2,3],[3,1]]",
        "output": "[1,2,3]",
        "explanation": "Gardens 1 and 2 have different types."
      },
      {
        "input": "n = 4, paths = [[1,2],[3,4]]",
        "output": "[1,2,1,2]"
      },
      {
        "input": "n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]",
        "output": "[1,2,3,4]"
      }
    ],
    "constraints": [
      "1 <= n <= 104",
      "0 <= paths.length <= 2 * 104",
      "paths[i].length == 2",
      "1 <= xi, yi <= n",
      "xi != yi",
      "Every garden has at most 3 paths coming into or leaving it."
    ]
  },
  {
    "questionId": 1043,
    "title": "Partition Array for Maximum Sum",
    "titleSlug": "partition-array-for-maximum-sum",
    "content": "<p>Given an integer array `arr`, you should partition the array into (contiguous) subarrays of length at most `k`. After partitioning, each subarray has their values changed to become the maximum value of that subarray.</p>\n<p>Return the largest sum of the given array after partitioning.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def partition_array_for_maximum_sum(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [1,15,7,9,2,5,10], k = 3",
        "output": "84",
        "explanation": "arr becomes [15,15,15,9,10,10,10]"
      },
      {
        "input": "arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4",
        "output": "83"
      },
      {
        "input": "arr = [1], k = 1",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= arr.length <= 500",
      "0 <= arr[i] <= 109",
      "1 <= k <= arr.length"
    ]
  },
  {
    "questionId": 1048,
    "title": "Longest String Chain",
    "titleSlug": "longest-string-chain",
    "content": "<p>Given a list of words, each word consists of English lowercase letters.</p>\n<p>Let's say `word1` is a predecessor of `word2` if and only if we can add exactly one letter anywhere in `word1` to make it equal to `word2`.  For example, `\"abc\"` is a predecessor of `\"abac\"`.</p>\n<p>A word chain is a sequence of words `[word_1, word_2, ..., word_k]` with `k >= 1`, where `word_1` is a predecessor of `word_2`, `word_2` is a predecessor of `word_3`, and so on.</p>\n<p>Return the longest possible length of a word chain with words chosen from the given list of `words`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_string_chain(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "words = [\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"]",
        "output": "4",
        "explanation": "One of the longest word chain is \"a\",\"ba\",\"bda\",\"bdca\"."
      },
      {
        "input": "words = [\"xbc\",\"pcxbcf\",\"xb\",\"cxbc\",\"pcxbc\"]",
        "output": "5"
      }
    ],
    "constraints": [
      "1 <= words.length <= 1000",
      "1 <= words[i].length <= 16",
      "words[i] only consists of English lowercase letters."
    ]
  },
  {
    "questionId": 1049,
    "title": "Last Stone Weight II",
    "titleSlug": "last-stone-weight-ii",
    "content": "<p>You are given an array of integers `stones` where `stones[i]` is the weight of the `ith` stone.</p>\n<p>We are playing a game with the stones. On each turn, we choose any two stones and smash them together. Suppose the stones have weights `x` and `y` with `x <= y`. The result of this smash is:\nIf `x == y`, both stones are destroyed, and\nIf `x != y`, the stone of weight `x` is destroyed, and the stone of weight `y` has new weight `y - x`.</p>\n<p>At the end of the game, there is at most one stone left.</p>\n<p>Return the smallest possible weight of the left stone. If there are no stones left, return `0`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def last_stone_weight_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "stones = [2,7,4,1,8,1]",
        "output": "1",
        "explanation": "We can combine 2 and 4 to get 2, so the array converts to [2,7,1,8,1] then,"
      },
      {
        "input": "stones = [31,26,33,21,40]",
        "output": "5"
      },
      {
        "input": "stones = [1,2]",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= stones.length <= 30",
      "1 <= stones[i] <= 100"
    ]
  },
  {
    "questionId": 1051,
    "title": "Height Checker",
    "titleSlug": "height-checker",
    "content": "<p>A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in non-decreasing order by height. Let this ordering be represented by the integer array `expected` where `expected[i]` is the expected height of the `ith` student in line.</p>\n<p>You are given an integer array `heights` representing the current order that the students are standing in. Each `heights[i]` is the height of the `ith` student in line (0-indexed).</p>\n<p>Return the number of indices where `heights[i] != expected[i]`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def height_checker(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "heights = [1,1,4,2,1,3]",
        "output": "3",
        "explanation": "heights:  [1,1,4,2,1,3]"
      },
      {
        "input": "heights = [5,1,2,3,4]",
        "output": "5",
        "explanation": "heights:  [5,1,2,3,4]"
      },
      {
        "input": "heights = [1,2,3,4,5]",
        "output": "0",
        "explanation": "heights:  [1,2,3,4,5]"
      }
    ],
    "constraints": [
      "1 <= heights.length <= 100",
      "1 <= heights[i] <= 100"
    ]
  },
  {
    "questionId": 1053,
    "title": "Previous Permutation With One Swap",
    "titleSlug": "previous-permutation-with-one-swap",
    "content": "<p>Given an array of positive integers `arr` (not necessarily distinct), return the lexicographically largest permutation that is smaller than `arr`, that can be made with exactly one swap (A swap exchanges the positions of two numbers `arr[i]` and `arr[j]`). If it cannot be done, then return the same array.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def previous_permutation_with_one_swap(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [3,2,1]",
        "output": "[3,1,2]",
        "explanation": "Swapping 2 and 1."
      },
      {
        "input": "arr = [1,1,5]",
        "output": "[1,1,5]",
        "explanation": "This is already the smallest permutation."
      },
      {
        "input": "arr = [1,9,4,6,7]",
        "output": "[1,7,4,6,9]",
        "explanation": "Swapping 9 and 7."
      },
      {
        "input": "arr = [3,1,1,3]",
        "output": "[1,3,1,3]",
        "explanation": "Swapping 1 and 3."
      }
    ],
    "constraints": [
      "1 <= arr.length <= 104",
      "1 <= arr[i] <= 104"
    ]
  },
  {
    "questionId": 1054,
    "title": "Distant Barcodes",
    "titleSlug": "distant-barcodes",
    "content": "<p>In a warehouse, there is a row of barcodes, where the `ith` barcode is `barcodes[i]`.</p>\n<p>Rearrange the barcodes so that no two adjacent barcodes are equal. You may return any answer, and it is guaranteed an answer exists.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def distant_barcodes(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "barcodes = [1,1,1,2,2,2]",
        "output": "[2,1,2,1,2,1]"
      },
      {
        "input": "barcodes = [1,1,1,1,2,2,3,3]",
        "output": "[1,3,1,3,1,2,1,2]"
      }
    ],
    "constraints": [
      "1 <= barcodes.length <= 10000",
      "1 <= barcodes[i] <= 10000"
    ]
  },
  {
    "questionId": 1055,
    "title": "Shortest Way to Form String",
    "titleSlug": "shortest-way-to-form-string",
    "content": "<p>From any string, we can form a subsequence of that string by deleting some number of characters (possibly no deletions).</p>\n<p>Given two strings `source` and `target`, return the minimum number of subsequences of `source` such that their concatenation equals `target`. If the task is impossible, return `-1`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def shortest_way_to_form_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "source = \"abc\", target = \"abcbc\"",
        "output": "2",
        "explanation": "The target \"abcbc\" can be formed by \"abc\" and \"bc\", which are subsequences of source \"abc\"."
      },
      {
        "input": "source = \"abc\", target = \"acdbc\"",
        "output": "-1",
        "explanation": "The target string cannot be constructed from the subsequences of source string due to the character \"d\" in target string."
      },
      {
        "input": "source = \"xyz\", target = \"xzyxz\"",
        "output": "3",
        "explanation": "The target string can be constructed as follows \"xz\" + \"y\" + \"xz\"."
      }
    ],
    "constraints": [
      "Both the source and target strings consist of only lowercase English letters from \"a\"-\"z\".",
      "The lengths of source and target string are between 1 and 1000."
    ]
  },
  {
    "questionId": 1058,
    "title": "Minimize Rounding Error to Meet Target",
    "titleSlug": "minimize-rounding-error-to-meet-target",
    "content": "<p>Given an array of `prices` `[p1,p2...,pn]` and a `target`, round each price `pi` to `Roundi(pi)` so that the rounded array `[Round1(p1),Round2(p2)...,Roundn(pn)]` sums to the given `target`. Each operation `Roundi(pi)` could be either `Floor(pi)` or `Ceil(pi)`.</p>\n<p>Return the string `\"-1\"` if the rounded array is impossible to sum to `target`. Otherwise, return the smallest rounding error, which is defined as `\u03a3 |Roundi(pi) - (pi)|` for `i` from `1` to `n`, as a string with three places after the decimal.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimize_rounding_error_to_meet_target(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "prices = [\"0.700\",\"2.800\",\"4.900\"], target = 8",
        "output": "\"1.000\"",
        "explanation": "Use Floor, Ceil and Ceil operations to get (0.7 - 0) + (3 - 2.8) + (5 - 4.9) = 0.7 + 0.2 + 0.1 = 1.0 ."
      },
      {
        "input": "prices = [\"1.500\",\"2.500\",\"3.500\"], target = 10",
        "output": "\"-1\"",
        "explanation": "It is impossible to meet the target."
      },
      {
        "input": "prices = [\"1.500\",\"2.500\",\"3.500\"], target = 9",
        "output": "\"1.500\""
      }
    ],
    "constraints": [
      "1 <= prices.length <= 500",
      "Each string prices[i] represents a real number in the range [0.0, 1000.0] and has exactly 3 decimal places.",
      "0 <= target <= 106"
    ]
  },
  {
    "questionId": 1059,
    "title": "All Paths from Source Lead to Destination",
    "titleSlug": "all-paths-from-source-lead-to-destination",
    "content": "<p>Given the `edges` of a directed graph where `edges[i] = [ai, bi]` indicates there is an edge between nodes `ai` and `bi`, and two nodes `source` and `destination` of this graph, determine whether or not all paths starting from `source` eventually, end at `destination`, that is:\nAt least one path exists from the `source` node to the `destination` node\nIf a path exists from the `source` node to a node with no outgoing edges, then that node is equal to `destination`.</p>\n<p>The number of possible paths from `source` to `destination` is a finite number.</p>\n<p>Return `true` if and only if all roads from `source` lead to `destination`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def all_paths_from_source_lead_to_destination(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 3, edges = [[0,1],[0,2]], source = 0, destination = 2",
        "output": "false",
        "explanation": "It is possible to reach and get stuck on both node 1 and node 2."
      },
      {
        "input": "n = 4, edges = [[0,1],[0,3],[1,2],[2,1]], source = 0, destination = 3",
        "output": "false",
        "explanation": "We have two possibilities: to end at node 3, or to loop over node 1 and node 2 indefinitely."
      },
      {
        "input": "n = 4, edges = [[0,1],[0,2],[1,3],[2,3]], source = 0, destination = 3",
        "output": "true"
      },
      {
        "input": "n = 3, edges = [[0,1],[1,1],[1,2]], source = 0, destination = 2",
        "output": "false",
        "explanation": "All paths from the source node end at the destination node, but there are an infinite number of paths, such as 0-1-2, 0-1-1-2, 0-1-1-1-2, 0-1-1-1-1-2, and so on."
      },
      {
        "input": "n = 2, edges = [[0,1],[1,1]], source = 0, destination = 1",
        "output": "false",
        "explanation": "There is infinite self-loop at destination node."
      }
    ],
    "constraints": [
      "1 <= n <= 104",
      "0 <= edges.length <= 104",
      "edges.length == 2",
      "0 <= ai, bi <= n - 1",
      "0 <= source <= n - 1",
      "0 <= destination <= n - 1",
      "The given graph may have self-loops and parallel edges."
    ]
  },
  {
    "questionId": 1060,
    "title": "Missing Element in Sorted Array",
    "titleSlug": "missing-element-in-sorted-array",
    "content": "<p>Given an integer array `nums` which is sorted in ascending order and all of its elements are unique and given also an integer `k`, return the `kth` missing number starting from the leftmost number of the array.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def missing_element_in_sorted_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [4,7,9,10], k = 1",
        "output": "5",
        "explanation": "The first missing number is 5."
      },
      {
        "input": "nums = [4,7,9,10], k = 3",
        "output": "8",
        "explanation": "The missing numbers are [5,6,8,...], hence the third missing number is 8."
      },
      {
        "input": "nums = [1,2,4], k = 3",
        "output": "6",
        "explanation": "The missing numbers are [3,5,6,7,...], hence the third missing number is 6."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 5 * 104",
      "1 <= nums[i] <= 107",
      "nums is sorted in ascending order, and all the elements are unique.",
      "1 <= k <= 108",
      "Follow up: Can you find a logarithmic time complexity (i.e., O(log(n))) solution?"
    ]
  },
  {
    "questionId": 1062,
    "title": "Longest Repeating Substring",
    "titleSlug": "longest-repeating-substring",
    "content": "<p>Given a string `S`, find out the length of the longest repeating substring(s). Return `0` if no repeating substring exists.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_repeating_substring(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "S = \"abcd\"",
        "output": "0",
        "explanation": "There is no repeating substring."
      },
      {
        "input": "S = \"abbaba\"",
        "output": "2",
        "explanation": "The longest repeating substrings are \"ab\" and \"ba\", each of which occurs twice."
      },
      {
        "input": "S = \"aabcaabdaab\"",
        "output": "3",
        "explanation": "The longest repeating substring is \"aab\", which occurs `3` times."
      },
      {
        "input": "S = \"aaaaa\"",
        "output": "4",
        "explanation": "The longest repeating substring is \"aaaa\", which occurs twice."
      }
    ],
    "constraints": [
      "The string S consists of only lowercase English letters from 'a' - 'z'.",
      "1 <= S.length <= 1500"
    ]
  },
  {
    "questionId": 1064,
    "title": "Fixed Point",
    "titleSlug": "fixed-point",
    "content": "<p>Given an array of distinct integers `arr`, where `arr` is sorted in ascending order, return the smallest index `i` that satisfies `arr[i] == i`. If there is no such index, return `-1`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def fixed_point(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [-10,-5,0,3,7]",
        "output": "3",
        "explanation": "For the given array, `arr[0] = -10, arr[1] = -5, arr[2] = 0, arr[3] = 3`, thus the output is 3."
      },
      {
        "input": "arr = [0,2,5,8,17]",
        "output": "0",
        "explanation": "`arr[0] = 0`, thus the output is 0."
      },
      {
        "input": "arr = [-10,-5,3,4,7,9]",
        "output": "-1",
        "explanation": "There is no such `i` that `arr[i] == i`, thus the output is -1."
      }
    ],
    "constraints": [
      "1 <= arr.length < 104",
      "-109 <= arr[i] <= 109",
      "Follow up: The O(n) solution is very straightforward. Can we do better?"
    ]
  },
  {
    "questionId": 1066,
    "title": "Campus Bikes II",
    "titleSlug": "campus-bikes-ii",
    "content": "<p>On a campus represented as a 2D grid, there are `N` workers and `M` bikes, with `N <= M`. Each worker and bike is a 2D coordinate on this grid.</p>\n<p>We assign one unique bike to each worker so that the sum of the Manhattan distances between each worker and their assigned bike is minimized.</p>\n<p>The Manhattan distance between two points `p1` and `p2` is `Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|`.</p>\n<p>Return the minimum possible sum of Manhattan distances between each worker and their assigned bike.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def campus_bikes_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "workers = [[0,0],[2,1]], bikes = [[1,2],[3,3]]",
        "output": "6",
        "explanation": "We assign bike 0 to worker 0, bike 1 to worker 1. The Manhattan distance of both assignments is 3, so the output is 6."
      },
      {
        "input": "workers = [[0,0],[1,1],[2,0]], bikes = [[1,0],[2,2],[2,1]]",
        "output": "4",
        "explanation": "We first assign bike 0 to worker 0, then assign bike 1 to worker 1 or worker 2, bike 2 to worker 2 or worker 1. Both assignments lead to sum of the Manhattan distances as 4."
      },
      {
        "input": "workers = [[0,0],[1,0],[2,0],[3,0],[4,0]], bikes = [[0,999],[1,999],[2,999],[3,999],[4,999]]",
        "output": "4995"
      }
    ],
    "constraints": [
      "N == workers.length",
      "M == bikes.length",
      "1 <= N <= M <= 10",
      "workers[i].length == 2",
      "bikes[i].length == 2",
      "0 <= workers[i][0], workers[i][1], bikes[i][0], bikes[i][1] < 1000",
      "All the workers and the bikes locations are unique."
    ]
  },
  {
    "questionId": 1071,
    "title": "Greatest Common Divisor of Strings",
    "titleSlug": "greatest-common-divisor-of-strings",
    "content": "<p>For two strings `s` and `t`, we say \"`t` divides `s`\" if and only if `s = t + ... + t`  (`t` concatenated with itself 1 or more times)\nGiven two strings str1 and str2, return the largest string `x` such that `x` divides both `str1` and `str2`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def greatest_common_divisor_of_strings(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "str1 = \"ABCABC\", str2 = \"ABC\"",
        "output": "\"ABC\""
      },
      {
        "input": "str1 = \"ABABAB\", str2 = \"ABAB\"",
        "output": "\"AB\""
      },
      {
        "input": "str1 = \"LEET\", str2 = \"CODE\"",
        "output": "\"\""
      },
      {
        "input": "str1 = \"ABCDEF\", str2 = \"ABC\"",
        "output": "\"\""
      }
    ],
    "constraints": [
      "1 <= str1.length <= 1000",
      "1 <= str2.length <= 1000",
      "str1 and str2 consist of English uppercase letters."
    ]
  },
  {
    "questionId": 1072,
    "title": "Flip Columns For Maximum Number of Equal Rows",
    "titleSlug": "flip-columns-for-maximum-number-of-equal-rows",
    "content": "<p>You are given an `m x n` binary matrix `matrix`.</p>\n<p>You can choose any number of columns in the matrix and flip every cell in that column (i.e., Change the value of the cell from `0` to `1` or vice versa).</p>\n<p>Return the maximum number of rows that have all values equal after some number of flips.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def flip_columns_for_maximum_number_of_equal_rows(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "matrix = [[0,1],[1,1]]",
        "output": "1",
        "explanation": "After flipping no values, 1 row has all values equal."
      },
      {
        "input": "matrix = [[0,1],[1,0]]",
        "output": "2",
        "explanation": "After flipping values in the first column, both rows have equal values."
      },
      {
        "input": "matrix = [[0,0,0],[0,0,1],[1,1,0]]",
        "output": "2",
        "explanation": "After flipping values in the first two columns, the last two rows have equal values."
      }
    ],
    "constraints": [
      "m == matrix.length",
      "n == matrix[i].length",
      "1 <= m, n <= 300",
      "matrix[i][j] is either 0 or 1."
    ]
  },
  {
    "questionId": 1073,
    "title": "Adding Two Negabinary Numbers",
    "titleSlug": "adding-two-negabinary-numbers",
    "content": "<p>Given two numbers `arr1` and `arr2` in base -2, return the result of adding them together.</p>\n<p>Each number is given in array format:  as an array of 0s and 1s, from most significant bit to least significant bit.  For example, `arr = [1,1,0,1]` represents the number `(-2)^3 + (-2)^2 + (-2)^0 = -3`.  A number `arr` in array, format is also guaranteed to have no leading zeros: either `arr == [0]` or `arr[0] == 1`.</p>\n<p>Return the result of adding `arr1` and `arr2` in the same format: as an array of 0s and 1s with no leading zeros.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def adding_two_negabinary_numbers(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr1 = [1,1,1,1,1], arr2 = [1,0,1]",
        "output": "[1,0,0,0,0]",
        "explanation": "arr1 represents 11, arr2 represents 5, the output represents 16."
      },
      {
        "input": "arr1 = [0], arr2 = [0]",
        "output": "[0]"
      },
      {
        "input": "arr1 = [0], arr2 = [1]",
        "output": "[1]"
      }
    ],
    "constraints": [
      "1 <= arr1.length, arr2.length <= 1000",
      "arr1[i] and arr2[i] are 0 or 1",
      "arr1 and arr2 have no leading zeros"
    ]
  },
  {
    "questionId": 1079,
    "title": "Letter Tile Possibilities",
    "titleSlug": "letter-tile-possibilities",
    "content": "<p>You have `n`  `tiles`, where each tile has one letter `tiles[i]` printed on it.</p>\n<p>Return the number of possible non-empty sequences of letters you can make using the letters printed on those `tiles`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def letter_tile_possibilities(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "tiles = \"AAB\"",
        "output": "8",
        "explanation": "The possible sequences are \"A\", \"B\", \"AA\", \"AB\", \"BA\", \"AAB\", \"ABA\", \"BAA\"."
      },
      {
        "input": "tiles = \"AAABBC\"",
        "output": "188"
      },
      {
        "input": "tiles = \"V\"",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= tiles.length <= 7",
      "tiles consists of uppercase English letters."
    ]
  },
  {
    "questionId": 1081,
    "title": "Smallest Subsequence of Distinct Characters",
    "titleSlug": "smallest-subsequence-of-distinct-characters",
    "content": "<p>Return the lexicographically smallest subsequence of `s` that contains all the distinct characters of `s` exactly once.</p>\n<p>Note: This question is the same as 316: https://leetcode.com/problems/remove-duplicate-letters/</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def smallest_subsequence_of_distinct_characters(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"bcabc\"",
        "output": "\"abc\""
      },
      {
        "input": "s = \"cbacdcbc\"",
        "output": "\"acdb\""
      }
    ],
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of lowercase English letters."
    ]
  },
  {
    "questionId": 1085,
    "title": "Sum of Digits in the Minimum Number",
    "titleSlug": "sum-of-digits-in-the-minimum-number",
    "content": "<p>Given an array `A` of positive integers, let `S` be the sum of the digits of the minimal element of `A`.</p>\n<p>Return 0 if `S` is odd, otherwise return 1.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sum_of_digits_in_the_minimum_number(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "[34,23,1,24,75,33,54,8]",
        "output": "0",
        "explanation": "The minimal element is 1, and the sum of those digits is S = 1 which is odd, so the answer is 0."
      },
      {
        "input": "[99,77,33,66,55]",
        "output": "1",
        "explanation": "The minimal element is 33, and the sum of those digits is S = 3 + 3 = 6 which is even, so the answer is 1."
      }
    ],
    "constraints": [
      "1 <= A.length <= 100",
      "1 <= A[i] <= 100"
    ]
  },
  {
    "questionId": 1086,
    "title": "High Five",
    "titleSlug": "high-five",
    "content": "<p>Given a list of the scores of different students, `items`, where `items[i] = [IDi, scorei]` represents one score from a student with `IDi`, calculate each student's top five average.</p>\n<p>Return the answer as an array of pairs `result`, where `result[j] = [IDj, topFiveAveragej]` represents the student with `IDj` and their top five average. Sort `result` by `IDj` in increasing order.</p>\n<p>A student's top five average is calculated by taking the sum of their top five scores and dividing it by `5` using integer division.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def high_five(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "items = [[1,91],[1,92],[2,93],[2,97],[1,60],[2,77],[1,65],[1,87],[1,100],[2,100],[2,76]]",
        "output": "[[1,87],[2,88]]",
        "explanation": "The student with ID = 1 got scores 91, 92, 60, 65, 87, and 100. Their top five average is (100 + 92 + 91 + 87 + 65) / 5 = 87."
      },
      {
        "input": "items = [[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100]]",
        "output": "[[1,100],[7,100]]"
      }
    ],
    "constraints": [
      "1 <= items.length <= 1000",
      "items[i].length == 2",
      "1 <= IDi <= 1000",
      "0 <= scorei <= 100",
      "For each IDi, there will be at least five scores."
    ]
  },
  {
    "questionId": 1087,
    "title": "Brace Expansion",
    "titleSlug": "brace-expansion",
    "content": "<p>You are given a string `s` representing a list of words. Each letter in the word has one or more options.</p>\n<p>If there is one option, the letter is represented as is.</p>\n<p>If there is more than one option, then curly braces delimit the options. For example, `\"{a,b,c}\"` represents options `[\"a\", \"b\", \"c\"]`.</p>\n<p>For example, if `s = \"a{b,c}\"`, the first character is always `'a'`, but the second character can be `'b'` or `'c'`. The original list is `[\"ab\", \"ac\"]`.</p>\n<p>Return all words that can be formed in this manner, sorted in lexicographical order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def brace_expansion(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"{a,b}c{d,e}f\"",
        "output": "[\"acdf\",\"acef\",\"bcdf\",\"bcef\"]"
      },
      {
        "input": "s = \"abcd\"",
        "output": "[\"abcd\"]"
      }
    ],
    "constraints": [
      "1 <= s.length <= 50",
      "s consists of curly brackets '{}', commas ',', and lowercase English letters.",
      "s is guaranteed to be a valid input.",
      "There are no nested curly brackets.",
      "All characters inside a pair of consecutive opening and ending curly brackets are different."
    ]
  },
  {
    "questionId": 1091,
    "title": "Shortest Path in Binary Matrix",
    "titleSlug": "shortest-path-in-binary-matrix",
    "content": "<p>Given an `n x n` binary matrix `grid`, return the length of the shortest clear path in the matrix. If there is no clear path, return `-1`.</p>\n<p>A clear path in a binary matrix is a path from the top-left cell (i.e., `(0, 0)`) to the bottom-right cell (i.e., `(n - 1, n - 1)`) such that:\nAll the visited cells of the path are `0`.</p>\n<p>All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).</p>\n<p>The length of a clear path is the number of visited cells of this path.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def shortest_path_in_binary_matrix(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "grid = [[0,1],[1,0]]",
        "output": "2"
      },
      {
        "input": "grid = [[0,0,0],[1,1,0],[1,1,0]]",
        "output": "4"
      },
      {
        "input": "grid = [[1,0,0],[1,1,0],[1,1,0]]",
        "output": "-1"
      }
    ],
    "constraints": [
      "n == grid.length",
      "n == grid[i].length",
      "1 <= n <= 100",
      "grid[i][j] is 0 or 1"
    ]
  },
  {
    "questionId": 1093,
    "title": "Statistics from a Large Sample",
    "titleSlug": "statistics-from-a-large-sample",
    "content": "<p>You are given a large sample of integers in the range `[0, 255]`. Since the sample is so large, it is represented by an array `count` where `count[k]` is the number of times that `k` appears in the sample.</p>\n<p>Calculate the following statistics:\n`minimum`: The minimum element in the sample.</p>\n<p>`maximum`: The maximum element in the sample.</p>\n<p>`mean`: The average of the sample, calculated as the total sum of all elements divided by the total number of elements.</p>\n<p>`median`:</p>\n<p>If the sample has an odd number of elements, then the `median` is the middle element once the sample is sorted.</p>\n<p>If the sample has an even number of elements, then the `median` is the average of the two middle elements once the sample is sorted.</p>\n<p>`mode`: The number that appears the most in the sample. It is guaranteed to be unique.</p>\n<p>Return the statistics of the sample as an array of floating-point numbers `[minimum, maximum, mean, median, mode]`. Answers within `10-5` of the actual answer will be accepted.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def statistics_from_a_large_sample(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "[1.00000,3.00000,2.37500,2.50000,3.00000]",
        "explanation": "The sample represented by count is [1,2,2,2,3,3,3,3]."
      },
      {
        "input": "count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "[1.00000,4.00000,2.18182,2.00000,1.00000]",
        "explanation": "The sample represented by count is [1,1,1,1,2,2,2,3,3,4,4]."
      }
    ],
    "constraints": [
      "count.length == 256",
      "0 <= count[i] <= 109",
      "1 <= sum(count) <= 109",
      "The mode of the sample that count represents is unique."
    ]
  },
  {
    "questionId": 1094,
    "title": "Car Pooling",
    "titleSlug": "car-pooling",
    "content": "<p>You are driving a vehicle that has `capacity` empty seats initially available for passengers.  The vehicle only drives east (ie. it cannot turn around and drive west.)\nGiven a list of `trips`, `trip[i] = [num_passengers, start_location, end_location]` contains information about the `i`-th trip: the number of passengers that must be picked up, and the locations to pick them up and drop them off.  The locations are given as the number of kilometers due east from your vehicle's initial location.</p>\n<p>Return `true` if and only if it is possible to pick up and drop off all passengers for all the given trips.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def car_pooling(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "trips = [[2,1,5],[3,3,7]], capacity = 4",
        "output": "false"
      },
      {
        "input": "trips = [[2,1,5],[3,3,7]], capacity = 5",
        "output": "true"
      },
      {
        "input": "trips = [[2,1,5],[3,5,7]], capacity = 3",
        "output": "true"
      },
      {
        "input": "trips = [[3,2,7],[3,7,9],[8,3,9]], capacity = 11",
        "output": "true"
      }
    ],
    "constraints": [
      "trips.length <= 1000",
      "trips[i].length == 3",
      "1 <= trips[i][0] <= 100",
      "0 <= trips[i][1] < trips[i][2] <= 1000",
      "1 <= capacity <= 100000"
    ]
  },
  {
    "questionId": 1099,
    "title": "Two Sum Less Than K",
    "titleSlug": "two-sum-less-than-k",
    "content": "<p>Given an array `nums` of integers and integer `k`, return the maximum `sum` such that there exists `i < j` with `nums[i] + nums[j] = sum` and `sum < k`. If no `i`, `j` exist satisfying this equation, return `-1`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def two_sum_less_than_k(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [34,23,1,24,75,33,54,8], k = 60",
        "output": "58",
        "explanation": "We can use 34 and 24 to sum 58 which is less than 60."
      },
      {
        "input": "nums = [10,20,30], k = 15",
        "output": "-1",
        "explanation": "In this case it is not possible to get a pair sum less that 15."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 100",
      "1 <= nums[i] <= 1000",
      "1 <= k <= 2000"
    ]
  },
  {
    "questionId": 1103,
    "title": "Distribute Candies to People",
    "titleSlug": "distribute-candies-to-people",
    "content": "<p>We distribute some number of `candies`, to a row of `n = num_people` people in the following way:\nWe then give 1 candy to the first person, 2 candies to the second person, and so on until we give `n` candies to the last person.</p>\n<p>Then, we go back to the start of the row, giving `n + 1` candies to the first person, `n + 2` candies to the second person, and so on until we give `2 * n` candies to the last person.</p>\n<p>This process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies.  The last person will receive all of our remaining candies (not necessarily one more than the previous gift).</p>\n<p>Return an array (of length `num_people` and sum `candies`) that represents the final distribution of candies.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def distribute_candies_to_people(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "candies = 7, num_people = 4",
        "output": "[1,2,3,1]",
        "explanation": "On the first turn, ans[0] += 1, and the array is [1,0,0,0]."
      },
      {
        "input": "candies = 10, num_people = 3",
        "output": "[5,2,3]",
        "explanation": "On the first turn, ans[0] += 1, and the array is [1,0,0]."
      }
    ],
    "constraints": [
      "1 <= candies <= 10^9",
      "1 <= num_people <= 1000"
    ]
  },
  {
    "questionId": 1104,
    "title": "Path In Zigzag Labelled Binary Tree",
    "titleSlug": "path-in-zigzag-labelled-binary-tree",
    "content": "<p>In an infinite binary tree where every node has two children, the nodes are labelled in row order.</p>\n<p>In the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left.</p>\n<p>Given the `label` of a node in this tree, return the labels in the path from the root of the tree to the node with that `label`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def path_in_zigzag_labelled_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "label = 14",
        "output": "[1,3,4,14]"
      },
      {
        "input": "label = 26",
        "output": "[1,2,6,10,26]"
      }
    ],
    "constraints": [
      "1 <= label <= 10^6"
    ]
  },
  {
    "questionId": 1105,
    "title": "Filling Bookcase Shelves",
    "titleSlug": "filling-bookcase-shelves",
    "content": "<p>We have a sequence of `books`: the `i`-th book has thickness `books[i][0]` and height `books[i][1]`.</p>\n<p>We want to place these books in order onto bookcase shelves that have total width `shelf_width`.</p>\n<p>We choose some of the books to place on this shelf (such that the sum of their thickness is `<= shelf_width`), then build another level of shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down.  We repeat this process until there are no more books to place.</p>\n<p>Note again that at each step of the above process, the order of the books we place is the same order as the given sequence of books.  For example, if we have an ordered list of 5 books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf.</p>\n<p>Return the minimum possible height that the total bookshelf can be after placing shelves in this manner.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def filling_bookcase_shelves(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelf_width = 4",
        "output": "6",
        "explanation": "The sum of the heights of the 3 shelves are 1 + 3 + 2 = 6."
      }
    ],
    "constraints": [
      "1 <= books.length <= 1000",
      "1 <= books[i][0] <= shelf_width <= 1000",
      "1 <= books[i][1] <= 1000"
    ]
  },
  {
    "questionId": 1108,
    "title": "Defanging an IP Address",
    "titleSlug": "defanging-an-ip-address",
    "content": "<p>Given a valid (IPv4) IP `address`, return a defanged version of that IP address.</p>\n<p>A defanged IP address replaces every period `\".\"` with `\"[.]\"`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def defanging_an_ip_address(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "address = \"1.1.1.1\"",
        "output": "\"1[.]1[.]1[.]1\""
      },
      {
        "input": "address = \"255.100.50.0\"",
        "output": "\"255[.]100[.]50[.]0\""
      }
    ],
    "constraints": [
      "The given address is a valid IPv4 address."
    ]
  },
  {
    "questionId": 1109,
    "title": "Corporate Flight Bookings",
    "titleSlug": "corporate-flight-bookings",
    "content": "<p>There are `n` flights that are labeled from `1` to `n`.</p>\n<p>You are given an array of flight bookings `bookings`, where `bookings[i] = [firsti, lasti, seatsi]` represents a booking for flights `firsti` through `lasti` (inclusive) with `seatsi` seats reserved for each flight in the range.</p>\n<p>Return an array `answer` of length `n`, where `answer[i]` is the total number of seats reserved for flight `i`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def corporate_flight_bookings(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5",
        "output": "[10,55,45,25,25]",
        "explanation": "Flight labels:        1   2   3   4   5"
      },
      {
        "input": "bookings = [[1,2,10],[2,2,15]], n = 2",
        "output": "[10,25]",
        "explanation": "Flight labels:        1   2"
      }
    ],
    "constraints": [
      "1 <= n <= 2 * 104",
      "1 <= bookings.length <= 2 * 104",
      "bookings[i].length == 3",
      "1 <= firsti <= lasti <= n",
      "1 <= seatsi <= 104"
    ]
  },
  {
    "questionId": 1110,
    "title": "Delete Nodes And Return Forest",
    "titleSlug": "delete-nodes-and-return-forest",
    "content": "<p>Given the `root` of a binary tree, each node in the tree has a distinct value.</p>\n<p>After deleting all nodes with a value in `to_delete`, we are left with a forest (a disjoint union of trees).</p>\n<p>Return the roots of the trees in the remaining forest. You may return the result in any order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def delete_nodes_and_return_forest(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2,3,4,5,6,7], to_delete = [3,5]",
        "output": "[[1,2,null,4],[6],[7]]"
      },
      {
        "input": "root = [1,2,4,null,3], to_delete = [3]",
        "output": "[[1,2,4]]"
      }
    ],
    "constraints": [
      "The number of nodes in the given tree is at most 1000.",
      "Each node has a distinct value between 1 and 1000.",
      "to_delete.length <= 1000",
      "to_delete contains distinct values between 1 and 1000."
    ]
  },
  {
    "questionId": 1111,
    "title": "Maximum Nesting Depth of Two Valid Parentheses Strings",
    "titleSlug": "maximum-nesting-depth-of-two-valid-parentheses-strings",
    "content": "<p>A string is a valid parentheses string (denoted VPS) if and only if it consists of `\"(\"` and `\")\"` characters only, and:\nIt is the empty string, or\nIt can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are VPS's, or\nIt can be written as `(A)`, where `A` is a VPS.</p>\n<p>We can similarly define the nesting depth `depth(S)` of any VPS `S` as follows:\n`depth(\"\") = 0`\n`depth(A + B) = max(depth(A), depth(B))`, where `A` and `B` are VPS's\n`depth(\"(\" + A + \")\") = 1 + depth(A)`, where `A` is a VPS.</p>\n<p>For example,  `\"\"`, `\"()()\"`, and `\"()(()())\"` are VPS's (with nesting depths 0, 1, and 2), and `\")(\"` and `\"(()\"` are not VPS's.</p>\n<p>Given a VPS seq, split it into two disjoint subsequences `A` and `B`, such that `A` and `B` are VPS's (and `A.length + B.length = seq.length`).</p>\n<p>Now choose any such `A` and `B` such that `max(depth(A), depth(B))` is the minimum possible value.</p>\n<p>Return an `answer` array (of length `seq.length`) that encodes such a choice of `A` and `B`:  `answer[i] = 0` if `seq[i]` is part of `A`, else `answer[i] = 1`.  Note that even though multiple answers may exist, you may return any of them.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_nesting_depth_of_two_valid_parentheses_strings(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "seq = \"(()())\"",
        "output": "[0,1,1,1,1,0]"
      },
      {
        "input": "seq = \"()(())()\"",
        "output": "[0,0,0,1,1,0,1,1]"
      }
    ],
    "constraints": [
      "1 <= seq.size <= 10000"
    ]
  },
  {
    "questionId": 1117,
    "title": "Building H2O",
    "titleSlug": "building-h2o",
    "content": "<p>There are two kinds of threads, `oxygen` and `hydrogen`. Your goal is to group these threads to form water molecules. There is a barrier where each thread has to wait until a complete molecule can be formed. Hydrogen and oxygen threads will be given `releaseHydrogen` and `releaseOxygen` methods respectively, which will allow them to pass the barrier. These threads should pass the barrier in groups of three, and they must be able to immediately bond with each other to form a water molecule. You must guarantee that all the threads from one molecule bond before any other threads from the next molecule do.</p>\n<p>In other words:\nIf an oxygen thread arrives at the barrier when no hydrogen threads are present, it has to wait for two hydrogen threads.</p>\n<p>If a hydrogen thread arrives at the barrier when no other threads are present, it has to wait for an oxygen thread and another hydrogen thread.</p>\n<p>We don\u2019t have to worry about matching the threads up explicitly; that is, the threads do not necessarily know which other threads they are paired up with. The key is just that threads pass the barrier in complete sets; thus, if we examine the sequence of threads that bond and divide them into groups of three, each group should contain one oxygen and two hydrogen threads.</p>\n<p>Write synchronization code for oxygen and hydrogen molecules that enforces these constraints.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def building_h2o(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "\"HOH\"",
        "output": "\"HHO\"",
        "explanation": "\"HOH\" and \"OHH\" are also valid answers."
      },
      {
        "input": "\"OOHHHH\"",
        "output": "\"HHOHHO\"",
        "explanation": "\"HOHHHO\", \"OHHHHO\", \"HHOHOH\", \"HOHHOH\", \"OHHHOH\", \"HHOOHH\", \"HOHOHH\" and \"OHHOHH\" are also valid answers."
      }
    ],
    "constraints": [
      "Total length of input string will be 3n, where 1 \u2264 n \u2264 20.",
      "Total number of H will be 2n in the input string.",
      "Total number of O will be n in the input string."
    ]
  },
  {
    "questionId": 1119,
    "title": "Remove Vowels from a String",
    "titleSlug": "remove-vowels-from-a-string",
    "content": "<p>Given a string `s`, remove the vowels `'a'`, `'e'`, `'i'`, `'o'`, and `'u'` from it, and return the new string.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def remove_vowels_from_a_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"leetcodeisacommunityforcoders\"",
        "output": "\"ltcdscmmntyfrcdrs\""
      },
      {
        "input": "s = \"aeiou\"",
        "output": "\"\""
      }
    ],
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of only lowercase English letters."
    ]
  },
  {
    "questionId": 1122,
    "title": "Relative Sort Array",
    "titleSlug": "relative-sort-array",
    "content": "<p>Given two arrays `arr1` and `arr2`, the elements of `arr2` are distinct, and all elements in `arr2` are also in `arr1`.</p>\n<p>Sort the elements of `arr1` such that the relative ordering of items in `arr1` are the same as in `arr2`.  Elements that don't appear in `arr2` should be placed at the end of `arr1` in ascending order.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def relative_sort_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]",
        "output": "[2,2,2,1,4,3,3,9,6,7,19]"
      }
    ],
    "constraints": [
      "1 <= arr1.length, arr2.length <= 1000",
      "0 <= arr1[i], arr2[i] <= 1000",
      "All the elements of arr2 are distinct.",
      "Each arr2[i] is in arr1."
    ]
  },
  {
    "questionId": 1123,
    "title": "Lowest Common Ancestor of Deepest Leaves",
    "titleSlug": "lowest-common-ancestor-of-deepest-leaves",
    "content": "<p>Given the `root` of a binary tree, return the lowest common ancestor of its deepest leaves.</p>\n<p>Recall that:\nThe node of a binary tree is a leaf if and only if it has no children\nThe depth of the root of the tree is `0`. if the depth of a node is `d`, the depth of each of its children is `d + 1`.</p>\n<p>The lowest common ancestor of a set `S` of nodes, is the node `A` with the largest depth such that every node in `S` is in the subtree with root `A`.</p>\n<p>Note: This question is the same as 865: https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def lowest_common_ancestor_of_deepest_leaves(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4]",
        "output": "[2,7,4]",
        "explanation": "We return the node with value 2, colored in yellow in the diagram."
      },
      {
        "input": "root = [1]",
        "output": "[1]",
        "explanation": "The root is the deepest node in the tree, and it's the lca of itself."
      },
      {
        "input": "root = [0,1,3,null,2]",
        "output": "[2]",
        "explanation": "The deepest leaf node in the tree is 2, the lca of one node is itself."
      }
    ],
    "constraints": [
      "The number of nodes in the tree will be in the range [1, 1000].",
      "0 <= Node.val <= 1000",
      "The values of the nodes in the tree are unique."
    ]
  },
  {
    "questionId": 1124,
    "title": "Longest Well-Performing Interval",
    "titleSlug": "longest-well-performing-interval",
    "content": "<p>We are given `hours`, a list of the number of hours worked per day for a given employee.</p>\n<p>A day is considered to be a tiring day if and only if the number of hours worked is (strictly) greater than `8`.</p>\n<p>A well-performing interval is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days.</p>\n<p>Return the length of the longest well-performing interval.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_well_performing_interval(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "hours = [9,9,6,0,6,6,9]",
        "output": "3",
        "explanation": "The longest well-performing interval is [9,9,6]."
      }
    ],
    "constraints": [
      "1 <= hours.length <= 10000",
      "0 <= hours[i] <= 16"
    ]
  },
  {
    "questionId": 1128,
    "title": "Number of Equivalent Domino Pairs",
    "titleSlug": "number-of-equivalent-domino-pairs",
    "content": "<p>Given a list of `dominoes`, `dominoes[i] = [a, b]` is equivalent to `dominoes[j] = [c, d]` if and only if either (`a==c` and `b==d`), or (`a==d` and `b==c`) - that is, one domino can be rotated to be equal to another domino.</p>\n<p>Return the number of pairs `(i, j)` for which `0 <= i < j < dominoes.length`, and `dominoes[i]` is equivalent to `dominoes[j]`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_equivalent_domino_pairs(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "dominoes = [[1,2],[2,1],[3,4],[5,6]]",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= dominoes.length <= 40000",
      "1 <= dominoes[i][j] <= 9"
    ]
  },
  {
    "questionId": 1129,
    "title": "Shortest Path with Alternating Colors",
    "titleSlug": "shortest-path-with-alternating-colors",
    "content": "<p>Consider a directed graph, with nodes labelled `0, 1, ..., n-1`.  In this graph, each edge is either red or blue, and there could be self-edges or parallel edges.</p>\n<p>Each `[i, j]` in `red_edges` denotes a red directed edge from node `i` to node `j`.  Similarly, each `[i, j]` in `blue_edges` denotes a blue directed edge from node `i` to node `j`.</p>\n<p>Return an array `answer` of length `n`, where each `answer[X]` is the length of the shortest path from node `0` to node `X` such that the edge colors alternate along the path (or `-1` if such a path doesn't exist).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def shortest_path_with_alternating_colors(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 3, red_edges = [[0,1],[1,2]], blue_edges = []",
        "output": "[0,1,-1]"
      },
      {
        "input": "n = 3, red_edges = [[0,1]], blue_edges = [[2,1]]",
        "output": "[0,1,-1]"
      },
      {
        "input": "n = 3, red_edges = [[1,0]], blue_edges = [[2,1]]",
        "output": "[0,-1,-1]"
      },
      {
        "input": "n = 3, red_edges = [[0,1]], blue_edges = [[1,2]]",
        "output": "[0,1,2]"
      },
      {
        "input": "n = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]]",
        "output": "[0,1,1]"
      }
    ],
    "constraints": [
      "1 <= n <= 100",
      "red_edges.length <= 400",
      "blue_edges.length <= 400",
      "red_edges[i].length == blue_edges[i].length == 2",
      "0 <= red_edges[i][j], blue_edges[i][j] < n"
    ]
  },
  {
    "questionId": 1130,
    "title": "Minimum Cost Tree From Leaf Values",
    "titleSlug": "minimum-cost-tree-from-leaf-values",
    "content": "<p>Given an array `arr` of positive integers, consider all binary trees such that:\nEach node has either 0 or 2 children;\nThe values of `arr` correspond to the values of each leaf in an in-order traversal of the tree.  (Recall that a node is a leaf if and only if it has 0 children.)\nThe value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree respectively.</p>\n<p>Among all possible binary trees considered, return the smallest possible sum of the values of each non-leaf node.  It is guaranteed this sum fits into a 32-bit integer.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_cost_tree_from_leaf_values(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [6,2,4]",
        "output": "32",
        "explanation": "There are two possible trees.  The first has non-leaf node sum 36, and the second has non-leaf node sum 32."
      }
    ],
    "constraints": [
      "2 <= arr.length <= 40",
      "1 <= arr[i] <= 15",
      "It is guaranteed that the answer fits into a 32-bit signed integer (ie. it is less than 2^31)."
    ]
  },
  {
    "questionId": 1131,
    "title": "Maximum of Absolute Value Expression",
    "titleSlug": "maximum-of-absolute-value-expression",
    "content": "<p>Given two arrays of integers with equal lengths, return the maximum value of:\n`|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|`\nwhere the maximum is taken over all `0 <= i, j < arr1.length`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_of_absolute_value_expression(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr1 = [1,2,3,4], arr2 = [-1,4,5,6]",
        "output": "13"
      },
      {
        "input": "arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4]",
        "output": "20"
      }
    ],
    "constraints": [
      "2 <= arr1.length == arr2.length <= 40000",
      "-10^6 <= arr1[i], arr2[i] <= 10^6"
    ]
  },
  {
    "questionId": 1134,
    "title": "Armstrong Number",
    "titleSlug": "armstrong-number",
    "content": "<p>Given an integer `n`, return `true` if and only if it is an Armstrong number.</p>\n<p>The `k`-digit number `n` is an Armstrong number if and only if the `kth` power of each digit sums to `n`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def armstrong_number(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 153",
        "output": "true",
        "explanation": "153 is a 3-digit number, and 153 = 13 + 53 + 33."
      },
      {
        "input": "n = 123",
        "output": "false",
        "explanation": "123 is a 3-digit number, and 123 != 13 + 23 + 33 = 36."
      }
    ],
    "constraints": [
      "1 <= n <= 108"
    ]
  },
  {
    "questionId": 1136,
    "title": "Parallel Courses",
    "titleSlug": "parallel-courses",
    "content": "<p>You are given an integer `n` which indicates that we have `n` courses, labeled from `1` to `n`. You are also given an array `relations` where `relations[i] = [a, b]`, representing a prerequisite relationship between course `a` and course `b`: course `a` has to be studied before course `b`.</p>\n<p>In one semester, you can study any number of courses as long as you have studied all the prerequisites for the course you are studying.</p>\n<p>Return the minimum number of semesters needed to study all courses. If there is no way to study all the courses, return `-1`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def parallel_courses(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 3, relations = [[1,3],[2,3]]",
        "output": "2",
        "explanation": "In the first semester, courses 1 and 2 are studied. In the second semester, course 3 is studied."
      },
      {
        "input": "n = 3, relations = [[1,2],[2,3],[3,1]]",
        "output": "-1",
        "explanation": "No course can be studied because they depend on each other."
      }
    ],
    "constraints": [
      "1 <= n <= 5000",
      "1 <= relations.length <= 5000",
      "1 <= a, b <= n",
      "a != b",
      "All the pairs [a, b] are unique."
    ]
  },
  {
    "questionId": 1137,
    "title": "N-th Tribonacci Number",
    "titleSlug": "n-th-tribonacci-number",
    "content": "<p>The Tribonacci sequence Tn is defined as follows: \nT0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.</p>\n<p>Given `n`, return the value of Tn.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def n_th_tribonacci_number(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 4",
        "output": "4",
        "explanation": "T_3 = 0 + 1 + 1 = 2"
      },
      {
        "input": "n = 25",
        "output": "1389537"
      }
    ],
    "constraints": [
      "0 <= n <= 37",
      "The answer is guaranteed to fit within a 32-bit integer, ie. answer <= 2^31 - 1."
    ]
  },
  {
    "questionId": 1138,
    "title": "Alphabet Board Path",
    "titleSlug": "alphabet-board-path",
    "content": "<p>On an alphabet board, we start at position `(0, 0)`, corresponding to character `board[0][0]`.</p>\n<p>Here, `board = [\"abcde\", \"fghij\", \"klmno\", \"pqrst\", \"uvwxy\", \"z\"]`, as shown in the diagram below.</p>\n<p>We may make the following moves:\n`'U'` moves our position up one row, if the position exists on the board;\n`'D'` moves our position down one row, if the position exists on the board;\n`'L'` moves our position left one column, if the position exists on the board;\n`'R'` moves our position right one column, if the position exists on the board;\n`'!'` adds the character `board[r][c]` at our current position `(r, c)` to the answer.</p>\n<p>(Here, the only positions that exist on the board are positions with letters on them.)\nReturn a sequence of moves that makes our answer equal to `target` in the minimum number of moves.  You may return any path that does so.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def alphabet_board_path(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "target = \"leet\"",
        "output": "\"DDR!UURRR!!DDD!\""
      },
      {
        "input": "target = \"code\"",
        "output": "\"RR!DDRR!UUL!R!\""
      }
    ],
    "constraints": [
      "1 <= target.length <= 100",
      "target consists only of English lowercase letters."
    ]
  },
  {
    "questionId": 1139,
    "title": "Largest 1-Bordered Square",
    "titleSlug": "largest-1-bordered-square",
    "content": "<p>Given a 2D `grid` of `0`s and `1`s, return the number of elements in the largest square subgrid that has all `1`s on its border, or `0` if such a subgrid doesn't exist in the `grid`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def largest_1_bordered_square(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "grid = [[1,1,1],[1,0,1],[1,1,1]]",
        "output": "9"
      },
      {
        "input": "grid = [[1,1,0,0]]",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= grid.length <= 100",
      "1 <= grid[0].length <= 100",
      "grid[i][j] is 0 or 1"
    ]
  },
  {
    "questionId": 1140,
    "title": "Stone Game II",
    "titleSlug": "stone-game-ii",
    "content": "<p>Alice and Bob continue their games with piles of stones.  There are a number of piles arranged in a row, and each pile has a positive integer number of stones `piles[i]`.  The objective of the game is to end with the most stones. \nAlice and Bob take turns, with Alice starting first.  Initially, `M = 1`.</p>\n<p>On each player's turn, that player can take all the stones in the first `X` remaining piles, where `1 <= X <= 2M`.  Then, we set `M = max(M, X)`.</p>\n<p>The game continues until all the stones have been taken.</p>\n<p>Assuming Alice and Bob play optimally, return the maximum number of stones Alice can get.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def stone_game_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "piles = [2,7,9,4,4]",
        "output": "10",
        "explanation": "If Alice takes one pile at the beginning, Bob takes two piles, then Alice takes 2 piles again. Alice can get 2 + 4 + 4 = 10 piles in total. If Alice takes two piles at the beginning, then Bob can take all three piles left. In this case, Alice get 2 + 7 = 9 piles in total. So we return 10 since it's larger."
      },
      {
        "input": "piles = [1,2,3,4,5,100]",
        "output": "104"
      }
    ],
    "constraints": [
      "1 <= piles.length <= 100",
      "1 <= piles[i] <= 104"
    ]
  },
  {
    "questionId": 1143,
    "title": "Longest Common Subsequence",
    "titleSlug": "longest-common-subsequence",
    "content": "<p>Given two strings `text1` and `text2`, return the length of their longest common subsequence. If there is no common subsequence, return `0`.</p>\n<p>A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.</p>\n<p>For example, `\"ace\"` is a subsequence of `\"abcde\"`.</p>\n<p>A common subsequence of two strings is a subsequence that is common to both strings.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_common_subsequence(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "text1 = \"abcde\", text2 = \"ace\"",
        "output": "3",
        "explanation": "The longest common subsequence is \"ace\" and its length is 3."
      },
      {
        "input": "text1 = \"abc\", text2 = \"abc\"",
        "output": "3",
        "explanation": "The longest common subsequence is \"abc\" and its length is 3."
      },
      {
        "input": "text1 = \"abc\", text2 = \"def\"",
        "output": "0",
        "explanation": "There is no such common subsequence, so the result is 0."
      }
    ],
    "constraints": [
      "1 <= text1.length, text2.length <= 1000",
      "text1 and text2 consist of only lowercase English characters."
    ]
  },
  {
    "questionId": 1144,
    "title": "Decrease Elements To Make Array Zigzag",
    "titleSlug": "decrease-elements-to-make-array-zigzag",
    "content": "<p>Given an array `nums` of integers, a move consists of choosing any element and decreasing it by 1.</p>\n<p>An array `A` is a zigzag array if either:\nEvery even-indexed element is greater than adjacent elements, ie. `A[0] > A[1] < A[2] > A[3] < A[4] > ...`\nOR, every odd-indexed element is greater than adjacent elements, ie. `A[0] < A[1] > A[2] < A[3] > A[4] < ...`\nReturn the minimum number of moves to transform the given array `nums` into a zigzag array.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def decrease_elements_to_make_array_zigzag(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3]",
        "output": "2",
        "explanation": "We can decrease 2 to 0 or 3 to 1."
      },
      {
        "input": "nums = [9,6,1,6,2]",
        "output": "4"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 1000",
      "1 <= nums[i] <= 1000"
    ]
  },
  {
    "questionId": 1145,
    "title": "Binary Tree Coloring Game",
    "titleSlug": "binary-tree-coloring-game",
    "content": "<p>Two players play a turn based game on a binary tree.  We are given the `root` of this binary tree, and the number of nodes `n` in the tree.  `n` is odd, and each node has a distinct value from `1` to `n`.</p>\n<p>Initially, the first player names a value `x` with `1 <= x <= n`, and the second player names a value `y` with `1 <= y <= n` and `y != x`.  The first player colors the node with value `x` red, and the second player colors the node with value `y` blue.</p>\n<p>Then, the players take turns starting with the first player.  In each turn, that player chooses a node of their color (red if player 1, blue if player 2) and colors an uncolored neighbor of the chosen node (either the left child, right child, or parent of the chosen node.)\nIf (and only if) a player cannot choose such a node in this way, they must pass their turn.  If both players pass their turn, the game ends, and the winner is the player that colored more nodes.</p>\n<p>You are the second player.  If it is possible to choose such a `y` to ensure you win the game, return `true`.  If it is not possible, return `false`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def binary_tree_coloring_game(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3",
        "output": "true",
        "explanation": "The second player can choose the node with value 2."
      }
    ],
    "constraints": [
      "root is the root of a binary tree with n nodes and distinct node values from 1 to n.",
      "n is odd.",
      "1 <= x <= n <= 100"
    ]
  },
  {
    "questionId": 1146,
    "title": "Snapshot Array",
    "titleSlug": "snapshot-array",
    "content": "<p>Implement a SnapshotArray that supports the following interface:\n`SnapshotArray(int length)` initializes an array-like data structure with the given length.  Initially, each element equals 0.</p>\n<p>`void set(index, val)` sets the element at the given `index` to be equal to `val`.</p>\n<p>`int snap()` takes a snapshot of the array and returns the `snap_id`: the total number of times we called `snap()` minus `1`.</p>\n<p>`int get(index, snap_id)` returns the value at the given `index`, at the time we took the snapshot with the given `snap_id`</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def snapshot_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "[\"SnapshotArray\",\"set\",\"snap\",\"set\",\"get\"]",
        "output": "[null,null,0,null,5]",
        "explanation": "SnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3"
      }
    ],
    "constraints": [
      "1 <= length <= 50000",
      "At most 50000 calls will be made to set, snap, and get.",
      "0 <= index < length",
      "0 <= snap_id < (the total number of times we call snap())",
      "0 <= val <= 10^9"
    ]
  },
  {
    "questionId": 1150,
    "title": "Check If a Number Is Majority Element in a Sorted Array",
    "titleSlug": "check-if-a-number-is-majority-element-in-a-sorted-array",
    "content": "<p>Given an array `nums` sorted in non-decreasing order, and a number `target`, return `True` if and only if `target` is a majority element.</p>\n<p>A majority element is an element that appears more than `N/2` times in an array of length `N`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def check_if_a_number_is_majority_element_in_a_sorted_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [2,4,5,5,5,5,5,6,6], target = 5",
        "output": "true",
        "explanation": "The value 5 appears 5 times and the length of the array is 9."
      },
      {
        "input": "nums = [10,100,101,101], target = 101",
        "output": "false",
        "explanation": "The value 101 appears 2 times and the length of the array is 4."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 1000",
      "1 <= nums[i] <= 10^9",
      "1 <= target <= 10^9"
    ]
  },
  {
    "questionId": 1151,
    "title": "Minimum Swaps to Group All 1's Together",
    "titleSlug": "minimum-swaps-to-group-all-1s-together",
    "content": "<p>Given a binary array `data`, return the minimum number of swaps required to group all `1`\u2019s present in the array together in any place in the array.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_swaps_to_group_all_1s_together(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "data = [1,0,1,0,1]",
        "output": "1",
        "explanation": "There are 3 ways to group all 1's together:"
      },
      {
        "input": "data = [0,0,0,1,0]",
        "output": "0",
        "explanation": "Since there is only one 1 in the array, no swaps needed."
      },
      {
        "input": "data = [1,0,1,0,1,0,0,1,1,0,1]",
        "output": "3",
        "explanation": "One possible solution that uses 3 swaps is [0,0,0,0,0,1,1,1,1,1,1]."
      },
      {
        "input": "data = [1,0,1,0,1,0,1,1,1,0,1,0,0,1,1,1,0,0,1,1,1,0,1,0,1,1,0,0,0,1,1,1,1,0,0,1]",
        "output": "8"
      }
    ],
    "constraints": [
      "1 <= data.length <= 105",
      "data[i] is 0 or 1."
    ]
  },
  {
    "questionId": 1154,
    "title": "Day of the Year",
    "titleSlug": "day-of-the-year",
    "content": "<p>Given a string `date` representing a Gregorian calendar date formatted as `YYYY-MM-DD`, return the day number of the year.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def day_of_the_year(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "date = \"2019-01-09\"",
        "output": "9",
        "explanation": "Given date is the 9th day of the year in 2019."
      },
      {
        "input": "date = \"2019-02-10\"",
        "output": "41"
      },
      {
        "input": "date = \"2003-03-01\"",
        "output": "60"
      },
      {
        "input": "date = \"2004-03-01\"",
        "output": "61"
      }
    ],
    "constraints": [
      "date.length == 10",
      "date[4] == date[7] == '-', and all other date[i]'s are digits",
      "date represents a calendar date between Jan 1st, 1900 and Dec 31, 2019."
    ]
  },
  {
    "questionId": 1155,
    "title": "Number of Dice Rolls With Target Sum",
    "titleSlug": "number-of-dice-rolls-with-target-sum",
    "content": "<p>You have `d` dice, and each die has `f` faces numbered `1, 2, ..., f`.</p>\n<p>Return the number of possible ways (out of `fd` total ways) modulo `10^9 + 7` to roll the dice so the sum of the face up numbers equals `target`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_dice_rolls_with_target_sum(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "d = 1, f = 6, target = 3",
        "output": "1",
        "explanation": "You throw one die with 6 faces.  There is only one way to get a sum of 3."
      },
      {
        "input": "d = 2, f = 6, target = 7",
        "output": "6",
        "explanation": "You throw two dice, each with 6 faces.  There are 6 ways to get a sum of 7:"
      },
      {
        "input": "d = 2, f = 5, target = 10",
        "output": "1",
        "explanation": "You throw two dice, each with 5 faces.  There is only one way to get a sum of 10: 5+5."
      },
      {
        "input": "d = 1, f = 2, target = 3",
        "output": "0",
        "explanation": "You throw one die with 2 faces.  There is no way to get a sum of 3."
      },
      {
        "input": "d = 30, f = 30, target = 500",
        "output": "222616187",
        "explanation": "The answer must be returned modulo 10^9 + 7."
      }
    ],
    "constraints": [
      "1 <= d, f <= 30",
      "1 <= target <= 1000"
    ]
  },
  {
    "questionId": 1156,
    "title": "Swap For Longest Repeated Character Substring",
    "titleSlug": "swap-for-longest-repeated-character-substring",
    "content": "<p>Given a string `text`, we are allowed to swap two of the characters in the string. Find the length of the longest substring with repeated characters.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def swap_for_longest_repeated_character_substring(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "text = \"ababa\"",
        "output": "3",
        "explanation": "We can swap the first 'b' with the last 'a', or the last 'b' with the first 'a'. Then, the longest repeated character substring is \"aaa\", which its length is 3."
      },
      {
        "input": "text = \"aaabaaa\"",
        "output": "6",
        "explanation": "Swap 'b' with the last 'a' (or the first 'a'), and we get longest repeated character substring \"aaaaaa\", which its length is 6."
      },
      {
        "input": "text = \"aaabbaaa\"",
        "output": "4"
      },
      {
        "input": "text = \"aaaaa\"",
        "output": "5",
        "explanation": "No need to swap, longest repeated character substring is \"aaaaa\", length is 5."
      },
      {
        "input": "text = \"abcdef\"",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= text.length <= 20000",
      "text consist of lowercase English characters only."
    ]
  },
  {
    "questionId": 1161,
    "title": "Maximum Level Sum of a Binary Tree",
    "titleSlug": "maximum-level-sum-of-a-binary-tree",
    "content": "<p>Given the `root` of a binary tree, the level of its root is `1`, the level of its children is `2`, and so on.</p>\n<p>Return the smallest level `x` such that the sum of all the values of nodes at level `x` is maximal.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_level_sum_of_a_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,7,0,7,-8,null,null]",
        "output": "2",
        "explanation": "Level 1 sum = 1."
      },
      {
        "input": "root = [989,null,10250,98693,-89388,null,null,null,-32127]",
        "output": "2"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 104].",
      "-105 <= Node.val <= 105"
    ]
  },
  {
    "questionId": 1162,
    "title": "As Far from Land as Possible",
    "titleSlug": "as-far-from-land-as-possible",
    "content": "<p>Given an `n x n` `grid` containing only values `0` and `1`, where `0` represents water and `1` represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance. If no land or water exists in the grid, return `-1`.</p>\n<p>The distance used in this problem is the Manhattan distance: the distance between two cells `(x0, y0)` and `(x1, y1)` is `|x0 - x1| + |y0 - y1|`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def as_far_from_land_as_possible(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "grid = [[1,0,1],[0,0,0],[1,0,1]]",
        "output": "2",
        "explanation": "The cell (1, 1) is as far as possible from all the land with distance 2."
      },
      {
        "input": "grid = [[1,0,0],[0,0,0],[0,0,0]]",
        "output": "4",
        "explanation": "The cell (2, 2) is as far as possible from all the land with distance 4."
      }
    ],
    "constraints": [
      "n == grid.length",
      "n == grid[i].length",
      "1 <= n <= 100",
      "grid[i][j] is 0 or 1"
    ]
  },
  {
    "questionId": 1165,
    "title": "Single-Row Keyboard",
    "titleSlug": "single-row-keyboard",
    "content": "<p>There is a special keyboard with all keys in a single row.</p>\n<p>Given a string `keyboard` of length `26` indicating the layout of the keyboard (indexed from `0` to `25`). Initially, your finger is at index `0`. To type a character, you have to move your finger to the index of the desired character. The time taken to move your finger from index `i` to index `j` is `|i - j|`.</p>\n<p>You want to type a string `word`. Write a function to calculate how much time it takes to type it with one finger.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def single_row_keyboard(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "keyboard = \"abcdefghijklmnopqrstuvwxyz\", word = \"cba\"",
        "output": "4",
        "explanation": "The index moves from 0 to 2 to write 'c' then to 1 to write 'b' then to 0 again to write 'a'."
      },
      {
        "input": "keyboard = \"pqrstuvwxyzabcdefghijklmno\", word = \"leetcode\"",
        "output": "73"
      }
    ],
    "constraints": [
      "keyboard.length == 26",
      "keyboard contains each English lowercase letter exactly once in some order.",
      "1 <= word.length <= 104",
      "word[i] is an English lowercase letter."
    ]
  },
  {
    "questionId": 1166,
    "title": "Design File System",
    "titleSlug": "design-file-system",
    "content": "<p>You are asked to design a file system that allows you to create new paths and associate them with different values.</p>\n<p>The format of a path is one or more concatenated strings of the form: `/` followed by one or more lowercase English letters. For example, \"`/leetcode\"` and \"`/leetcode/problems\"` are valid paths while an empty string `\"\"` and `\"/\"` are not.</p>\n<p>Implement the `FileSystem` class:\n`bool createPath(string path, int value)` Creates a new `path` and associates a `value` to it if possible and returns `true`. Returns `false` if the path already exists or its parent path doesn't exist.</p>\n<p>`int get(string path)` Returns the value associated with `path` or returns `-1` if the path doesn't exist.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def design_file_system(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "[\"FileSystem\",\"createPath\",\"get\"]",
        "output": "[null,true,1]",
        "explanation": "FileSystem fileSystem = new FileSystem();"
      },
      {
        "input": "[\"FileSystem\",\"createPath\",\"createPath\",\"get\",\"createPath\",\"get\"]",
        "output": "[null,true,true,2,false,-1]",
        "explanation": "FileSystem fileSystem = new FileSystem();"
      }
    ],
    "constraints": [
      "The number of calls to the two functions is less than or equal to 104 in total.",
      "2 <= path.length <= 100",
      "1 <= value <= 109"
    ]
  },
  {
    "questionId": 1167,
    "title": "Minimum Cost to Connect Sticks",
    "titleSlug": "minimum-cost-to-connect-sticks",
    "content": "<p>You have some number of sticks with positive integer lengths. These lengths are given as an array `sticks`, where `sticks[i]` is the length of the `ith` stick.</p>\n<p>You can connect any two sticks of lengths `x` and `y` into one stick by paying a cost of `x + y`. You must connect all the sticks until there is only one stick remaining.</p>\n<p>Return the minimum cost of connecting all the given sticks into one stick in this way.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_cost_to_connect_sticks(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "sticks = [2,4,3]",
        "output": "14",
        "explanation": "You start with sticks = [2,4,3]."
      },
      {
        "input": "sticks = [1,8,3,5]",
        "output": "30",
        "explanation": "You start with sticks = [1,8,3,5]."
      },
      {
        "input": "sticks = [5]",
        "output": "0",
        "explanation": "There is only one stick, so you don't need to do anything. The total cost is 0."
      }
    ],
    "constraints": [
      "1 <= sticks.length <= 104",
      "1 <= sticks[i] <= 104"
    ]
  },
  {
    "questionId": 1169,
    "title": "Invalid Transactions",
    "titleSlug": "invalid-transactions",
    "content": "<p>A transaction is possibly invalid if:\nthe amount exceeds `$1000`, or;\nif it occurs within (and including) `60` minutes of another transaction with the same name in a different city.</p>\n<p>You are given an array of strings `transaction` where `transactions[i]` consists of comma-separated values representing the name, time (in minutes), amount, and city of the transaction.</p>\n<p>Return a list of `transactions` that are possibly invalid. You may return the answer in any order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def invalid_transactions(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "transactions = [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]",
        "output": "[\"alice,20,800,mtv\",\"alice,50,100,beijing\"]",
        "explanation": "The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too."
      },
      {
        "input": "transactions = [\"alice,20,800,mtv\",\"alice,50,1200,mtv\"]",
        "output": "[\"alice,50,1200,mtv\"]"
      },
      {
        "input": "transactions = [\"alice,20,800,mtv\",\"bob,50,1200,mtv\"]",
        "output": "[\"bob,50,1200,mtv\"]"
      }
    ],
    "constraints": [
      "transactions.length <= 1000",
      "Each transactions[i] takes the form \"{name},{time},{amount},{city}\"",
      "Each {name} and {city} consist of lowercase English letters, and have lengths between 1 and 10.",
      "Each {time} consist of digits, and represent an integer between 0 and 1000.",
      "Each {amount} consist of digits, and represent an integer between 0 and 2000."
    ]
  },
  {
    "questionId": 1170,
    "title": "Compare Strings by Frequency of the Smallest Character",
    "titleSlug": "compare-strings-by-frequency-of-the-smallest-character",
    "content": "<p>Let the function `f(s)` be the frequency of the lexicographically smallest character in a non-empty string `s`. For example, if `s = \"dcce\"` then `f(s) = 2` because the lexicographically smallest character is `'c'`, which has a frequency of 2.</p>\n<p>You are given an array of strings `words` and another array of query strings `queries`. For each query `queries[i]`, count the number of words in `words` such that `f(queries[i])` < `f(W)` for each `W` in `words`.</p>\n<p>Return an integer array `answer`, where each `answer[i]` is the answer to the `ith` query.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def compare_strings_by_frequency_of_the_smallest_character(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "queries = [\"cbd\"], words = [\"zaaaz\"]",
        "output": "[1]",
        "explanation": "On the first query we have f(\"cbd\") = 1, f(\"zaaaz\") = 3 so f(\"cbd\") < f(\"zaaaz\")."
      },
      {
        "input": "queries = [\"bbb\",\"cc\"], words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]",
        "output": "[1,2]",
        "explanation": "On the first query only f(\"bbb\") < f(\"aaaa\"). On the second query both f(\"aaa\") and f(\"aaaa\") are both > f(\"cc\")."
      }
    ],
    "constraints": [
      "1 <= queries.length <= 2000",
      "1 <= words.length <= 2000",
      "1 <= queries[i].length, words[i].length <= 10",
      "queries[i][j], words[i][j] consist of lowercase English letters."
    ]
  },
  {
    "questionId": 1171,
    "title": "Remove Zero Sum Consecutive Nodes from Linked List",
    "titleSlug": "remove-zero-sum-consecutive-nodes-from-linked-list",
    "content": "<p>Given the `head` of a linked list, we repeatedly delete consecutive sequences of nodes that sum to `0` until there are no such sequences.</p>\n<p>After doing so, return the head of the final linked list.  You may return any such answer.</p>\n<p>(Note that in the examples below, all sequences are serializations of `ListNode` objects.)</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def remove_zero_sum_consecutive_nodes_from_linked_list(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [1,2,-3,3,1]",
        "output": "[3,1]"
      },
      {
        "input": "head = [1,2,3,-3,4]",
        "output": "[1,2,4]"
      },
      {
        "input": "head = [1,2,3,-3,-2]",
        "output": "[1]"
      }
    ],
    "constraints": [
      "The given linked list will contain between 1 and 1000 nodes.",
      "Each node in the linked list has -1000 <= node.val <= 1000."
    ]
  },
  {
    "questionId": 1175,
    "title": "Prime Arrangements",
    "titleSlug": "prime-arrangements",
    "content": "<p>Return the number of permutations of 1 to `n` so that prime numbers are at prime indices (1-indexed.)\n(Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.)\nSince the answer may be large, return the answer modulo `10^9 + 7`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def prime_arrangements(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 5",
        "output": "12",
        "explanation": "For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1."
      },
      {
        "input": "n = 100",
        "output": "682289015"
      }
    ],
    "constraints": [
      "1 <= n <= 100"
    ]
  },
  {
    "questionId": 1176,
    "title": "Diet Plan Performance",
    "titleSlug": "diet-plan-performance",
    "content": "<p>A dieter consumes `calories[i]` calories on the `i`-th day. \nGiven an integer `k`, for every consecutive sequence of `k` days (`calories[i], calories[i+1], ..., calories[i+k-1]` for all `0 <= i <= n-k`), they look at T, the total calories consumed during that sequence of `k` days (`calories[i] + calories[i+1] + ... + calories[i+k-1]`):\nIf `T < lower`, they performed poorly on their diet and lose 1 point; \nIf `T > upper`, they performed well on their diet and gain 1 point;\nOtherwise, they performed normally and there is no change in points.</p>\n<p>Initially, the dieter has zero points. Return the total number of points the dieter has after dieting for `calories.length` days.</p>\n<p>Note that the total points can be negative.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def diet_plan_performance(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "calories = [1,2,3,4,5], k = 1, lower = 3, upper = 3",
        "output": "0",
        "explanation": "Since k = 1, we consider each element of the array separately and compare it to lower and upper."
      },
      {
        "input": "calories = [3,2], k = 2, lower = 0, upper = 1",
        "output": "1",
        "explanation": "Since k = 2, we consider subarrays of length 2."
      },
      {
        "input": "calories = [6,5,0,0], k = 2, lower = 1, upper = 5",
        "output": "0",
        "explanation": "calories[0] + calories[1] > upper so 1 point is gained."
      }
    ],
    "constraints": [
      "1 <= k <= calories.length <= 10^5",
      "0 <= calories[i] <= 20000",
      "0 <= lower <= upper"
    ]
  },
  {
    "questionId": 1177,
    "title": "Can Make Palindrome from Substring",
    "titleSlug": "can-make-palindrome-from-substring",
    "content": "<p>Given a string `s`, we make queries on substrings of `s`.</p>\n<p>For each query `queries[i] = [left, right, k]`, we may rearrange the substring `s[left], ..., s[right]`, and then choose up to `k` of them to replace with any lowercase English letter. \nIf the substring is possible to be a palindrome string after the operations above, the result of the query is `true`. Otherwise, the result is `false`.</p>\n<p>Return an array `answer[]`, where `answer[i]` is the result of the `i`-th query `queries[i]`.</p>\n<p>Note that: Each letter is counted individually for replacement so if for example `s[left..right] = \"aaa\"`, and `k = 2`, we can only replace two of the letters.  (Also, note that the initial string `s` is never modified by any query.)</p>\n<p>Example :\nInput: s = \"abcda\", queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]\nOutput: [true,false,false,true,true]\nExplanation:\nqueries[0] : substring = \"d\", is palidrome.</p>\n<p>queries[1] : substring = \"bc\", is not palidrome.</p>\n<p>queries[2] : substring = \"abcd\", is not palidrome after replacing only 1 character.</p>\n<p>queries[3] : substring = \"abcd\", could be changed to \"abba\" which is palidrome. Also this can be changed to \"baab\" first rearrange it \"bacd\" then replace \"cd\" with \"ab\".</p>\n<p>queries[4] : substring = \"abcda\", could be changed to \"abcba\" which is palidrome.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def can_make_palindrome_from_substring(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= s.length, queries.length <= 10^5",
      "0 <= queries[i][0] <= queries[i][1] < s.length",
      "0 <= queries[i][2] <= s.length",
      "s only contains lowercase English letters."
    ]
  },
  {
    "questionId": 1180,
    "title": "Count Substrings with Only One Distinct Letter",
    "titleSlug": "count-substrings-with-only-one-distinct-letter",
    "content": "<p>Given a string `S`, return the number of substrings that have only one distinct letter.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_substrings_with_only_one_distinct_letter(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "S = \"aaaba\"",
        "output": "8",
        "explanation": "The substrings with one distinct letter are \"aaa\", \"aa\", \"a\", \"b\"."
      },
      {
        "input": "S = \"aaaaaaaaaa\"",
        "output": "55"
      }
    ],
    "constraints": [
      "1 <= S.length <= 1000",
      "S[i] consists of only lowercase English letters."
    ]
  },
  {
    "questionId": 1181,
    "title": "Before and After Puzzle",
    "titleSlug": "before-and-after-puzzle",
    "content": "<p>Given a list of `phrases`, generate a list of Before and After puzzles.</p>\n<p>A phrase is a string that consists of lowercase English letters and spaces only. No space appears in the start or the end of a phrase. There are no consecutive spaces in a phrase.</p>\n<p>Before and After puzzles are phrases that are formed by merging two phrases where the last word of the first phrase is the same as the first word of the second phrase.</p>\n<p>Return the Before and After puzzles that can be formed by every two phrases `phrases[i]` and `phrases[j]` where `i != j`. Note that the order of matching two phrases matters, we want to consider both orders.</p>\n<p>You should return a list of distinct strings sorted lexicographically.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def before_and_after_puzzle(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "phrases = [\"writing code\",\"code rocks\"]",
        "output": "[\"writing code rocks\"]"
      },
      {
        "input": "phrases = [\"mission statement\",",
        "output": "[\"a chip off the old block party\","
      },
      {
        "input": "phrases = [\"a\",\"b\",\"a\"]",
        "output": "[\"a\"]"
      }
    ],
    "constraints": [
      "1 <= phrases.length <= 100",
      "1 <= phrases[i].length <= 100"
    ]
  },
  {
    "questionId": 1182,
    "title": "Shortest Distance to Target Color",
    "titleSlug": "shortest-distance-to-target-color",
    "content": "<p>You are given an array `colors`, in which there are three colors: `1`, `2` and `3`.</p>\n<p>You are also given some queries. Each query consists of two integers `i` and `c`, return the shortest distance between the given index `i` and the target color `c`. If there is no solution return `-1`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def shortest_distance_to_target_color(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "colors = [1,1,2,1,3,2,2,3,3], queries = [[1,3],[2,2],[6,1]]",
        "output": "[3,0,3]",
        "explanation": "The nearest 3 from index 1 is at index 4 (3 steps away)."
      },
      {
        "input": "colors = [1,2], queries = [[0,3]]",
        "output": "[-1]",
        "explanation": "There is no 3 in the array."
      }
    ],
    "constraints": [
      "1 <= colors.length <= 5*10^4",
      "1 <= colors[i] <= 3",
      "1 <= queries.length <= 5*10^4",
      "queries[i].length == 2",
      "0 <= queries[i][0] < colors.length",
      "1 <= queries[i][1] <= 3"
    ]
  },
  {
    "questionId": 1184,
    "title": "Distance Between Bus Stops",
    "titleSlug": "distance-between-bus-stops",
    "content": "<p>A bus has `n` stops numbered from `0` to `n - 1` that form a circle. We know the distance between all pairs of neighboring stops where `distance[i]` is the distance between the stops number `i` and `(i + 1) % n`.</p>\n<p>The bus goes along both directions i.e. clockwise and counterclockwise.</p>\n<p>Return the shortest distance between the given `start` and `destination` stops.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def distance_between_bus_stops(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "distance = [1,2,3,4], start = 0, destination = 1",
        "output": "1",
        "explanation": "Distance between 0 and 1 is 1 or 9, minimum is 1."
      },
      {
        "input": "distance = [1,2,3,4], start = 0, destination = 2",
        "output": "3",
        "explanation": "Distance between 0 and 2 is 3 or 7, minimum is 3."
      },
      {
        "input": "distance = [1,2,3,4], start = 0, destination = 3",
        "output": "4",
        "explanation": "Distance between 0 and 3 is 6 or 4, minimum is 4."
      }
    ],
    "constraints": [
      "1 <= n <= 10^4",
      "distance.length == n",
      "0 <= start, destination < n",
      "0 <= distance[i] <= 10^4"
    ]
  },
  {
    "questionId": 1185,
    "title": "Day of the Week",
    "titleSlug": "day-of-the-week",
    "content": "<p>Given a date, return the corresponding day of the week for that date.</p>\n<p>The input is given as three integers representing the `day`, `month` and `year` respectively.</p>\n<p>Return the answer as one of the following values `{\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"}`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def day_of_the_week(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "day = 31, month = 8, year = 2019",
        "output": "\"Saturday\""
      },
      {
        "input": "day = 18, month = 7, year = 1999",
        "output": "\"Sunday\""
      },
      {
        "input": "day = 15, month = 8, year = 1993",
        "output": "\"Sunday\""
      }
    ],
    "constraints": [
      "The given dates are valid dates between the years 1971 and 2100."
    ]
  },
  {
    "questionId": 1186,
    "title": "Maximum Subarray Sum with One Deletion",
    "titleSlug": "maximum-subarray-sum-with-one-deletion",
    "content": "<p>Given an array of integers, return the maximum sum for a non-empty subarray (contiguous elements) with at most one element deletion. In other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the sum of the remaining elements is maximum possible.</p>\n<p>Note that the subarray needs to be non-empty after deleting one element.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_subarray_sum_with_one_deletion(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [1,-2,0,3]",
        "output": "4",
        "explanation": "Because we can choose [1, -2, 0, 3] and drop -2, thus the subarray [1, 0, 3] becomes the maximum value."
      },
      {
        "input": "arr = [1,-2,-2,3]",
        "output": "3",
        "explanation": "We just choose [3] and it's the maximum sum."
      },
      {
        "input": "arr = [-1,-1,-1,-1]",
        "output": "-1",
        "explanation": "The final subarray needs to be non-empty. You can't choose [-1] and delete -1 from it, then get an empty subarray to make the sum equals to 0."
      }
    ],
    "constraints": [
      "1 <= arr.length <= 105",
      "-104 <= arr[i] <= 104"
    ]
  },
  {
    "questionId": 1188,
    "title": "Design Bounded Blocking Queue",
    "titleSlug": "design-bounded-blocking-queue",
    "content": "<p>Implement a thread-safe bounded blocking queue that has the following methods:\n`BoundedBlockingQueue(int capacity)` The constructor initializes the queue with a maximum `capacity`.</p>\n<p>`void enqueue(int element)` Adds an `element` to the front of the queue. If the queue is full, the calling thread is blocked until the queue is no longer full.</p>\n<p>`int dequeue()` Returns the element at the rear of the queue and removes it. If the queue is empty, the calling thread is blocked until the queue is no longer empty.</p>\n<p>`int size()` Returns the number of elements currently in the queue.</p>\n<p>Your implementation will be tested using multiple threads at the same time. Each thread will either be a producer thread that only makes calls to the `enqueue` method or a consumer thread that only makes calls to the `dequeue` method. The `size` method will be called after every test case.</p>\n<p>Please do not use built-in implementations of bounded blocking queue as this will not be accepted in an interview.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def design_bounded_blocking_queue(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "1",
        "output": "[1,0,2,2]",
        "explanation": "Number of producer threads = 1"
      },
      {
        "input": "3",
        "output": "[1,0,2,1]",
        "explanation": "Number of producer threads = 3"
      }
    ],
    "constraints": [
      "1 <= Number of Prdoucers <= 8",
      "1 <= Number of Consumers <= 8",
      "1 <= size <= 30",
      "0 <= element <= 20",
      "The number of calls to enqueue is greater than or equal to the number of calls to dequeue.",
      "At most 40 calls will be made to enque, deque, and size."
    ]
  },
  {
    "questionId": 1189,
    "title": "Maximum Number of Balloons",
    "titleSlug": "maximum-number-of-balloons",
    "content": "<p>Given a string `text`, you want to use the characters of `text` to form as many instances of the word \"balloon\" as possible.</p>\n<p>You can use each character in `text` at most once. Return the maximum number of instances that can be formed.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_number_of_balloons(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "text = \"nlaebolko\"",
        "output": "1"
      },
      {
        "input": "text = \"loonbalxballpoon\"",
        "output": "2"
      },
      {
        "input": "text = \"leetcode\"",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= text.length <= 10^4",
      "text consists of lower case English letters only."
    ]
  },
  {
    "questionId": 1190,
    "title": "Reverse Substrings Between Each Pair of Parentheses",
    "titleSlug": "reverse-substrings-between-each-pair-of-parentheses",
    "content": "<p>You are given a string `s` that consists of lower case English letters and brackets. \nReverse the strings in each pair of matching parentheses, starting from the innermost one.</p>\n<p>Your result should not contain any brackets.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def reverse_substrings_between_each_pair_of_parentheses(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"(abcd)\"",
        "output": "\"dcba\""
      },
      {
        "input": "s = \"(u(love)i)\"",
        "output": "\"iloveu\"",
        "explanation": "The substring \"love\" is reversed first, then the whole string is reversed."
      },
      {
        "input": "s = \"(ed(et(oc))el)\"",
        "output": "\"leetcode\"",
        "explanation": "First, we reverse the substring \"oc\", then \"etco\", and finally, the whole string."
      },
      {
        "input": "s = \"a(bcdefghijkl(mno)p)q\"",
        "output": "\"apmnolkjihgfedcbq\""
      }
    ],
    "constraints": [
      "0 <= s.length <= 2000",
      "s only contains lower case English characters and parentheses.",
      "It's guaranteed that all parentheses are balanced."
    ]
  },
  {
    "questionId": 1191,
    "title": "K-Concatenation Maximum Sum",
    "titleSlug": "k-concatenation-maximum-sum",
    "content": "<p>Given an integer array `arr` and an integer `k`, modify the array by repeating it `k` times.</p>\n<p>For example, if `arr = [1, 2]` and `k = 3 `then the modified array will be `[1, 2, 1, 2, 1, 2]`.</p>\n<p>Return the maximum sub-array sum in the modified array. Note that the length of the sub-array can be `0` and its sum in that case is `0`.</p>\n<p>As the answer can be very large, return the answer modulo `109 + 7`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def k_concatenation_maximum_sum(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [1,2], k = 3",
        "output": "9"
      },
      {
        "input": "arr = [1,-2,1], k = 5",
        "output": "2"
      },
      {
        "input": "arr = [-1,-2], k = 7",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= arr.length <= 105",
      "1 <= k <= 105",
      "-104 <= arr[i] <= 104"
    ]
  },
  {
    "questionId": 1196,
    "title": "How Many Apples Can You Put into the Basket",
    "titleSlug": "how-many-apples-can-you-put-into-the-basket",
    "content": "<p>You have some apples, where `arr[i]` is the weight of the `i`-th apple.  You also have a basket that can carry up to `5000` units of weight.</p>\n<p>Return the maximum number of apples you can put in the basket.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def how_many_apples_can_you_put_into_the_basket(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [100,200,150,1000]",
        "output": "4",
        "explanation": "All 4 apples can be carried by the basket since their sum of weights is 1450."
      },
      {
        "input": "arr = [900,950,800,1000,700,800]",
        "output": "5",
        "explanation": "The sum of weights of the 6 apples exceeds 5000 so we choose any 5 of them."
      }
    ],
    "constraints": [
      "1 <= arr.length <= 10^3",
      "1 <= arr[i] <= 10^3"
    ]
  },
  {
    "questionId": 1197,
    "title": "Minimum Knight Moves",
    "titleSlug": "minimum-knight-moves",
    "content": "<p>In an infinite chess board with coordinates from `-infinity` to `+infinity`, you have a knight at square `[0, 0]`.</p>\n<p>A knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction.</p>\n<p>Return the minimum number of steps needed to move the knight to the square `[x, y]`.  It is guaranteed the answer exists.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_knight_moves(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "x = 2, y = 1",
        "output": "1",
        "explanation": "[0, 0] \u2192 [2, 1]"
      },
      {
        "input": "x = 5, y = 5",
        "output": "4",
        "explanation": "[0, 0] \u2192 [2, 1] \u2192 [4, 2] \u2192 [3, 4] \u2192 [5, 5]"
      }
    ],
    "constraints": [
      "|x| + |y| <= 300"
    ]
  },
  {
    "questionId": 1198,
    "title": "Find Smallest Common Element in All Rows",
    "titleSlug": "find-smallest-common-element-in-all-rows",
    "content": "<p>Given an `m x n` matrix `mat` where every row is sorted in strictly increasing order, return the smallest common element in all rows.</p>\n<p>If there is no common element, return `-1`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_smallest_common_element_in_all_rows(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "mat = [[1,2,3,4,5],[2,4,5,8,10],[3,5,7,9,11],[1,3,5,7,9]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,2,3],[2,3,4],[2,3,5]]",
        "output": "2"
      }
    ],
    "constraints": [
      "m == mat.length",
      "n == mat[i].length",
      "1 <= m, n <= 500",
      "1 <= mat[i][j] <= 104",
      "mat[i] is sorted in strictly increasing order."
    ]
  },
  {
    "questionId": 1200,
    "title": "Minimum Absolute Difference",
    "titleSlug": "minimum-absolute-difference",
    "content": "<p>Given an array of distinct integers `arr`, find all pairs of elements with the minimum absolute difference of any two elements. \nReturn a list of pairs in ascending order(with respect to pairs), each pair `[a, b]` follows\n`a, b` are from `arr`\n`a < b`\n`b - a` equals to the minimum absolute difference of any two elements in `arr`</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_absolute_difference(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [4,2,1,3]",
        "output": "[[1,2],[2,3],[3,4]]",
        "explanation": "The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order."
      },
      {
        "input": "arr = [1,3,6,10,15]",
        "output": "[[1,3]]"
      },
      {
        "input": "arr = [3,8,-10,23,19,-4,-14,27]",
        "output": "[[-14,-10],[19,23],[23,27]]"
      }
    ],
    "constraints": [
      "2 <= arr.length <= 10^5",
      "-10^6 <= arr[i] <= 10^6"
    ]
  },
  {
    "questionId": 1201,
    "title": "Ugly Number III",
    "titleSlug": "ugly-number-iii",
    "content": "<p>Given four integers `n`, `a`, `b`, and `c`, return the `nth` ugly number.</p>\n<p>Ugly numbers are positive integers that are divisible by `a`, `b`, or `c`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def ugly_number_iii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 3, a = 2, b = 3, c = 5",
        "output": "4",
        "explanation": "The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4."
      },
      {
        "input": "n = 4, a = 2, b = 3, c = 4",
        "output": "6",
        "explanation": "The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6."
      },
      {
        "input": "n = 5, a = 2, b = 11, c = 13",
        "output": "10",
        "explanation": "The ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... The 5th is 10."
      },
      {
        "input": "n = 1000000000, a = 2, b = 217983653, c = 336916467",
        "output": "1999999984"
      }
    ],
    "constraints": [
      "1 <= n, a, b, c <= 109",
      "1 <= a * b * c <= 1018",
      "It is guaranteed that the result will be in range [1, 2 * 109]."
    ]
  },
  {
    "questionId": 1202,
    "title": "Smallest String With Swaps",
    "titleSlug": "smallest-string-with-swaps",
    "content": "<p>You are given a string `s`, and an array of pairs of indices in the string `pairs` where `pairs[i] = [a, b]` indicates 2 indices(0-indexed) of the string.</p>\n<p>You can swap the characters at any pair of indices in the given `pairs` any number of times.</p>\n<p>Return the lexicographically smallest string that `s` can be changed to after using the swaps.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def smallest_string_with_swaps(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"dcab\", pairs = [[0,3],[1,2]]",
        "output": "\"bacd\""
      },
      {
        "input": "s = \"dcab\", pairs = [[0,3],[1,2],[0,2]]",
        "output": "\"abcd\""
      },
      {
        "input": "s = \"cba\", pairs = [[0,1],[1,2]]",
        "output": "\"abc\""
      }
    ],
    "constraints": [
      "1 <= s.length <= 10^5",
      "0 <= pairs.length <= 10^5",
      "0 <= pairs[i][0], pairs[i][1] < s.length",
      "s only contains lower case English letters."
    ]
  },
  {
    "questionId": 1207,
    "title": "Unique Number of Occurrences",
    "titleSlug": "unique-number-of-occurrences",
    "content": "<p>Given an array of integers `arr`, write a function that returns `true` if and only if the number of occurrences of each value in the array is unique.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def unique_number_of_occurrences(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [1,2,2,1,1,3]",
        "output": "true",
        "explanation": "The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences."
      },
      {
        "input": "arr = [1,2]",
        "output": "false"
      },
      {
        "input": "arr = [-3,0,1,-3,1,1,1,-3,10,0]",
        "output": "true"
      }
    ],
    "constraints": [
      "1 <= arr.length <= 1000",
      "-1000 <= arr[i] <= 1000"
    ]
  },
  {
    "questionId": 1208,
    "title": "Get Equal Substrings Within Budget",
    "titleSlug": "get-equal-substrings-within-budget",
    "content": "<p>You are given two strings `s` and `t` of the same length. You want to change `s` to `t`. Changing the `i`-th character of `s` to `i`-th character of `t` costs `|s[i] - t[i]|` that is, the absolute difference between the ASCII values of the characters.</p>\n<p>You are also given an integer `maxCost`.</p>\n<p>Return the maximum length of a substring of `s` that can be changed to be the same as the corresponding substring of `t`with a cost less than or equal to `maxCost`.</p>\n<p>If there is no substring from `s` that can be changed to its corresponding substring from `t`, return `0`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def get_equal_substrings_within_budget(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"abcd\", t = \"bcdf\", maxCost = 3",
        "output": "3",
        "explanation": "\"abc\" of s can change to \"bcd\". That costs 3, so the maximum length is 3."
      },
      {
        "input": "s = \"abcd\", t = \"cdef\", maxCost = 3",
        "output": "1",
        "explanation": "Each character in s costs 2 to change to charactor in `t, so the maximum length is 1.`"
      },
      {
        "input": "s = \"abcd\", t = \"acde\", maxCost = 0",
        "output": "1",
        "explanation": "You can't make any change, so the maximum length is 1."
      }
    ],
    "constraints": [
      "1 <= s.length, t.length <= 10^5",
      "0 <= maxCost <= 10^6",
      "s and t only contain lower case English letters."
    ]
  },
  {
    "questionId": 1209,
    "title": "Remove All Adjacent Duplicates in String II",
    "titleSlug": "remove-all-adjacent-duplicates-in-string-ii",
    "content": "<p>Given a string `s`, a k duplicate removal consists of choosing `k` adjacent and equal letters from `s` and removing them causing the left and the right side of the deleted substring to concatenate together.</p>\n<p>We repeatedly make `k` duplicate removals on `s` until we no longer can.</p>\n<p>Return the final string after all such duplicate removals have been made.</p>\n<p>It is guaranteed that the answer is unique.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def remove_all_adjacent_duplicates_in_string_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"abcd\", k = 2",
        "output": "\"abcd\"",
        "explanation": "There's nothing to delete."
      },
      {
        "input": "s = \"deeedbbcccbdaa\", k = 3",
        "output": "\"aa\"",
        "explanation": "First delete \"eee\" and \"ccc\", get \"ddbbbdaa\""
      },
      {
        "input": "s = \"pbbcggttciiippooaais\", k = 2",
        "output": "\"ps\""
      }
    ],
    "constraints": [
      "1 <= s.length <= 10^5",
      "2 <= k <= 10^4",
      "s only contains lower case English letters."
    ]
  },
  {
    "questionId": 1213,
    "title": "Intersection of Three Sorted Arrays",
    "titleSlug": "intersection-of-three-sorted-arrays",
    "content": "<p>Given three integer arrays `arr1`, `arr2` and `arr3` sorted in strictly increasing order, return a sorted array of only the integers that appeared in all three arrays.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def intersection_of_three_sorted_arrays(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]",
        "output": "[1,5]",
        "explanation": "Only 1 and 5 appeared in the three arrays."
      },
      {
        "input": "arr1 = [197,418,523,876,1356], arr2 = [501,880,1593,1710,1870], arr3 = [521,682,1337,1395,1764]",
        "output": "[]"
      }
    ],
    "constraints": [
      "1 <= arr1.length, arr2.length, arr3.length <= 1000",
      "1 <= arr1[i], arr2[i], arr3[i] <= 2000"
    ]
  },
  {
    "questionId": 1214,
    "title": "Two Sum BSTs",
    "titleSlug": "two-sum-bsts",
    "content": "<p>Given the roots of two binary search trees, `root1` and `root2`, return `true` if and only if there is a node in the first tree and a node in the second tree whose values sum up to a given integer `target`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def two_sum_bsts(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root1 = [2,1,4], root2 = [1,0,3], target = 5",
        "output": "true",
        "explanation": "2 and 3 sum up to 5."
      },
      {
        "input": "root1 = [0,-10,10], root2 = [5,1,7,0,2], target = 18",
        "output": "false"
      }
    ],
    "constraints": [
      "The number of nodes in each tree is in the range [1, 5000].",
      "-109 <= Node.val, target <= 109"
    ]
  },
  {
    "questionId": 1215,
    "title": "Stepping Numbers",
    "titleSlug": "stepping-numbers",
    "content": "<p>A Stepping Number is an integer such that all of its adjacent digits have an absolute difference of exactly `1`. For example, `321` is a Stepping Number while `421` is not.</p>\n<p>Given two integers `low` and `high`, find and return a sorted list of all the Stepping Numbers in the range `[low, high]` inclusive.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def stepping_numbers(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "low = 0, high = 21",
        "output": "[0,1,2,3,4,5,6,7,8,9,10,12,21]"
      }
    ],
    "constraints": [
      "0 <= low <= high <= 2 * 10^9"
    ]
  },
  {
    "questionId": 1217,
    "title": "Minimum Cost to Move Chips to The Same Position",
    "titleSlug": "minimum-cost-to-move-chips-to-the-same-position",
    "content": "<p>We have `n` chips, where the position of the `ith` chip is `position[i]`.</p>\n<p>We need to move all the chips to the same position. In one step, we can change the position of the `ith` chip from `position[i]` to:\n`position[i] + 2` or `position[i] - 2` with `cost = 0`.</p>\n<p>`position[i] + 1` or `position[i] - 1` with `cost = 1`.</p>\n<p>Return the minimum cost needed to move all the chips to the same position.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_cost_to_move_chips_to_the_same_position(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "position = [1,2,3]",
        "output": "1",
        "explanation": "First step: Move the chip at position 3 to position 1 with cost = 0."
      },
      {
        "input": "position = [2,2,2,3,3]",
        "output": "2",
        "explanation": "We can move the two chips at position  3 to position 2. Each move has cost = 1. The total cost = 2."
      },
      {
        "input": "position = [1,1000000000]",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= position.length <= 100",
      "1 <= position[i] <= 10^9"
    ]
  },
  {
    "questionId": 1218,
    "title": "Longest Arithmetic Subsequence of Given Difference",
    "titleSlug": "longest-arithmetic-subsequence-of-given-difference",
    "content": "<p>Given an integer array `arr` and an integer `difference`, return the length of the longest subsequence in `arr` which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals `difference`.</p>\n<p>A subsequence is a sequence that can be derived from `arr` by deleting some or no elements without changing the order of the remaining elements.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_arithmetic_subsequence_of_given_difference(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [1,2,3,4], difference = 1",
        "output": "4",
        "explanation": "The longest arithmetic subsequence is [1,2,3,4]."
      },
      {
        "input": "arr = [1,3,5,7], difference = 1",
        "output": "1",
        "explanation": "The longest arithmetic subsequence is any single element."
      },
      {
        "input": "arr = [1,5,7,8,5,3,4,2,1], difference = -2",
        "output": "4",
        "explanation": "The longest arithmetic subsequence is [7,5,3,1]."
      }
    ],
    "constraints": [
      "1 <= arr.length <= 105",
      "-104 <= arr[i], difference <= 104"
    ]
  },
  {
    "questionId": 1219,
    "title": "Path with Maximum Gold",
    "titleSlug": "path-with-maximum-gold",
    "content": "<p>In a gold mine `grid` of size `m x n`, each cell in this mine has an integer representing the amount of gold in that cell, `0` if it is empty.</p>\n<p>Return the maximum amount of gold you can collect under the conditions:\nEvery time you are located in a cell you will collect all the gold in that cell.</p>\n<p>From your position, you can walk one step to the left, right, up, or down.</p>\n<p>You can't visit the same cell more than once.</p>\n<p>Never visit a cell with `0` gold.</p>\n<p>You can start and stop collecting gold from any position in the grid that has some gold.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def path_with_maximum_gold(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "grid = [[0,6,0],[5,8,7],[0,9,0]]",
        "output": "24",
        "explanation": "[[0,6,0],"
      },
      {
        "input": "grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]",
        "output": "28",
        "explanation": "[[1,0,7],"
      }
    ],
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m, n <= 15",
      "0 <= grid[i][j] <= 100",
      "There are at most 25 cells containing gold."
    ]
  },
  {
    "questionId": 1221,
    "title": "Split a String in Balanced Strings",
    "titleSlug": "split-a-string-in-balanced-strings",
    "content": "<p>Balanced strings are those that have an equal quantity of `'L'` and `'R'` characters.</p>\n<p>Given a balanced string `s`, split it in the maximum amount of balanced strings.</p>\n<p>Return the maximum amount of split balanced strings.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def split_a_string_in_balanced_strings(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"RLRRLLRLRL\"",
        "output": "4",
        "explanation": "s can be split into \"RL\", \"RRLL\", \"RL\", \"RL\", each substring contains same number of 'L' and 'R'."
      },
      {
        "input": "s = \"RLLLLRRRLR\"",
        "output": "3",
        "explanation": "s can be split into \"RL\", \"LLLRRR\", \"LR\", each substring contains same number of 'L' and 'R'."
      },
      {
        "input": "s = \"LLLLRRRR\"",
        "output": "1",
        "explanation": "s can be split into \"LLLLRRRR\"."
      },
      {
        "input": "s = \"RLRRRLLRLL\"",
        "output": "2",
        "explanation": "s can be split into \"RL\", \"RRRLLRLL\", since each substring contains an equal number of 'L' and 'R'"
      }
    ],
    "constraints": [
      "1 <= s.length <= 1000",
      "s[i] is either 'L' or 'R'.",
      "s is a balanced string."
    ]
  },
  {
    "questionId": 1222,
    "title": "Queens That Can Attack the King",
    "titleSlug": "queens-that-can-attack-the-king",
    "content": "<p>On an 8x8 chessboard, there can be multiple Black Queens and one White King.</p>\n<p>Given an array of integer coordinates `queens` that represents the positions of the Black Queens, and a pair of coordinates `king` that represent the position of the White King, return the coordinates of all the queens (in any order) that can attack the King.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def queens_that_can_attack_the_king(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]",
        "output": "[[0,1],[1,0],[3,3]]",
        "explanation": "The queen at [0,1] can attack the king cause they're in the same row."
      },
      {
        "input": "queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]",
        "output": "[[2,2],[3,4],[4,4]]"
      },
      {
        "input": "queens = [[5,6],[7,7],[2,1],[0,7],[1,6],[5,1],[3,7],[0,3],[4,0],[1,2],[6,3],[5,0],[0,4],[2,2],[1,1],[6,4],[5,4],[0,0],[2,6],[4,5],[5,2],[1,4],[7,5],[2,3],[0,5],[4,2],[1,0],[2,7],[0,1],[4,6],[6,1],[0,6],[4,3],[1,7]], king = [3,4]",
        "output": "[[2,3],[1,4],[1,6],[3,7],[4,3],[5,4],[4,5]]"
      }
    ],
    "constraints": [
      "1 <= queens.length <= 63",
      "queens[i].length == 2",
      "0 <= queens[i][j] < 8",
      "king.length == 2",
      "0 <= king[0], king[1] < 8",
      "At most one piece is allowed in a cell."
    ]
  },
  {
    "questionId": 1226,
    "title": "The Dining Philosophers",
    "titleSlug": "the-dining-philosophers",
    "content": "<p>Five silent philosophers sit at a round table with bowls of spaghetti. Forks are placed between each pair of adjacent philosophers.</p>\n<p>Each philosopher must alternately think and eat. However, a philosopher can only eat spaghetti when they have both left and right forks. Each fork can be held by only one philosopher and so a philosopher can use the fork only if it is not being used by another philosopher. After an individual philosopher finishes eating, they need to put down both forks so that the forks become available to others. A philosopher can take the fork on their right or the one on their left as they become available, but cannot start eating before getting both forks.</p>\n<p>Eating is not limited by the remaining amounts of spaghetti or stomach space; an infinite supply and an infinite demand are assumed.</p>\n<p>Design a discipline of behaviour (a concurrent algorithm) such that no philosopher will starve; i.e., each can forever continue to alternate between eating and thinking, assuming that no philosopher can know when others may want to eat or think.</p>\n<p>The problem statement and the image above are taken from wikipedia.org\nThe philosophers' ids are numbered from 0 to 4 in a clockwise order. Implement the function `void wantsToEat(philosopher, pickLeftFork, pickRightFork, eat, putLeftFork, putRightFork)` where:\n`philosopher` is the id of the philosopher who wants to eat.</p>\n<p>`pickLeftFork` and `pickRightFork` are functions you can call to pick the corresponding forks of that philosopher.</p>\n<p>`eat` is a function you can call to let the philosopher eat once he has picked both forks.</p>\n<p>`putLeftFork` and `putRightFork` are functions you can call to put down the corresponding forks of that philosopher.</p>\n<p>The philosophers are assumed to be thinking as long as they are not asking to eat (the function is not being called with their number).</p>\n<p>Five threads, each representing a philosopher, will simultaneously use one object of your class to simulate the process. The function may be called for the same philosopher more than once, even before the last call ends.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def the_dining_philosophers(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 1",
        "output": "[[4,2,1],[4,1,1],[0,1,1],[2,2,1],[2,1,1],[2,0,3],[2,1,2],[2,2,2],[4,0,3],[4,1,2],[0,2,1],[4,2,2],[3,2,1],[3,1,1],[0,0,3],[0,1,2],[0,2,2],[1,2,1],[1,1,1],[3,0,3],[3,1,2],[3,2,2],[1,0,3],[1,1,2],[1,2,2]]",
        "explanation": "n is the number of times each philosopher will call the function."
      }
    ],
    "constraints": [
      "1 <= n <= 60"
    ]
  },
  {
    "questionId": 1227,
    "title": "Airplane Seat Assignment Probability",
    "titleSlug": "airplane-seat-assignment-probability",
    "content": "<p>n` passengers board an airplane with exactly n` seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of passengers will:\nTake their own seat if it is still available, \nPick other seats randomly when they find their seat occupied \nWhat is the probability that the n-th person can get his own seat?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def airplane_seat_assignment_probability(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 1",
        "output": "1.00000",
        "explanation": "The first person can only get the first seat."
      },
      {
        "input": "n = 2",
        "output": "0.50000",
        "explanation": "The second person has a probability of 0.5 to get the second seat (when first person gets the first seat)."
      }
    ],
    "constraints": [
      "1 <= n <= 10^5"
    ]
  },
  {
    "questionId": 1228,
    "title": "Missing Number In Arithmetic Progression",
    "titleSlug": "missing-number-in-arithmetic-progression",
    "content": "<p>In some array `arr`, the values were in arithmetic progression: the values `arr[i+1] - arr[i]` are all equal for every `0 <= i < arr.length - 1`.</p>\n<p>Then, a value from `arr` was removed that was not the first or last value in the array.</p>\n<p>Return the removed value.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def missing_number_in_arithmetic_progression(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [5,7,11,13]",
        "output": "9",
        "explanation": "The previous array was [5,7,9,11,13]."
      },
      {
        "input": "arr = [15,13,12]",
        "output": "14",
        "explanation": "The previous array was [15,14,13,12]."
      }
    ],
    "constraints": [
      "3 <= arr.length <= 1000",
      "0 <= arr[i] <= 10^5"
    ]
  },
  {
    "questionId": 1229,
    "title": "Meeting Scheduler",
    "titleSlug": "meeting-scheduler",
    "content": "<p>Given the availability time slots arrays `slots1` and `slots2` of two people and a meeting duration `duration`, return the earliest time slot that works for both of them and is of duration `duration`.</p>\n<p>If there is no common time slot that satisfies the requirements, return an empty array.</p>\n<p>The format of a time slot is an array of two elements `[start, end]` representing an inclusive time range from `start` to `end`.</p>\n<p>It is guaranteed that no two availability slots of the same person intersect with each other. That is, for any two time slots `[start1, end1]` and `[start2, end2]` of the same person, either `start1 > end2` or `start2 > end1`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def meeting_scheduler(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 8",
        "output": "[60,68]"
      },
      {
        "input": "slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 12",
        "output": "[]"
      }
    ],
    "constraints": [
      "1 <= slots1.length, slots2.length <= 104",
      "slots1[i].length, slots2[i].length == 2",
      "slots1[i][0] < slots1[i][1]",
      "slots2[i][0] < slots2[i][1]",
      "0 <= slots1[i][j], slots2[i][j] <= 109",
      "1 <= duration <= 106"
    ]
  },
  {
    "questionId": 1230,
    "title": "Toss Strange Coins",
    "titleSlug": "toss-strange-coins",
    "content": "<p>You have some coins.  The `i`-th coin has a probability `prob[i]` of facing heads when tossed.</p>\n<p>Return the probability that the number of coins facing heads equals `target` if you toss every coin exactly once.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def toss_strange_coins(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "prob = [0.4], target = 1",
        "output": "0.40000"
      },
      {
        "input": "prob = [0.5,0.5,0.5,0.5,0.5], target = 0",
        "output": "0.03125"
      }
    ],
    "constraints": [
      "1 <= prob.length <= 1000",
      "0 <= prob[i] <= 1",
      "0 <= target <= prob.length",
      "Answers will be accepted as correct if they are within 10^-5 of the correct answer."
    ]
  },
  {
    "questionId": 1232,
    "title": "Check If It Is a Straight Line",
    "titleSlug": "check-if-it-is-a-straight-line",
    "content": "<p>You are given an array `coordinates`, `coordinates[i] = [x, y]`, where `[x, y]` represents the coordinate of a point. Check if these points make a straight line in the XY plane.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def check_if_it_is_a_straight_line(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
        "output": "true"
      },
      {
        "input": "coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]",
        "output": "false"
      }
    ],
    "constraints": [
      "2 <= coordinates.length <= 1000",
      "coordinates[i].length == 2",
      "-10^4 <= coordinates[i][0], coordinates[i][1] <= 10^4",
      "coordinates contains no duplicate point."
    ]
  },
  {
    "questionId": 1233,
    "title": "Remove Sub-Folders from the Filesystem",
    "titleSlug": "remove-sub-folders-from-the-filesystem",
    "content": "<p>Given a list of folders, remove all sub-folders in those folders and return in any order the folders after removing.</p>\n<p>If a `folder[i]` is located within another `folder[j]`, it is called a sub-folder of it.</p>\n<p>The format of a path is one or more concatenated strings of the form: `/` followed by one or more lowercase English letters. For example, `/leetcode` and `/leetcode/problems` are valid paths while an empty string and `/` are not.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def remove_sub_folders_from_the_filesystem(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "folder = [\"/a\",\"/a/b\",\"/c/d\",\"/c/d/e\",\"/c/f\"]",
        "output": "[\"/a\",\"/c/d\",\"/c/f\"]",
        "explanation": "Folders \"/a/b/\" is a subfolder of \"/a\" and \"/c/d/e\" is inside of folder \"/c/d\" in our filesystem."
      },
      {
        "input": "folder = [\"/a\",\"/a/b/c\",\"/a/b/d\"]",
        "output": "[\"/a\"]",
        "explanation": "Folders \"/a/b/c\" and \"/a/b/d/\" will be removed because they are subfolders of \"/a\"."
      },
      {
        "input": "folder = [\"/a/b/c\",\"/a/b/ca\",\"/a/b/d\"]",
        "output": "[\"/a/b/c\",\"/a/b/ca\",\"/a/b/d\"]"
      }
    ],
    "constraints": [
      "1 <= folder.length <= 4 * 10^4",
      "2 <= folder[i].length <= 100",
      "folder[i] contains only lowercase letters and '/'",
      "folder[i] always starts with character '/'",
      "Each folder name is unique."
    ]
  },
  {
    "questionId": 1234,
    "title": "Replace the Substring for Balanced String",
    "titleSlug": "replace-the-substring-for-balanced-string",
    "content": "<p>You are given a string containing only 4 kinds of characters `'Q',` `'W', 'E'` and `'R'`.</p>\n<p>A string is said to be balanced if each of its characters appears `n/4` times where `n` is the length of the string.</p>\n<p>Return the minimum length of the substring that can be replaced with any other string of the same length to make the original string `s` balanced.</p>\n<p>Return 0 if the string is already balanced.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def replace_the_substring_for_balanced_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"QWER\"",
        "output": "0",
        "explanation": "s is already balanced."
      },
      {
        "input": "s = \"QQWE\"",
        "output": "1",
        "explanation": "We need to replace a 'Q' to 'R', so that \"RQWE\" (or \"QRWE\") is balanced."
      },
      {
        "input": "s = \"QQQW\"",
        "output": "2",
        "explanation": "We can replace the first \"QQ\" to \"ER\"."
      },
      {
        "input": "s = \"QQQQ\"",
        "output": "3",
        "explanation": "We can replace the last 3 'Q' to make s = \"QWER\"."
      }
    ],
    "constraints": [
      "1 <= s.length <= 10^5",
      "s.length is a multiple of 4",
      "s contains only 'Q', 'W', 'E' and 'R'."
    ]
  },
  {
    "questionId": 1236,
    "title": "Web Crawler",
    "titleSlug": "web-crawler",
    "content": "<p>Given a url `startUrl` and an interface `HtmlParser`, implement a web crawler to crawl all links that are under the same hostname as `startUrl`. \nReturn all urls obtained by your web crawler in any order.</p>\n<p>Your crawler should:\nStart from the page: `startUrl`\nCall `HtmlParser.getUrls(url)` to get all urls from a webpage of given url.</p>\n<p>Do not crawl the same link twice.</p>\n<p>Explore only the links that are under the same hostname as `startUrl`.</p>\n<p>As shown in the example url above, the hostname is `example.org`. For simplicity sake, you may assume all urls use http protocol without any port specified. For example, the urls `http://leetcode.com/problems` and `http://leetcode.com/contest` are under the same hostname, while urls `http://example.org/test` and `http://example.com/abc` are not under the same hostname.</p>\n<p>The `HtmlParser` interface is defined as such: \ninterface HtmlParser {\n  // Return a list of all urls from a webpage of given url.</p>\n<p>public List<String> getUrls(String url);\n}\nBelow are two examples explaining the functionality of the problem, for custom testing purposes you'll have three variables urls`, edges` and startUrl`. Notice that you will only have access to startUrl` in your code, while urls` and edges` are not directly accessible to you in code.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def web_crawler(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "urls = [",
        "output": "["
      },
      {
        "input": "urls = [",
        "output": "[\"http://news.google.com\"]",
        "explanation": "The startUrl links to all other pages that do not share the same hostname."
      }
    ],
    "constraints": [
      "1 <= urls.length <= 1000",
      "1 <= urls[i].length <= 300",
      "startUrl is one of the urls.",
      "Hostname label must be from 1 to 63 characters long, including the dots, may contain only the ASCII letters from 'a' to 'z', digits  from '0' to '9' and the hyphen-minus character ('-').",
      "The hostname may not start or end with the hyphen-minus character ('-').",
      "See:  https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_hostnames",
      "You may assume there're no duplicates in url library."
    ]
  },
  {
    "questionId": 1237,
    "title": "Find Positive Integer Solution for a Given Equation",
    "titleSlug": "find-positive-integer-solution-for-a-given-equation",
    "content": "<p>Given a callable function `f(x, y)` with a hidden formula and a value `z`, reverse engineer the formula and return all positive integer pairs `x` and `y` where `f(x,y) == z`. You may return the pairs in any order.</p>\n<p>While the exact formula is hidden, the function is monotonically increasing, i.e.:\n`f(x, y) < f(x + 1, y)`\n`f(x, y) < f(x, y + 1)`\nThe function interface is defined like this:\ninterface CustomFunction {\npublic:\n  // Returns some positive integer f(x, y) for two positive integers x and y based on a formula.</p>\n<p>int f(int x, int y);\n};\nWe will judge your solution as follows:\nThe judge has a list of `9` hidden implementations of `CustomFunction`, along with a way to generate an answer key of all valid pairs for a specific `z`.</p>\n<p>The judge will receive two inputs: a `function_id` (to determine which implementation to test your code with), and the target `z`.</p>\n<p>The judge will call your `findSolution` and compare your results with the answer key.</p>\n<p>If your results match the answer key, your solution will be `Accepted`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_positive_integer_solution_for_a_given_equation(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "function_id = 1, z = 5",
        "output": "[[1,4],[2,3],[3,2],[4,1]]",
        "explanation": "The hidden formula for function_id = 1 is f(x, y) = x + y."
      },
      {
        "input": "function_id = 2, z = 5",
        "output": "[[1,5],[5,1]]",
        "explanation": "The hidden formula for function_id = 2 is f(x, y) = x * y."
      }
    ],
    "constraints": [
      "1 <= function_id <= 9",
      "1 <= z <= 100",
      "It is guaranteed that the solutions of f(x, y) == z will be in the range 1 <= x, y <= 1000.",
      "It is also guaranteed that f(x, y) will fit in 32 bit signed integer if 1 <= x, y <= 1000."
    ]
  },
  {
    "questionId": 1238,
    "title": "Circular Permutation in Binary Representation",
    "titleSlug": "circular-permutation-in-binary-representation",
    "content": "<p>Given 2 integers `n` and `start`. Your task is return any permutation `p` of `(0,1,2.....,2^n -1) `such that :\n`p[0] = start`\n`p[i]` and `p[i+1]` differ by only one bit in their binary representation.</p>\n<p>`p[0]` and `p[2^n -1]` must also differ by only one bit in their binary representation.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def circular_permutation_in_binary_representation(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 2, start = 3",
        "output": "[3,2,0,1]",
        "explanation": "The binary representation of the permutation is (11,10,00,01)."
      },
      {
        "input": "n = 3, start = 2",
        "output": "[2,6,7,5,4,0,1,3]",
        "explanation": "The binary representation of the permutation is (010,110,111,101,100,000,001,011)."
      }
    ],
    "constraints": [
      "1 <= n <= 16",
      "0 <= start < 2 ^ n"
    ]
  },
  {
    "questionId": 1239,
    "title": "Maximum Length of a Concatenated String with Unique Characters",
    "titleSlug": "maximum-length-of-a-concatenated-string-with-unique-characters",
    "content": "<p>Given an array of strings `arr`. String `s` is a concatenation of a sub-sequence of `arr` which have unique characters.</p>\n<p>Return the maximum possible length of `s`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_length_of_a_concatenated_string_with_unique_characters(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [\"un\",\"iq\",\"ue\"]",
        "output": "4",
        "explanation": "All possible concatenations are \"\",\"un\",\"iq\",\"ue\",\"uniq\" and \"ique\"."
      },
      {
        "input": "arr = [\"cha\",\"r\",\"act\",\"ers\"]",
        "output": "6",
        "explanation": "Possible solutions are \"chaers\" and \"acters\"."
      },
      {
        "input": "arr = [\"abcdefghijklmnopqrstuvwxyz\"]",
        "output": "26"
      }
    ],
    "constraints": [
      "1 <= arr.length <= 16",
      "1 <= arr[i].length <= 26",
      "arr[i] contains only lower case English letters."
    ]
  },
  {
    "questionId": 1242,
    "title": "Web Crawler Multithreaded",
    "titleSlug": "web-crawler-multithreaded",
    "content": "<p>Given a url `startUrl` and an interface `HtmlParser`, implement a Multi-threaded web crawler to crawl all links that are under the same hostname as `startUrl`. \nReturn all urls obtained by your web crawler in any order.</p>\n<p>Your crawler should:\nStart from the page: `startUrl`\nCall `HtmlParser.getUrls(url)` to get all urls from a webpage of given url.</p>\n<p>Do not crawl the same link twice.</p>\n<p>Explore only the links that are under the same hostname as `startUrl`.</p>\n<p>As shown in the example url above, the hostname is `example.org`. For simplicity sake, you may assume all urls use http protocol without any port specified. For example, the urls `http://leetcode.com/problems` and `http://leetcode.com/contest` are under the same hostname, while urls `http://example.org/test` and `http://example.com/abc` are not under the same hostname.</p>\n<p>The `HtmlParser` interface is defined as such: \ninterface HtmlParser {\n  // Return a list of all urls from a webpage of given url.</p>\n<p>// This is a blocking call, that means it will do HTTP request and return when this request is finished.</p>\n<p>public List<String> getUrls(String url);\n}\nNote that `getUrls(String url)` simulates performing a HTTP request. You can treat it as a blocking function call which waits for a HTTP request to finish. It is guaranteed that `getUrls(String url)` will return the urls within 15ms.  Single-threaded solutions will exceed the time limit so, can your multi-threaded web crawler do better?\nBelow are two examples explaining the functionality of the problem, for custom testing purposes you'll have three variables urls`, edges` and startUrl`. Notice that you will only have access to startUrl` in your code, while urls` and edges` are not directly accessible to you in code.</p>\n<p>Follow up:\nAssume we have 10,000 nodes and 1 billion URLs to crawl. We will deploy the same software onto each node. The software can know about all the nodes. We have to minimize communication between machines and make sure each node does equal amount of work. How would your web crawler design change?\nWhat if one node fails or does not work?\nHow do you know when the crawler is done?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def web_crawler_multithreaded(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "urls = [",
        "output": "["
      },
      {
        "input": "urls = [",
        "output": "[\"http://news.google.com\"]",
        "explanation": "The startUrl links to all other pages that do not share the same hostname."
      }
    ],
    "constraints": [
      "1 <= urls.length <= 1000",
      "1 <= urls[i].length <= 300",
      "startUrl is one of the urls.",
      "Hostname label must be from 1 to 63 characters long, including the dots, may contain only the ASCII letters from 'a' to 'z', digits from '0' to '9' and the hyphen-minus character ('-').",
      "The hostname may not start or end with the hyphen-minus character ('-').",
      "See:  https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_hostnames",
      "You may assume there're no duplicates in url library."
    ]
  },
  {
    "questionId": 1243,
    "title": "Array Transformation",
    "titleSlug": "array-transformation",
    "content": "<p>Given an initial array `arr`, every day you produce a new array using the array of the previous day.</p>\n<p>On the `i`-th day, you do the following operations on the array of day `i-1` to produce the array of day `i`:\nIf an element is smaller than both its left neighbor and its right neighbor, then this element is incremented.</p>\n<p>If an element is bigger than both its left neighbor and its right neighbor, then this element is decremented.</p>\n<p>The first and last elements never change.</p>\n<p>After some days, the array does not change. Return that final array.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def array_transformation(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [6,2,3,4]",
        "output": "[6,3,3,4]",
        "explanation": "On the first day, the array is changed from [6,2,3,4] to [6,3,3,4]."
      },
      {
        "input": "arr = [1,6,3,4,3,5]",
        "output": "[1,4,4,4,4,5]",
        "explanation": "On the first day, the array is changed from [1,6,3,4,3,5] to [1,5,4,3,4,5]."
      }
    ],
    "constraints": [
      "3 <= arr.length <= 100",
      "1 <= arr[i] <= 100"
    ]
  },
  {
    "questionId": 1244,
    "title": "Design A Leaderboard",
    "titleSlug": "design-a-leaderboard",
    "content": "<p>Design a Leaderboard class, which has 3 functions:\n`addScore(playerId, score)`: Update the leaderboard by adding `score` to the given player's score. If there is no player with such id in the leaderboard, add him to the leaderboard with the given `score`.</p>\n<p>`top(K)`: Return the score sum of the top `K` players.</p>\n<p>`reset(playerId)`: Reset the score of the player with the given id to 0 (in other words erase it from the leaderboard). It is guaranteed that the player was added to the leaderboard before calling this function.</p>\n<p>Initially, the leaderboard is empty.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def design_a_leaderboard(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "[\"Leaderboard\",\"addScore\",\"addScore\",\"addScore\",\"addScore\",\"addScore\",\"top\",\"reset\",\"reset\",\"addScore\",\"top\"]",
        "output": "[null,null,null,null,null,null,73,null,null,null,141]",
        "explanation": "Leaderboard leaderboard = new Leaderboard ();"
      }
    ],
    "constraints": [
      "1 <= playerId, K <= 10000",
      "It's guaranteed that K is less than or equal to the current number of players.",
      "1 <= score <= 100",
      "There will be at most 1000 function calls."
    ]
  },
  {
    "questionId": 1245,
    "title": "Tree Diameter",
    "titleSlug": "tree-diameter",
    "content": "<p>Given an undirected tree, return its diameter: the number of edges in a longest path in that tree.</p>\n<p>The tree is given as an array of `edges` where `edges[i] = [u, v]` is a bidirectional edge between nodes `u` and `v`.  Each node has labels in the set `{0, 1, ..., edges.length}`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def tree_diameter(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "edges = [[0,1],[0,2]]",
        "output": "2",
        "explanation": "A longest path of the tree is the path 1 - 0 - 2."
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[1,4],[4,5]]",
        "output": "4",
        "explanation": "A longest path of the tree is the path 3 - 2 - 1 - 4 - 5."
      }
    ],
    "constraints": [
      "0 <= edges.length < 10^4",
      "edges[i][0] != edges[i][1]",
      "0 <= edges[i][j] <= edges.length",
      "The given edges form an undirected tree."
    ]
  },
  {
    "questionId": 1247,
    "title": "Minimum Swaps to Make Strings Equal",
    "titleSlug": "minimum-swaps-to-make-strings-equal",
    "content": "<p>You are given two strings `s1` and `s2` of equal length consisting of letters `\"x\"` and `\"y\"` only. Your task is to make these two strings equal to each other. You can swap any two characters that belong to different strings, which means: swap `s1[i]` and `s2[j]`.</p>\n<p>Return the minimum number of swaps required to make `s1` and `s2` equal, or return `-1` if it is impossible to do so.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_swaps_to_make_strings_equal(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s1 = \"xx\", s2 = \"yy\"",
        "output": "1",
        "explanation": "Swap s1[0] and s2[1], s1 = \"yx\", s2 = \"yx\"."
      },
      {
        "input": "s1 = \"xy\", s2 = \"yx\"",
        "output": "2",
        "explanation": "Swap s1[0] and s2[0], s1 = \"yy\", s2 = \"xx\"."
      },
      {
        "input": "s1 = \"xx\", s2 = \"xy\"",
        "output": "-1"
      },
      {
        "input": "s1 = \"xxyyxyxyxx\", s2 = \"xyyxyxxxyx\"",
        "output": "4"
      }
    ],
    "constraints": [
      "1 <= s1.length, s2.length <= 1000",
      "s1, s2 only contain 'x' or 'y'."
    ]
  },
  {
    "questionId": 1248,
    "title": "Count Number of Nice Subarrays",
    "titleSlug": "count-number-of-nice-subarrays",
    "content": "<p>Given an array of integers `nums` and an integer `k`. A continuous subarray is called nice if there are `k` odd numbers on it.</p>\n<p>Return the number of nice sub-arrays.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_number_of_nice_subarrays(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,1,2,1,1], k = 3",
        "output": "2",
        "explanation": "The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1]."
      },
      {
        "input": "nums = [2,4,6], k = 1",
        "output": "0",
        "explanation": "There is no odd numbers in the array."
      },
      {
        "input": "nums = [2,2,2,1,2,2,1,2,2,2], k = 2",
        "output": "16"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 50000",
      "1 <= nums[i] <= 10^5",
      "1 <= k <= nums.length"
    ]
  },
  {
    "questionId": 1249,
    "title": "Minimum Remove to Make Valid Parentheses",
    "titleSlug": "minimum-remove-to-make-valid-parentheses",
    "content": "<p>Given a string s of `'('` , `')'` and lowercase English characters. \nYour task is to remove the minimum number of parentheses ( `'('` or `')'`, in any positions ) so that the resulting parentheses string is valid and return any valid string.</p>\n<p>Formally, a parentheses string is valid if and only if:\nIt is the empty string, contains only lowercase characters, or\nIt can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid strings, or\nIt can be written as `(A)`, where `A` is a valid string.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_remove_to_make_valid_parentheses(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"lee(t(c)o)de)\"",
        "output": "\"lee(t(c)o)de\"",
        "explanation": "\"lee(t(co)de)\" , \"lee(t(c)ode)\" would also be accepted."
      },
      {
        "input": "s = \"a)b(c)d\"",
        "output": "\"ab(c)d\""
      },
      {
        "input": "s = \"))((\"",
        "output": "\"\"",
        "explanation": "An empty string is also valid."
      },
      {
        "input": "s = \"(a(b(c)d)\"",
        "output": "\"a(b(c)d)\""
      }
    ],
    "constraints": [
      "1 <= s.length <= 10^5",
      "s[i] is one of  '(' , ')' and lowercase English letters."
    ]
  },
  {
    "questionId": 1252,
    "title": "Cells with Odd Values in a Matrix",
    "titleSlug": "cells-with-odd-values-in-a-matrix",
    "content": "<p>There is an `m x n` matrix that is initialized to all `0`'s. There is also a 2D array `indices` where each `indices[i] = [ri, ci]` represents a 0-indexed location to perform some increment operations on the matrix.</p>\n<p>For each location `indices[i]`, do both of the following:\nIncrement all the cells on row `ri`.</p>\n<p>Increment all the cells on column `ci`.</p>\n<p>Given `m`, `n`, and `indices`, return the number of odd-valued cells in the matrix after applying the increment to all locations in `indices`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def cells_with_odd_values_in_a_matrix(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "m = 2, n = 3, indices = [[0,1],[1,1]]",
        "output": "6",
        "explanation": "Initial matrix = [[0,0,0],[0,0,0]]."
      },
      {
        "input": "m = 2, n = 2, indices = [[1,1],[0,0]]",
        "output": "0",
        "explanation": "Final matrix = [[2,2],[2,2]]. There are no odd numbers in the final matrix."
      }
    ],
    "constraints": [
      "1 <= m, n <= 50",
      "1 <= indices.length <= 100",
      "0 <= ri < m",
      "0 <= ci < n",
      "Follow up: Could you solve this in O(n + m + indices.length) time with only O(n + m) extra space?"
    ]
  },
  {
    "questionId": 1253,
    "title": "Reconstruct a 2-Row Binary Matrix",
    "titleSlug": "reconstruct-a-2-row-binary-matrix",
    "content": "<p>Given the following details of a matrix with `n` columns and `2` rows :\nThe matrix is a binary matrix, which means each element in the matrix can be `0` or `1`.</p>\n<p>The sum of elements of the 0-th(upper) row is given as `upper`.</p>\n<p>The sum of elements of the 1-st(lower) row is given as `lower`.</p>\n<p>The sum of elements in the i-th column(0-indexed) is `colsum[i]`, where `colsum` is given as an integer array with length `n`.</p>\n<p>Your task is to reconstruct the matrix with `upper`, `lower` and `colsum`.</p>\n<p>Return it as a 2-D integer array.</p>\n<p>If there are more than one valid solution, any of them will be accepted.</p>\n<p>If no valid solution exists, return an empty 2-D array.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def reconstruct_a_2_row_binary_matrix(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "upper = 2, lower = 1, colsum = [1,1,1]",
        "output": "[[1,1,0],[0,0,1]]",
        "explanation": "[[1,0,1],[0,1,0]], and [[0,1,1],[1,0,0]] are also correct answers."
      },
      {
        "input": "upper = 2, lower = 3, colsum = [2,2,1,1]",
        "output": "[]"
      },
      {
        "input": "upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1]",
        "output": "[[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]"
      }
    ],
    "constraints": [
      "1 <= colsum.length <= 10^5",
      "0 <= upper, lower <= colsum.length",
      "0 <= colsum[i] <= 2"
    ]
  },
  {
    "questionId": 1254,
    "title": "Number of Closed Islands",
    "titleSlug": "number-of-closed-islands",
    "content": "<p>Given a 2D `grid` consists of `0s` (land) and `1s` (water).  An island is a maximal 4-directionally connected group of `0s` and a closed island is an island totally (all left, top, right, bottom) surrounded by `1s.`\nReturn the number of closed islands.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_closed_islands(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]",
        "output": "2",
        "explanation": "Islands in gray are closed because they are completely surrounded by water (group of 1s)."
      },
      {
        "input": "grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]",
        "output": "1"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1],",
        "output": "2"
      }
    ],
    "constraints": [
      "1 <= grid.length, grid[0].length <= 100",
      "0 <= grid[i][j] <=1"
    ]
  },
  {
    "questionId": 1256,
    "title": "Encode Number",
    "titleSlug": "encode-number",
    "content": "<p>Given a non-negative integer `num`, Return its encoding string.</p>\n<p>The encoding is done by converting the integer to a string using a secret function that you should deduce from the following table:</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def encode_number(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "num = 23",
        "output": "\"1000\""
      },
      {
        "input": "num = 107",
        "output": "\"101100\""
      }
    ],
    "constraints": [
      "0 <= num <= 10^9"
    ]
  },
  {
    "questionId": 1257,
    "title": "Smallest Common Region",
    "titleSlug": "smallest-common-region",
    "content": "<p>You are given some lists of `regions` where the first region of each list includes all other regions in that list.</p>\n<p>Naturally, if a region `X` contains another region `Y` then `X` is bigger than `Y`. Also by definition a region X contains itself.</p>\n<p>Given two regions `region1`, `region2`, find out the smallest region that contains both of them.</p>\n<p>If you are given regions `r1`, `r2` and `r3` such that `r1` includes `r3`, it is guaranteed there is no `r2` such that `r2` includes `r3`.</p>\n<p>It's guaranteed the smallest region exists.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def smallest_common_region(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "regions = [[\"Earth\",\"North America\",\"South America\"],",
        "output": "\"North America\""
      }
    ],
    "constraints": [
      "2 <= regions.length <= 10^4",
      "region1 != region2",
      "All strings consist of English letters and spaces with at most 20 letters."
    ]
  },
  {
    "questionId": 1258,
    "title": "Synonymous Sentences",
    "titleSlug": "synonymous-sentences",
    "content": "<p>Given a list of pairs of equivalent words `synonyms` and a sentence `text`, Return all possible synonymous sentences sorted lexicographically.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def synonymous_sentences(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "synonyms = [[\"happy\",\"joy\"],[\"sad\",\"sorrow\"],[\"joy\",\"cheerful\"]],",
        "output": "[\"I am cheerful today but was sad yesterday\","
      },
      {
        "input": "synonyms = [[\"happy\",\"joy\"],[\"cheerful\",\"glad\"]], text = \"I am happy today but was sad yesterday\"",
        "output": "[\"I am happy today but was sad yesterday\",\"I am joy today but was sad yesterday\"]"
      },
      {
        "input": "synonyms = [[\"a\",\"b\"],[\"c\",\"d\"],[\"e\",\"f\"]], text = \"a c e\"",
        "output": "[\"a c e\",\"a c f\",\"a d e\",\"a d f\",\"b c e\",\"b c f\",\"b d e\",\"b d f\"]"
      },
      {
        "input": "synonyms = [[\"a\",\"QrbCl\"]], text = \"d QrbCl ya ya NjZQ\"",
        "output": "[\"d QrbCl ya ya NjZQ\",\"d a ya ya NjZQ\"]"
      }
    ],
    "constraints": [
      "0 <= synonyms.length <= 10",
      "synonyms[i].length == 2",
      "synonyms[i][0] != synonyms[i][1]",
      "All words consist of at most 10 English letters only.",
      "text is a single space separated sentence of at most 10 words."
    ]
  },
  {
    "questionId": 1260,
    "title": "Shift 2D Grid",
    "titleSlug": "shift-2d-grid",
    "content": "<p>Given a 2D `grid` of size `m x n` and an integer `k`. You need to shift the `grid` `k` times.</p>\n<p>In one shift operation:\nElement at `grid[i][j]` moves to `grid[i][j + 1]`.</p>\n<p>Element at `grid[i][n - 1]` moves to `grid[i + 1][0]`.</p>\n<p>Element at `grid[m - 1][n - 1]` moves to `grid[0][0]`.</p>\n<p>Return the 2D grid after applying shift operation `k` times.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def shift_2d_grid(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "`grid` = [[1,2,3],[4,5,6],[7,8,9]], k = 1",
        "output": "[[9,1,2],[3,4,5],[6,7,8]]"
      },
      {
        "input": "`grid` = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4",
        "output": "[[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]"
      },
      {
        "input": "`grid` = [[1,2,3],[4,5,6],[7,8,9]], k = 9",
        "output": "[[1,2,3],[4,5,6],[7,8,9]]"
      }
    ],
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m <= 50",
      "1 <= n <= 50",
      "-1000 <= grid[i][j] <= 1000",
      "0 <= k <= 100"
    ]
  },
  {
    "questionId": 1261,
    "title": "Find Elements in a Contaminated Binary Tree",
    "titleSlug": "find-elements-in-a-contaminated-binary-tree",
    "content": "<p>Given a binary tree with the following rules:\n`root.val == 0`\nIf `treeNode.val == x` and `treeNode.left != null`, then `treeNode.left.val == 2 * x + 1`\nIf `treeNode.val == x` and `treeNode.right != null`, then `treeNode.right.val == 2 * x + 2`\nNow the binary tree is contaminated, which means all `treeNode.val` have been changed to `-1`.</p>\n<p>You need to first recover the binary tree and then implement the `FindElements` class:\n`FindElements(TreeNode* root)` Initializes the object with a contamined binary tree, you need to recover it first.</p>\n<p>`bool find(int target)` Return if the `target` value exists in the recovered binary tree.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_elements_in_a_contaminated_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "TreeNode.val == -1",
      "The height of the binary tree is less than or equal to 20",
      "The total number of nodes is between [1, 10^4]",
      "Total calls of find() is between [1, 10^4]",
      "0 <= target <= 10^6"
    ]
  },
  {
    "questionId": 1262,
    "title": "Greatest Sum Divisible by Three",
    "titleSlug": "greatest-sum-divisible-by-three",
    "content": "<p>Given an array `nums` of integers, we need to find the maximum possible sum of elements of the array such that it is divisible by three.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def greatest_sum_divisible_by_three(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [3,6,5,1,8]",
        "output": "18",
        "explanation": "Pick numbers 3, 6, 1 and 8 their sum is 18 (maximum sum divisible by 3)."
      },
      {
        "input": "nums = [4]",
        "output": "0",
        "explanation": "Since 4 is not divisible by 3, do not pick any number."
      },
      {
        "input": "nums = [1,2,3,4,4]",
        "output": "12",
        "explanation": "Pick numbers 1, 3, 4 and 4 their sum is 12 (maximum sum divisible by 3)."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 4 * 10^4",
      "1 <= nums[i] <= 10^4"
    ]
  },
  {
    "questionId": 1265,
    "title": "Print Immutable Linked List in Reverse",
    "titleSlug": "print-immutable-linked-list-in-reverse",
    "content": "<p>You are given an immutable linked list, print out all values of each node in reverse with the help of the following interface:\n`ImmutableListNode`: An interface of immutable linked list, you are given the head of the list.</p>\n<p>You need to use the following functions to access the linked list (you can't access the `ImmutableListNode` directly):\n`ImmutableListNode.printValue()`: Print value of the current node.</p>\n<p>`ImmutableListNode.getNext()`: Return the next node.</p>\n<p>The input is only given to initialize the linked list internally. You must solve this problem without modifying the linked list. In other words, you must operate the linked list using only the mentioned APIs.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def print_immutable_linked_list_in_reverse(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [1,2,3,4]",
        "output": "[4,3,2,1]"
      },
      {
        "input": "head = [0,-4,-1,3,-5]",
        "output": "[-5,3,-1,-4,0]"
      },
      {
        "input": "head = [-2,0,6,4,4,-6]",
        "output": "[-6,4,4,6,0,-2]"
      }
    ],
    "constraints": [
      "The length of the linked list is between [1, 1000].",
      "The value of each node in the linked list is between [-1000, 1000].",
      "Follow up:",
      "Could you solve this problem in:",
      "Constant space complexity?",
      "Linear time complexity and less than linear space complexity?"
    ]
  },
  {
    "questionId": 1266,
    "title": "Minimum Time Visiting All Points",
    "titleSlug": "minimum-time-visiting-all-points",
    "content": "<p>On a 2D plane, there are `n` points with integer coordinates `points[i] = [xi, yi]`. Return the minimum time in seconds to visit all the points in the order given by `points`.</p>\n<p>You can move according to these rules:\nIn `1` second, you can either:</p>\n<p>move vertically by one unit,\nmove horizontally by one unit, or\nmove diagonally `sqrt(2)` units (in other words, move one unit vertically then one unit horizontally in `1` second).</p>\n<p>You have to visit the points in the same order as they appear in the array.</p>\n<p>You are allowed to pass through points that appear later in the order, but these do not count as visits.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_time_visiting_all_points(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "points = [[1,1],[3,4],[-1,0]]",
        "output": "7",
        "explanation": "One optimal path is [1,1] -> [2,2] -> [3,3] -> [3,4] -> [2,3] -> [1,2] -> [0,1] -> [-1,0]"
      },
      {
        "input": "points = [[3,2],[-2,2]]",
        "output": "5"
      }
    ],
    "constraints": [
      "points.length == n",
      "1 <= n <= 100",
      "points[i].length == 2",
      "-1000 <= points[i][0], points[i][1] <= 1000"
    ]
  },
  {
    "questionId": 1267,
    "title": "Count Servers that Communicate",
    "titleSlug": "count-servers-that-communicate",
    "content": "<p>You are given a map of a server center, represented as a `m * n` integer matrix `grid`, where 1 means that on that cell there is a server and 0 means that it is no server. Two servers are said to communicate if they are on the same row or on the same column.</p>\n<p>Return the number of servers that communicate with any other server.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_servers_that_communicate(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "grid = [[1,0],[0,1]]",
        "output": "0",
        "explanation": "No servers can communicate with others."
      },
      {
        "input": "grid = [[1,0],[1,1]]",
        "output": "3",
        "explanation": "All three servers can communicate with at least one other server."
      },
      {
        "input": "grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]",
        "output": "4",
        "explanation": "The two servers in the first row can communicate with each other. The two servers in the third column can communicate with each other. The server at right bottom corner can't communicate with any other server."
      }
    ],
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m <= 250",
      "1 <= n <= 250",
      "grid[i][j] == 0 or 1"
    ]
  },
  {
    "questionId": 1268,
    "title": "Search Suggestions System",
    "titleSlug": "search-suggestions-system",
    "content": "<p>Given an array of strings `products` and a string `searchWord`. We want to design a system that suggests at most three product names from `products` after each character of `searchWord` is typed. Suggested products should have common prefix with the searchWord. If there are more than three products with a common prefix return the three lexicographically minimums products.</p>\n<p>Return list of lists of the suggested `products` after each character of `searchWord` is typed.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def search_suggestions_system(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "products = [\"mobile\",\"mouse\",\"moneypot\",\"monitor\",\"mousepad\"], searchWord = \"mouse\"",
        "output": "[",
        "explanation": "products sorted lexicographically = [\"mobile\",\"moneypot\",\"monitor\",\"mouse\",\"mousepad\"]"
      },
      {
        "input": "products = [\"havana\"], searchWord = \"havana\"",
        "output": "[[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"]]"
      },
      {
        "input": "products = [\"bags\",\"baggage\",\"banner\",\"box\",\"cloths\"], searchWord = \"bags\"",
        "output": "[[\"baggage\",\"bags\",\"banner\"],[\"baggage\",\"bags\",\"banner\"],[\"baggage\",\"bags\"],[\"bags\"]]"
      },
      {
        "input": "products = [\"havana\"], searchWord = \"tatiana\"",
        "output": "[[],[],[],[],[],[],[]]"
      }
    ],
    "constraints": [
      "1 <= products.length <= 1000",
      "There are no repeated elements in products.",
      "1 <= \u03a3 products[i].length <= 2 * 10^4",
      "All characters of products[i] are lower-case English letters.",
      "1 <= searchWord.length <= 1000",
      "All characters of searchWord are lower-case English letters."
    ]
  },
  {
    "questionId": 1271,
    "title": "Hexspeak",
    "titleSlug": "hexspeak",
    "content": "<p>A decimal number can be converted to its Hexspeak representation by first converting it to an uppercase hexadecimal string, then replacing all occurrences of the digit `0` with the letter `O`, and the digit `1` with the letter `I`.  Such a representation is valid if and only if it consists only of the letters in the set `{\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"I\", \"O\"}`.</p>\n<p>Given a string `num` representing a decimal integer `N`, return the Hexspeak representation of `N` if it is valid, otherwise return `\"ERROR\"`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def hexspeak(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "num = \"257\"",
        "output": "\"IOI\"",
        "explanation": "257 is 101 in hexadecimal."
      },
      {
        "input": "num = \"3\"",
        "output": "\"ERROR\""
      }
    ],
    "constraints": [
      "1 <= N <= 10^12",
      "There are no leading zeros in the given string.",
      "All answers must be in uppercase letters."
    ]
  },
  {
    "questionId": 1272,
    "title": "Remove Interval",
    "titleSlug": "remove-interval",
    "content": "<p>A set of real numbers can be represented as the union of several disjoint intervals, where each interval is in the form `[a, b)`. A real number `x` is in the set if one of its intervals `[a, b)` contains `x` (i.e. `a <= x < b`).</p>\n<p>You are given a sorted list of disjoint intervals `intervals` representing a set of real numbers as described above, where `intervals[i] = [ai, bi]` represents the interval `[ai, bi)`. You are also given another interval `toBeRemoved`.</p>\n<p>Return the set of real numbers with the interval `toBeRemoved` removed from `intervals`. In other words, return the set of real numbers such that every `x` in the set is in `intervals` but not in `toBeRemoved`. Your answer should be a sorted list of disjoint intervals as described above.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def remove_interval(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "intervals = [[0,2],[3,4],[5,7]], toBeRemoved = [1,6]",
        "output": "[[0,1],[6,7]]"
      },
      {
        "input": "intervals = [[0,5]], toBeRemoved = [2,3]",
        "output": "[[0,2],[3,5]]"
      },
      {
        "input": "intervals = [[-5,-4],[-3,-2],[1,2],[3,5],[8,9]], toBeRemoved = [-1,4]",
        "output": "[[-5,-4],[-3,-2],[4,5],[8,9]]"
      }
    ],
    "constraints": [
      "1 <= intervals.length <= 104",
      "-109 <= ai < bi <= 109"
    ]
  },
  {
    "questionId": 1273,
    "title": "Delete Tree Nodes",
    "titleSlug": "delete-tree-nodes",
    "content": "<p>A tree rooted at node 0 is given as follows:\nThe number of nodes is `nodes`;\nThe value of the `i`-th node is `value[i]`;\nThe parent of the `i`-th node is `parent[i]`.</p>\n<p>Remove every subtree whose sum of values of nodes is zero.</p>\n<p>After doing so, return the number of nodes remaining in the tree.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def delete_tree_nodes(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nodes = 7, parent = [-1,0,0,1,2,2,2], value = [1,-2,4,0,-2,-1,-1]",
        "output": "2"
      },
      {
        "input": "nodes = 7, parent = [-1,0,0,1,2,2,2], value = [1,-2,4,0,-2,-1,-2]",
        "output": "6"
      },
      {
        "input": "nodes = 5, parent = [-1,0,1,0,0], value = [-672,441,18,728,378]",
        "output": "5"
      },
      {
        "input": "nodes = 5, parent = [-1,0,0,1,1], value = [-686,-842,616,-739,-746]",
        "output": "5"
      }
    ],
    "constraints": [
      "1 <= nodes <= 10^4",
      "parent.length == nodes",
      "0 <= parent[i] <= nodes - 1",
      "parent[0] == -1 which indicates that 0 is the root.",
      "value.length == nodes",
      "-10^5 <= value[i] <= 10^5",
      "The given input is guaranteed to represent a valid tree."
    ]
  },
  {
    "questionId": 1275,
    "title": "Find Winner on a Tic Tac Toe Game",
    "titleSlug": "find-winner-on-a-tic-tac-toe-game",
    "content": "<p>Tic-tac-toe is played by two players A and B on a 3 x 3 grid.</p>\n<p>Here are the rules of Tic-Tac-Toe:\nPlayers take turns placing characters into empty squares (\" \").</p>\n<p>The first player A always places \"X\" characters, while the second player B always places \"O\" characters.</p>\n<p>\"X\" and \"O\" characters are always placed into empty squares, never on filled ones.</p>\n<p>The game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal.</p>\n<p>The game also ends if all squares are non-empty.</p>\n<p>No more moves can be played if the game is over.</p>\n<p>Given an array `moves` where each element is another array of size 2 corresponding to the row and column of the grid where they mark their respective character in the order in which A and B play.</p>\n<p>Return the winner of the game if it exists (A or B), in case the game ends in a draw return \"Draw\", if there are still movements to play return \"Pending\".</p>\n<p>You can assume that `moves` is valid (It follows the rules of Tic-Tac-Toe), the grid is initially empty and A will play first.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_winner_on_a_tic_tac_toe_game(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]",
        "output": "\"A\"",
        "explanation": "\"A\" wins, he always plays first."
      },
      {
        "input": "moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]",
        "output": "\"B\"",
        "explanation": "\"B\" wins."
      },
      {
        "input": "moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]",
        "output": "\"Draw\"",
        "explanation": "The game ends in a draw since there are no moves to make."
      },
      {
        "input": "moves = [[0,0],[1,1]]",
        "output": "\"Pending\"",
        "explanation": "The game has not finished yet."
      }
    ],
    "constraints": [
      "1 <= moves.length <= 9",
      "moves[i].length == 2",
      "0 <= moves[i][j] <= 2",
      "There are no repeated elements on moves.",
      "moves follow the rules of tic tac toe."
    ]
  },
  {
    "questionId": 1276,
    "title": "Number of Burgers with No Waste of Ingredients",
    "titleSlug": "number-of-burgers-with-no-waste-of-ingredients",
    "content": "<p>Given two integers `tomatoSlices` and `cheeseSlices`. The ingredients of different burgers are as follows:\nJumbo Burger: 4 tomato slices and 1 cheese slice.</p>\n<p>Small Burger: 2 Tomato slices and 1 cheese slice.</p>\n<p>Return `[total_jumbo, total_small]` so that the number of remaining `tomatoSlices` equal to 0 and the number of remaining `cheeseSlices` equal to 0. If it is not possible to make the remaining `tomatoSlices` and `cheeseSlices` equal to 0 return `[]`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_burgers_with_no_waste_of_ingredients(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "tomatoSlices = 16, cheeseSlices = 7",
        "output": "[1,6]"
      },
      {
        "input": "tomatoSlices = 17, cheeseSlices = 4",
        "output": "[]"
      },
      {
        "input": "tomatoSlices = 4, cheeseSlices = 17",
        "output": "[]"
      },
      {
        "input": "tomatoSlices = 0, cheeseSlices = 0",
        "output": "[0,0]"
      },
      {
        "input": "tomatoSlices = 2, cheeseSlices = 1",
        "output": "[0,1]"
      }
    ],
    "constraints": [
      "0 <= tomatoSlices <= 10^7",
      "0 <= cheeseSlices <= 10^7"
    ]
  },
  {
    "questionId": 1277,
    "title": "Count Square Submatrices with All Ones",
    "titleSlug": "count-square-submatrices-with-all-ones",
    "content": "<p>Given a `m * n` matrix of ones and zeros, return how many square submatrices have all ones.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_square_submatrices_with_all_ones(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "matrix =",
        "output": "15",
        "explanation": "There are 10 squares of side 1."
      },
      {
        "input": "matrix =",
        "output": "7",
        "explanation": "There are 6 squares of side 1."
      }
    ],
    "constraints": [
      "1 <= arr.length <= 300",
      "1 <= arr[0].length <= 300",
      "0 <= arr[i][j] <= 1"
    ]
  },
  {
    "questionId": 1279,
    "title": "Traffic Light Controlled Intersection",
    "titleSlug": "traffic-light-controlled-intersection",
    "content": "<p>There is an intersection of two roads. First road is road A where cars travel from North to South in direction 1 and from South to North in direction 2. Second road is road B where cars travel from West to East in direction 3 and from East to West in direction 4.</p>\n<p>There is a traffic light located on each road before the intersection. A traffic light can either be green or red.</p>\n<p>Green means cars can cross the intersection in both directions of the road.</p>\n<p>Red means cars in both directions cannot cross the intersection and must wait until the light turns green.</p>\n<p>The traffic lights cannot be green on both roads at the same time. That means when the light is green on road A, it is red on road B and when the light is green on road B, it is red on road A.</p>\n<p>Initially, the traffic light is green on road A and red on road B. When the light is green on one road, all cars can cross the intersection in both directions until the light becomes green on the other road. No two cars traveling on different roads should cross at the same time.</p>\n<p>Design a deadlock-free traffic light controlled system at this intersection.</p>\n<p>Implement the function `void carArrived(carId, roadId, direction, turnGreen, crossCar)` where:\n`carId` is the id of the car that arrived.</p>\n<p>`roadId` is the id of the road that the car travels on.</p>\n<p>`direction` is the direction of the car.</p>\n<p>`turnGreen` is a function you can call to turn the traffic light to green on the current road.</p>\n<p>`crossCar` is a function you can call to let the current car cross the intersection.</p>\n<p>Your answer is considered correct if it avoids cars deadlock in the intersection. Turning the light green on a road when it was already green is considered a wrong answer.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def traffic_light_controlled_intersection(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "cars = [1,3,5,2,4], directions = [2,1,2,4,3], arrivalTimes = [10,20,30,40,50]",
        "output": "["
      },
      {
        "input": "cars = [1,2,3,4,5], directions = [2,4,3,3,1], arrivalTimes = [10,20,30,40,40]",
        "output": "[",
        "explanation": "This is a dead-lock free scenario. Note that the scenario when car 4 crosses before turning light into green on road A and allowing car 5 to pass is also correct and Accepted scenario."
      }
    ],
    "constraints": [
      "1 <= cars.length <= 20",
      "cars.length = directions.length",
      "cars.length = arrivalTimes.length",
      "All values of cars are unique",
      "1 <= directions[i] <= 4",
      "arrivalTimes is non-decreasing"
    ]
  },
  {
    "questionId": 1281,
    "title": "Subtract the Product and Sum of Digits of an Integer",
    "titleSlug": "subtract-the-product-and-sum-of-digits-of-an-integer",
    "content": "<p>Given an integer number `n`, return the difference between the product of its digits and the sum of its digits.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def subtract_the_product_and_sum_of_digits_of_an_integer(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 234",
        "output": "15",
        "explanation": "Product of digits = 2 * 3 * 4 = 24"
      },
      {
        "input": "n = 4421",
        "output": "21",
        "explanation": "Product of digits = 4 * 4 * 2 * 1 = 32"
      }
    ],
    "constraints": [
      "1 <= n <= 10^5"
    ]
  },
  {
    "questionId": 1282,
    "title": "Group the People Given the Group Size They Belong To",
    "titleSlug": "group-the-people-given-the-group-size-they-belong-to",
    "content": "<p>There are `n` people that are split into some unknown number of groups. Each person is labeled with a unique ID from `0` to `n - 1`.</p>\n<p>You are given an integer array `groupSizes`, where `groupSizes[i]` is the size of the group that person `i` is in. For example, if `groupSizes[1] = 3`, then person `1` must be in a group of size `3`.</p>\n<p>Return a list of groups such that each person `i` is in a group of size `groupSizes[i]`.</p>\n<p>Each person should appear in exactly one group, and every person must be in a group. If there are multiple answers, return any of them. It is guaranteed that there will be at least one valid solution for the given input.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def group_the_people_given_the_group_size_they_belong_to(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "groupSizes = [3,3,3,3,3,1,3]",
        "output": "[[5],[0,1,2],[3,4,6]]",
        "explanation": "The first group is [5]. The size is 1, and groupSizes[5] = 1."
      },
      {
        "input": "groupSizes = [2,1,3,3,3,2]",
        "output": "[[1],[0,5],[2,3,4]]"
      }
    ],
    "constraints": [
      "groupSizes.length == n",
      "1 <= n <= 500",
      "1 <= groupSizes[i] <= n"
    ]
  },
  {
    "questionId": 1283,
    "title": "Find the Smallest Divisor Given a Threshold",
    "titleSlug": "find-the-smallest-divisor-given-a-threshold",
    "content": "<p>Given an array of integers `nums` and an integer `threshold`, we will choose a positive integer `divisor`, divide all the array by it, and sum the division's result. Find the smallest `divisor` such that the result mentioned above is less than or equal to `threshold`.</p>\n<p>Each result of the division is rounded to the nearest integer greater than or equal to that element. (For example: `7/3 = 3` and `10/2 = 5`).</p>\n<p>It is guaranteed that there will be an answer.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_the_smallest_divisor_given_a_threshold(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,5,9], threshold = 6",
        "output": "5",
        "explanation": "We can get a sum to 17 (1+2+5+9) if the divisor is 1."
      },
      {
        "input": "nums = [44,22,33,11,1], threshold = 5",
        "output": "44"
      },
      {
        "input": "nums = [21212,10101,12121], threshold = 1000000",
        "output": "1"
      },
      {
        "input": "nums = [2,3,5,7,11], threshold = 11",
        "output": "3"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 5 * 104",
      "1 <= nums[i] <= 106",
      "nums.length <= threshold <= 106"
    ]
  },
  {
    "questionId": 1286,
    "title": "Iterator for Combination",
    "titleSlug": "iterator-for-combination",
    "content": "<p>Design the `CombinationIterator` class:\n`CombinationIterator(string characters, int combinationLength)` Initializes the object with a string `characters` of sorted distinct lowercase English letters and a number `combinationLength` as arguments.</p>\n<p>`next()` Returns the next combination of length `combinationLength` in lexicographical order.</p>\n<p>`hasNext()` Returns `true` if and only if there exists a next combination.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def iterator_for_combination(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= combinationLength <= characters.length <= 15",
      "All the characters of characters are unique.",
      "At most 104 calls will be made to next and hasNext.",
      "It's guaranteed that all calls of the function next are valid."
    ]
  },
  {
    "questionId": 1287,
    "title": "Element Appearing More Than 25% In Sorted Array",
    "titleSlug": "element-appearing-more-than-25-in-sorted-array",
    "content": "<p>Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time.</p>\n<p>Return that integer.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def element_appearing_more_than_25_in_sorted_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [1,2,2,6,6,6,6,7,10]",
        "output": "6"
      }
    ],
    "constraints": [
      "1 <= arr.length <= 10^4",
      "0 <= arr[i] <= 10^5"
    ]
  },
  {
    "questionId": 1288,
    "title": "Remove Covered Intervals",
    "titleSlug": "remove-covered-intervals",
    "content": "<p>Given a list of `intervals`, remove all intervals that are covered by another interval in the list.</p>\n<p>Interval `[a,b)` is covered by interval `[c,d)` if and only if `c <= a` and `b <= d`.</p>\n<p>After doing so, return the number of remaining intervals.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def remove_covered_intervals(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "intervals = [[1,4],[3,6],[2,8]]",
        "output": "2",
        "explanation": "Interval [3,6] is covered by [2,8], therefore it is removed."
      },
      {
        "input": "intervals = [[1,4],[2,3]]",
        "output": "1"
      },
      {
        "input": "intervals = [[0,10],[5,12]]",
        "output": "2"
      },
      {
        "input": "intervals = [[3,10],[4,10],[5,11]]",
        "output": "2"
      },
      {
        "input": "intervals = [[1,2],[1,4],[3,4]]",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= intervals.length <= 1000",
      "intervals[i].length == 2",
      "0 <= intervals[i][0] < intervals[i][1] <= 10^5",
      "All the intervals are unique."
    ]
  },
  {
    "questionId": 1290,
    "title": "Convert Binary Number in a Linked List to Integer",
    "titleSlug": "convert-binary-number-in-a-linked-list-to-integer",
    "content": "<p>Given `head` which is a reference node to a singly-linked list. The value of each node in the linked list is either 0 or 1. The linked list holds the binary representation of a number.</p>\n<p>Return the decimal value of the number in the linked list.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def convert_binary_number_in_a_linked_list_to_integer(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [1,0,1]",
        "output": "5",
        "explanation": "(101) in base 2 = (5) in base 10"
      },
      {
        "input": "head = [0]",
        "output": "0"
      },
      {
        "input": "head = [1]",
        "output": "1"
      },
      {
        "input": "head = [1,0,0,1,0,0,1,1,1,0,0,0,0,0,0]",
        "output": "18880"
      },
      {
        "input": "head = [0,0]",
        "output": "0"
      }
    ],
    "constraints": [
      "The Linked List is not empty.",
      "Number of nodes will not exceed 30.",
      "Each node's value is either 0 or 1."
    ]
  },
  {
    "questionId": 1291,
    "title": "Sequential Digits",
    "titleSlug": "sequential-digits",
    "content": "<p>An integer has sequential digits if and only if each digit in the number is one more than the previous digit.</p>\n<p>Return a sorted list of all the integers in the range `[low, high]` inclusive that have sequential digits.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sequential_digits(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "low = 100, high = 300",
        "output": "[123,234]"
      },
      {
        "input": "low = 1000, high = 13000",
        "output": "[1234,2345,3456,4567,5678,6789,12345]"
      }
    ],
    "constraints": [
      "10 <= low <= high <= 10^9"
    ]
  },
  {
    "questionId": 1292,
    "title": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
    "titleSlug": "maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold",
    "content": "<p>Given a `m x n` matrix `mat` and an integer `threshold`. Return the maximum side-length of a square with a sum less than or equal to `threshold` or return 0 if there is no such square.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_side_length_of_a_square_with_sum_less_than_or_equal_to_threshold(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4",
        "output": "2",
        "explanation": "The maximum side length of square with sum less than 4 is 2 as shown."
      },
      {
        "input": "mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1",
        "output": "0"
      },
      {
        "input": "mat = [[1,1,1,1],[1,0,0,0],[1,0,0,0],[1,0,0,0]], threshold = 6",
        "output": "3"
      },
      {
        "input": "mat = [[18,70],[61,1],[25,85],[14,40],[11,96],[97,96],[63,45]], threshold = 40184",
        "output": "2"
      }
    ],
    "constraints": [
      "1 <= m, n <= 300",
      "m == mat.length",
      "n == mat[i].length",
      "0 <= mat[i][j] <= 10000",
      "0 <= threshold <= 10^5"
    ]
  },
  {
    "questionId": 1295,
    "title": "Find Numbers with Even Number of Digits",
    "titleSlug": "find-numbers-with-even-number-of-digits",
    "content": "<p>Given an array `nums` of integers, return how many of them contain an even number of digits.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_numbers_with_even_number_of_digits(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [12,345,2,6,7896]",
        "output": "2",
        "explanation": "12 contains 2 digits (even number of digits)."
      },
      {
        "input": "nums = [555,901,482,1771]",
        "output": "1",
        "explanation": "Only 1771 contains an even number of digits."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 500",
      "1 <= nums[i] <= 10^5"
    ]
  },
  {
    "questionId": 1296,
    "title": "Divide Array in Sets of K Consecutive Numbers",
    "titleSlug": "divide-array-in-sets-of-k-consecutive-numbers",
    "content": "<p>Given an array of integers `nums` and a positive integer `k`, find whether it's possible to divide this array into sets of `k` consecutive numbers\nReturn `True` if it is possible. Otherwise, return `False`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def divide_array_in_sets_of_k_consecutive_numbers(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3,3,4,4,5,6], k = 4",
        "output": "true",
        "explanation": "Array can be divided into [1,2,3,4] and [3,4,5,6]."
      },
      {
        "input": "nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3",
        "output": "true",
        "explanation": "Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11]."
      },
      {
        "input": "nums = [3,3,2,2,1,1], k = 3",
        "output": "true"
      },
      {
        "input": "nums = [1,2,3,4], k = 3",
        "output": "false",
        "explanation": "Each array should be divided in subarrays of size 3."
      }
    ],
    "constraints": [
      "1 <= k <= nums.length <= 105",
      "1 <= nums[i] <= 109",
      "Note: This question is the same as 846: https://leetcode.com/problems/hand-of-straights/"
    ]
  },
  {
    "questionId": 1297,
    "title": "Maximum Number of Occurrences of a Substring",
    "titleSlug": "maximum-number-of-occurrences-of-a-substring",
    "content": "<p>Given a string `s`, return the maximum number of ocurrences of any substring under the following rules:\nThe number of unique characters in the substring must be less than or equal to `maxLetters`.</p>\n<p>The substring size must be between `minSize` and `maxSize` inclusive.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_number_of_occurrences_of_a_substring(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"aababcaab\", maxLetters = 2, minSize = 3, maxSize = 4",
        "output": "2",
        "explanation": "Substring \"aab\" has 2 ocurrences in the original string."
      },
      {
        "input": "s = \"aaaa\", maxLetters = 1, minSize = 3, maxSize = 3",
        "output": "2",
        "explanation": "Substring \"aaa\" occur 2 times in the string. It can overlap."
      },
      {
        "input": "s = \"aabcabcab\", maxLetters = 2, minSize = 2, maxSize = 3",
        "output": "3"
      },
      {
        "input": "s = \"abcde\", maxLetters = 2, minSize = 3, maxSize = 3",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= s.length <= 10^5",
      "1 <= maxLetters <= 26",
      "1 <= minSize <= maxSize <= min(26, s.length)",
      "s only contains lowercase English letters."
    ]
  },
  {
    "questionId": 1299,
    "title": "Replace Elements with Greatest Element on Right Side",
    "titleSlug": "replace-elements-with-greatest-element-on-right-side",
    "content": "<p>Given an array `arr`, replace every element in that array with the greatest element among the elements to its right, and replace the last element with `-1`.</p>\n<p>After doing so, return the array.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def replace_elements_with_greatest_element_on_right_side(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [17,18,5,4,6,1]",
        "output": "[18,6,6,6,1,-1]",
        "explanation": "- index 0 --> the greatest element to the right of index 0 is index 1 (18)."
      },
      {
        "input": "arr = [400]",
        "output": "[-1]",
        "explanation": "There are no elements to the right of index 0."
      }
    ],
    "constraints": [
      "1 <= arr.length <= 104",
      "1 <= arr[i] <= 105"
    ]
  },
  {
    "questionId": 1300,
    "title": "Sum of Mutated Array Closest to Target",
    "titleSlug": "sum-of-mutated-array-closest-to-target",
    "content": "<p>Given an integer array `arr` and a target value `target`, return the integer `value` such that when we change all the integers larger than `value` in the given array to be equal to `value`, the sum of the array gets as close as possible (in absolute difference) to `target`.</p>\n<p>In case of a tie, return the minimum such integer.</p>\n<p>Notice that the answer is not neccesarilly a number from `arr`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sum_of_mutated_array_closest_to_target(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [4,9,3], target = 10",
        "output": "3",
        "explanation": "When using 3 arr converts to [3, 3, 3] which sums 9 and that's the optimal answer."
      },
      {
        "input": "arr = [2,3,5], target = 10",
        "output": "5"
      },
      {
        "input": "arr = [60864,25176,27249,21296,20204], target = 56803",
        "output": "11361"
      }
    ],
    "constraints": [
      "1 <= arr.length <= 10^4",
      "1 <= arr[i], target <= 10^5"
    ]
  },
  {
    "questionId": 1302,
    "title": "Deepest Leaves Sum",
    "titleSlug": "deepest-leaves-sum",
    "content": "<p>Given the `root` of a binary tree, return the sum of values of its deepest leaves.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def deepest_leaves_sum(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2,3,4,5,null,6,7,null,null,null,null,8]",
        "output": "15"
      },
      {
        "input": "root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]",
        "output": "19"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 104].",
      "1 <= Node.val <= 100"
    ]
  },
  {
    "questionId": 1304,
    "title": "Find N Unique Integers Sum up to Zero",
    "titleSlug": "find-n-unique-integers-sum-up-to-zero",
    "content": "<p>Given an integer `n`, return any array containing `n` unique integers such that they add up to `0`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_n_unique_integers_sum_up_to_zero(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 5",
        "output": "[-7,-1,1,3,4]",
        "explanation": "These arrays also are accepted [-5,-1,1,2,3] , [-3,-1,2,-2,4]."
      },
      {
        "input": "n = 3",
        "output": "[-1,0,1]"
      },
      {
        "input": "n = 1",
        "output": "[0]"
      }
    ],
    "constraints": [
      "1 <= n <= 1000"
    ]
  },
  {
    "questionId": 1305,
    "title": "All Elements in Two Binary Search Trees",
    "titleSlug": "all-elements-in-two-binary-search-trees",
    "content": "<p>Given two binary search trees `root1` and `root2`.</p>\n<p>Return a list containing all the integers from both trees sorted in ascending order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def all_elements_in_two_binary_search_trees(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root1 = [2,1,4], root2 = [1,0,3]",
        "output": "[0,1,1,2,3,4]"
      },
      {
        "input": "root1 = [0,-10,10], root2 = [5,1,7,0,2]",
        "output": "[-10,0,0,1,2,5,7,10]"
      },
      {
        "input": "root1 = [], root2 = [5,1,7,0,2]",
        "output": "[0,1,2,5,7]"
      },
      {
        "input": "root1 = [0,-10,10], root2 = []",
        "output": "[-10,0,10]"
      },
      {
        "input": "root1 = [1,null,8], root2 = [8,1]",
        "output": "[1,1,8,8]"
      }
    ],
    "constraints": [
      "Each tree has at most 5000 nodes.",
      "Each node's value is between [-10^5, 10^5]."
    ]
  },
  {
    "questionId": 1306,
    "title": "Jump Game III",
    "titleSlug": "jump-game-iii",
    "content": "<p>Given an array of non-negative integers `arr`, you are initially positioned at `start` index of the array. When you are at index `i`, you can jump to `i + arr[i]` or `i - arr[i]`, check if you can reach to any index with value 0.</p>\n<p>Notice that you can not jump outside of the array at any time.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def jump_game_iii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [4,2,3,0,3,1,2], start = 5",
        "output": "true",
        "explanation": "All possible ways to reach at index 3 with value 0 are:"
      },
      {
        "input": "arr = [4,2,3,0,3,1,2], start = 0",
        "output": "true",
        "explanation": "One possible way to reach at index 3 with value 0 is:"
      },
      {
        "input": "arr = [3,0,2,1,2], start = 2",
        "output": "false",
        "explanation": "There is no way to reach at index 1 with value 0."
      }
    ],
    "constraints": [
      "1 <= arr.length <= 5 * 104",
      "0 <= arr[i] < arr.length",
      "0 <= start < arr.length"
    ]
  },
  {
    "questionId": 1309,
    "title": "Decrypt String from Alphabet to Integer Mapping",
    "titleSlug": "decrypt-string-from-alphabet-to-integer-mapping",
    "content": "<p>Given a string `s` formed by digits (`'0'` - `'9'`) and `'#'` . We want to map `s` to English lowercase characters as follows:\nCharacters (`'a'` to `'i')` are represented by (`'1'` to `'9'`) respectively.</p>\n<p>Characters (`'j'` to `'z')` are represented by (`'10#'` to `'26#'`) respectively. \nReturn the string formed after mapping.</p>\n<p>It's guaranteed that a unique mapping will always exist.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def decrypt_string_from_alphabet_to_integer_mapping(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"10#11#12\"",
        "output": "\"jkab\"",
        "explanation": "\"j\" -> \"10#\" , \"k\" -> \"11#\" , \"a\" -> \"1\" , \"b\" -> \"2\"."
      },
      {
        "input": "s = \"1326#\"",
        "output": "\"acz\""
      },
      {
        "input": "s = \"25#\"",
        "output": "\"y\""
      },
      {
        "input": "s = \"12345678910#11#12#13#14#15#16#17#18#19#20#21#22#23#24#25#26#\"",
        "output": "\"abcdefghijklmnopqrstuvwxyz\""
      }
    ],
    "constraints": [
      "1 <= s.length <= 1000",
      "s[i] only contains digits letters ('0'-'9') and '#' letter.",
      "s will be valid string such that mapping is always possible."
    ]
  },
  {
    "questionId": 1310,
    "title": "XOR Queries of a Subarray",
    "titleSlug": "xor-queries-of-a-subarray",
    "content": "<p>Given the array `arr` of positive integers and the array `queries` where `queries[i] = [Li, Ri]`, for each query `i` compute the XOR of elements from `Li` to `Ri` (that is, `arr[Li] xor arr[Li+1] xor ... xor arr[Ri]` ). Return an array containing the result for the given `queries`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def xor_queries_of_a_subarray(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]",
        "output": "[2,7,14,8]",
        "explanation": "The binary representation of the elements in the array are:"
      },
      {
        "input": "arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]",
        "output": "[8,0,4,4]"
      }
    ],
    "constraints": [
      "1 <= arr.length <= 3 * 10^4",
      "1 <= arr[i] <= 10^9",
      "1 <= queries.length <= 3 * 10^4",
      "queries[i].length == 2",
      "0 <= queries[i][0] <= queries[i][1] < arr.length"
    ]
  },
  {
    "questionId": 1311,
    "title": "Get Watched Videos by Your Friends",
    "titleSlug": "get-watched-videos-by-your-friends",
    "content": "<p>There are `n` people, each person has a unique id between `0` and `n-1`. Given the arrays `watchedVideos` and `friends`, where `watchedVideos[i]` and `friends[i]` contain the list of watched videos and the list of friends respectively for the person with `id = i`.</p>\n<p>Level 1 of videos are all watched videos by your friends, level 2 of videos are all watched videos by the friends of your friends and so on. In general, the level `k` of videos are all watched videos by people with the shortest path exactly equal to `k` with you. Given your `id` and the `level` of videos, return the list of videos ordered by their frequencies (increasing). For videos with the same frequency order them alphabetically from least to greatest.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def get_watched_videos_by_your_friends(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "watchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1",
        "output": "[\"B\",\"C\"]",
        "explanation": "You have id = 0 (green color in the figure) and your friends are (yellow color in the figure):"
      },
      {
        "input": "watchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2",
        "output": "[\"D\"]",
        "explanation": "You have id = 0 (green color in the figure) and the only friend of your friends is the person with id = 3 (yellow color in the figure)."
      }
    ],
    "constraints": [
      "n == watchedVideos.length == friends.length",
      "2 <= n <= 100",
      "1 <= watchedVideos[i].length <= 100",
      "1 <= watchedVideos[i][j].length <= 8",
      "0 <= friends[i].length < n",
      "0 <= friends[i][j] < n",
      "0 <= id < n",
      "1 <= level < n",
      "if friends[i] contains j, then friends[j] contains i"
    ]
  },
  {
    "questionId": 1313,
    "title": "Decompress Run-Length Encoded List",
    "titleSlug": "decompress-run-length-encoded-list",
    "content": "<p>We are given a list `nums` of integers representing a list compressed with run-length encoding.</p>\n<p>Consider each adjacent pair of elements `[freq, val] = [nums[2*i], nums[2*i+1]]` (with `i >= 0`).  For each such pair, there are `freq` elements with value `val` concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list.</p>\n<p>Return the decompressed list.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def decompress_run_length_encoded_list(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3,4]",
        "output": "[2,4,4,4]",
        "explanation": "The first pair [1,2] means we have freq = 1 and val = 2 so we generate the array [2]."
      },
      {
        "input": "nums = [1,1,2,3]",
        "output": "[1,3,3]"
      }
    ],
    "constraints": [
      "2 <= nums.length <= 100",
      "nums.length % 2 == 0",
      "1 <= nums[i] <= 100"
    ]
  },
  {
    "questionId": 1314,
    "title": "Matrix Block Sum",
    "titleSlug": "matrix-block-sum",
    "content": "<p>Given a `m x n` matrix `mat` and an integer `k`, return a matrix `answer` where each `answer[i][j]` is the sum of all elements `mat[r][c]` for:\n`i - k <= r <= i + k,`\n`j - k <= c <= j + k`, and\n`(r, c)` is a valid position in the matrix.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def matrix_block_sum(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1",
        "output": "[[12,21,16],[27,45,33],[24,39,28]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2",
        "output": "[[45,45,45],[45,45,45],[45,45,45]]"
      }
    ],
    "constraints": [
      "m == mat.length",
      "n == mat[i].length",
      "1 <= m, n, k <= 100",
      "1 <= mat[i][j] <= 100"
    ]
  },
  {
    "questionId": 1315,
    "title": "Sum of Nodes with Even-Valued Grandparent",
    "titleSlug": "sum-of-nodes-with-even-valued-grandparent",
    "content": "<p>Given a binary tree, return the sum of values of nodes with even-valued grandparent.  (A grandparent of a node is the parent of its parent, if it exists.)\nIf there are no nodes with an even-valued grandparent, return `0`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sum_of_nodes_with_even_valued_grandparent(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]",
        "output": "18",
        "explanation": "The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is between 1 and 10^4.",
      "The value of nodes is between 1 and 100."
    ]
  },
  {
    "questionId": 1317,
    "title": "Convert Integer to the Sum of Two No-Zero Integers",
    "titleSlug": "convert-integer-to-the-sum-of-two-no-zero-integers",
    "content": "<p>Given an integer `n`. No-Zero integer is a positive integer which doesn't contain any 0 in its decimal representation.</p>\n<p>Return a list of two integers `[A, B]` where:\n`A` and `B` are No-Zero integers.</p>\n<p>`A + B = n`\nIt's guarateed that there is at least one valid solution. If there are many valid solutions you can return any of them.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def convert_integer_to_the_sum_of_two_no_zero_integers(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 2",
        "output": "[1,1]",
        "explanation": "A = 1, B = 1. A + B = n and both A and B don't contain any 0 in their decimal representation."
      },
      {
        "input": "n = 11",
        "output": "[2,9]"
      },
      {
        "input": "n = 10000",
        "output": "[1,9999]"
      },
      {
        "input": "n = 69",
        "output": "[1,68]"
      },
      {
        "input": "n = 1010",
        "output": "[11,999]"
      }
    ],
    "constraints": [
      "2 <= n <= 10^4"
    ]
  },
  {
    "questionId": 1318,
    "title": "Minimum Flips to Make a OR b Equal to c",
    "titleSlug": "minimum-flips-to-make-a-or-b-equal-to-c",
    "content": "<p>Given 3 positives numbers `a`, `b` and `c`. Return the minimum flips required in some bits of `a` and `b` to make ( `a` OR `b` == `c` ). (bitwise OR operation).</p>\n<p>Flip operation consists of change any single bit 1 to 0 or change the bit 0 to 1 in their binary representation.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_flips_to_make_a_or_b_equal_to_c(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "a = 2, b = 6, c = 5",
        "output": "3",
        "explanation": "After flips a = 1 , b = 4 , c = 5 such that (`a` OR `b` == `c`)"
      },
      {
        "input": "a = 4, b = 2, c = 7",
        "output": "1"
      },
      {
        "input": "a = 1, b = 2, c = 3",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= a <= 10^9",
      "1 <= b <= 10^9",
      "1 <= c <= 10^9"
    ]
  },
  {
    "questionId": 1319,
    "title": "Number of Operations to Make Network Connected",
    "titleSlug": "number-of-operations-to-make-network-connected",
    "content": "<p>There are `n` computers numbered from `0` to `n-1` connected by ethernet cables `connections` forming a network where `connections[i] = [a, b]` represents a connection between computers `a` and `b`. Any computer can reach any other computer directly or indirectly through the network.</p>\n<p>Given an initial computer network `connections`. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected. Return the minimum number of times you need to do this in order to make all the computers connected. If it's not possible, return -1.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_operations_to_make_network_connected(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 4, connections = [[0,1],[0,2],[1,2]]",
        "output": "1",
        "explanation": "Remove cable between computer 1 and 2 and place between computers 1 and 3."
      },
      {
        "input": "n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]",
        "output": "2"
      },
      {
        "input": "n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]",
        "output": "-1",
        "explanation": "There are not enough cables."
      },
      {
        "input": "n = 5, connections = [[0,1],[0,2],[3,4],[2,3]]",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= n <= 10^5",
      "1 <= connections.length <= min(n*(n-1)/2, 10^5)",
      "connections[i].length == 2",
      "0 <= connections[i][0], connections[i][1] < n",
      "connections[i][0] != connections[i][1]",
      "There are no repeated connections.",
      "No two computers are connected by more than one cable."
    ]
  },
  {
    "questionId": 1323,
    "title": "Maximum 69 Number",
    "titleSlug": "maximum-69-number",
    "content": "<p>Given a positive integer `num` consisting only of digits 6 and 9.</p>\n<p>Return the maximum number you can get by changing at most one digit (6 becomes 9, and 9 becomes 6).</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_69_number(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "num = 9669",
        "output": "9969",
        "explanation": "Changing the first digit results in 6669."
      },
      {
        "input": "num = 9996",
        "output": "9999",
        "explanation": "Changing the last digit 6 to 9 results in the maximum number."
      },
      {
        "input": "num = 9999",
        "output": "9999",
        "explanation": "It is better not to apply any change."
      }
    ],
    "constraints": [
      "1 <= num <= 10^4",
      "num's digits are 6 or 9."
    ]
  },
  {
    "questionId": 1324,
    "title": "Print Words Vertically",
    "titleSlug": "print-words-vertically",
    "content": "<p>Given a string `s`. Return all the words vertically in the same order in which they appear in `s`.</p>\n<p>Words are returned as a list of strings, complete with spaces when is necessary. (Trailing spaces are not allowed).</p>\n<p>Each word would be put on only one column and that in one column there will be only one word.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def print_words_vertically(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"HOW ARE YOU\"",
        "output": "[\"HAY\",\"ORO\",\"WEU\"]",
        "explanation": "Each word is printed vertically."
      },
      {
        "input": "s = \"TO BE OR NOT TO BE\"",
        "output": "[\"TBONTB\",\"OEROOE\",\"   T\"]",
        "explanation": "Trailing spaces is not allowed."
      },
      {
        "input": "s = \"CONTEST IS COMING\"",
        "output": "[\"CIC\",\"OSO\",\"N M\",\"T I\",\"E N\",\"S G\",\"T\"]"
      }
    ],
    "constraints": [
      "1 <= s.length <= 200",
      "s contains only upper case English letters.",
      "It's guaranteed that there is only one space between 2 words."
    ]
  },
  {
    "questionId": 1325,
    "title": "Delete Leaves With a Given Value",
    "titleSlug": "delete-leaves-with-a-given-value",
    "content": "<p>Given a binary tree `root` and an integer `target`, delete all the leaf nodes with value `target`.</p>\n<p>Note that once you delete a leaf node with value `target`, if it's parent node becomes a leaf node and has the value `target`, it should also be deleted (you need to continue doing that until you can't).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def delete_leaves_with_a_given_value(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2,3,2,null,2,4], target = 2",
        "output": "[1,null,3,null,4]",
        "explanation": "Leaf nodes in green with value (target = 2) are removed (Picture in left)."
      },
      {
        "input": "root = [1,3,3,3,2], target = 3",
        "output": "[1,3,null,null,2]"
      },
      {
        "input": "root = [1,2,null,2,null,2], target = 2",
        "output": "[1]",
        "explanation": "Leaf nodes in green with value (target = 2) are removed at each step."
      },
      {
        "input": "root = [1,1,1], target = 1",
        "output": "[]"
      },
      {
        "input": "root = [1,2,3], target = 1",
        "output": "[1,2,3]"
      }
    ],
    "constraints": [
      "1 <= target <= 1000",
      "The given binary tree will have between 1 and 3000 nodes.",
      "Each node's value is between [1, 1000]."
    ]
  },
  {
    "questionId": 1328,
    "title": "Break a Palindrome",
    "titleSlug": "break-a-palindrome",
    "content": "<p>Given a palindromic string of lowercase English letters `palindrome`, replace exactly one character with any lowercase English letter so that the resulting string is not a palindrome and that it is the lexicographically smallest one possible.</p>\n<p>Return the resulting string. If there is no way to replace a character to make it not a palindrome, return an empty string.</p>\n<p>A string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly smaller than the corresponding character in `b`. For example, `\"abcc\"` is lexicographically smaller than `\"abcd\"` because the first position they differ is at the fourth character, and `'c'` is smaller than `'d'`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def break_a_palindrome(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "palindrome = \"abccba\"",
        "output": "\"aaccba\"",
        "explanation": "There are many ways to make \"abccba\" not a palindrome, such as \"zbccba\", \"aaccba\", and \"abacba\"."
      },
      {
        "input": "palindrome = \"a\"",
        "output": "\"\"",
        "explanation": "There is no way to replace a single character to make \"a\" not a palindrome, so return an empty string."
      },
      {
        "input": "palindrome = \"aa\"",
        "output": "\"ab\""
      },
      {
        "input": "palindrome = \"aba\"",
        "output": "\"abb\""
      }
    ],
    "constraints": [
      "1 <= palindrome.length <= 1000",
      "palindrome consists of only lowercase English letters."
    ]
  },
  {
    "questionId": 1329,
    "title": "Sort the Matrix Diagonally",
    "titleSlug": "sort-the-matrix-diagonally",
    "content": "<p>A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. For example, the matrix diagonal starting from `mat[2][0]`, where `mat` is a `6 x 3` matrix, includes cells `mat[2][0]`, `mat[3][1]`, and `mat[4][2]`.</p>\n<p>Given an `m x n` matrix `mat` of integers, sort each matrix diagonal in ascending order and return the resulting matrix.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sort_the_matrix_diagonally(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]",
        "output": "[[1,1,1,1],[1,2,2,2],[1,2,3,3]]"
      },
      {
        "input": "mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]",
        "output": "[[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]"
      }
    ],
    "constraints": [
      "m == mat.length",
      "n == mat[i].length",
      "1 <= m, n <= 100",
      "1 <= mat[i][j] <= 100"
    ]
  },
  {
    "questionId": 1331,
    "title": "Rank Transform of an Array",
    "titleSlug": "rank-transform-of-an-array",
    "content": "<p>Given an array of integers `arr`, replace each element with its rank.</p>\n<p>The rank represents how large the element is. The rank has the following rules:\nRank is an integer starting from 1.</p>\n<p>The larger the element, the larger the rank. If two elements are equal, their rank must be the same.</p>\n<p>Rank should be as small as possible.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def rank_transform_of_an_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [40,10,20,30]",
        "output": "[4,1,2,3]",
        "explanation": "40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest."
      },
      {
        "input": "arr = [100,100,100]",
        "output": "[1,1,1]",
        "explanation": "Same elements share the same rank."
      },
      {
        "input": "arr = [37,12,28,9,100,56,80,5,12]",
        "output": "[5,3,4,2,8,6,7,1,3]"
      }
    ],
    "constraints": [
      "0 <= arr.length <= 105",
      "-109 <= arr[i] <= 109"
    ]
  },
  {
    "questionId": 1332,
    "title": "Remove Palindromic Subsequences",
    "titleSlug": "remove-palindromic-subsequences",
    "content": "<p>You are given a string `s` consisting only of letters `'a'` and `'b'`. In a single step you can remove one palindromic subsequence from `s`.</p>\n<p>Return the minimum number of steps to make the given string empty.</p>\n<p>A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.</p>\n<p>A string is called palindrome if is one that reads the same backward as well as forward.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def remove_palindromic_subsequences(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"ababa\"",
        "output": "1",
        "explanation": "s is already a palindrome, so its entirety can be removed in a single step."
      },
      {
        "input": "s = \"abb\"",
        "output": "2",
        "explanation": "\"abb\" -> \"bb\" -> \"\"."
      },
      {
        "input": "s = \"baabb\"",
        "output": "2",
        "explanation": "\"baabb\" -> \"b\" -> \"\"."
      }
    ],
    "constraints": [
      "1 <= s.length <= 1000",
      "s[i] is either 'a' or 'b'."
    ]
  },
  {
    "questionId": 1333,
    "title": "Filter Restaurants by Vegan-Friendly, Price and Distance",
    "titleSlug": "filter-restaurants-by-vegan-friendly-price-and-distance",
    "content": "<p>Given the array `restaurants` where  `restaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei]`. You have to filter the restaurants using three filters.</p>\n<p>The `veganFriendly` filter will be either true (meaning you should only include restaurants with `veganFriendlyi` set to true) or false (meaning you can include any restaurant). In addition, you have the filters `maxPrice` and `maxDistance` which are the maximum value for price and distance of restaurants you should consider respectively.</p>\n<p>Return the array of restaurant IDs after filtering, ordered by rating from highest to lowest. For restaurants with the same rating, order them by id from highest to lowest. For simplicity `veganFriendlyi` and `veganFriendly` take value 1 when it is true, and 0 when it is false.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def filter_restaurants_by_vegan_friendly_price_and_distance(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10",
        "output": "[3,1,5]",
        "explanation": "The restaurants are:"
      },
      {
        "input": "restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10",
        "output": "[4,3,2,1,5]",
        "explanation": "The restaurants are the same as in example 1, but in this case the filter veganFriendly = 0, therefore all restaurants are considered."
      },
      {
        "input": "restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3",
        "output": "[4,5]"
      }
    ],
    "constraints": [
      "1 <= restaurants.length <= 10^4",
      "restaurants[i].length == 5",
      "1 <= idi, ratingi, pricei, distancei <= 10^5",
      "1 <= maxPrice, maxDistance <= 10^5",
      "veganFriendlyi and veganFriendly are 0 or 1.",
      "All idi are distinct."
    ]
  },
  {
    "questionId": 1334,
    "title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance",
    "titleSlug": "find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance",
    "content": "<p>There are `n` cities numbered from `0` to `n-1`. Given the array `edges` where `edges[i] = [fromi, toi, weighti]` represents a bidirectional and weighted edge between cities `fromi` and `toi`, and given the integer `distanceThreshold`.</p>\n<p>Return the city with the smallest number of cities that are reachable through some path and whose distance is at most `distanceThreshold`, If there are multiple such cities, return the city with the greatest number.</p>\n<p>Notice that the distance of a path connecting cities i and j is equal to the sum of the edges' weights along that path.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_the_city_with_the_smallest_number_of_neighbors_at_a_threshold_distance(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4",
        "output": "3",
        "explanation": "The figure above describes the graph."
      },
      {
        "input": "n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2",
        "output": "0",
        "explanation": "The figure above describes the graph."
      }
    ],
    "constraints": [
      "2 <= n <= 100",
      "1 <= edges.length <= n * (n - 1) / 2",
      "edges[i].length == 3",
      "0 <= fromi < toi < n",
      "1 <= weighti, distanceThreshold <= 10^4",
      "All pairs (fromi, toi) are distinct."
    ]
  },
  {
    "questionId": 1337,
    "title": "The K Weakest Rows in a Matrix",
    "titleSlug": "the-k-weakest-rows-in-a-matrix",
    "content": "<p>You are given an `m x n` binary matrix `mat` of `1`'s (representing soldiers) and `0`'s (representing civilians). The soldiers are positioned in front of the civilians. That is, all the `1`'s will appear to the left of all the `0`'s in each row.</p>\n<p>A row `i` is weaker than a row `j` if one of the following is true:\nThe number of soldiers in row `i` is less than the number of soldiers in row `j`.</p>\n<p>Both rows have the same number of soldiers and `i < j`.</p>\n<p>Return the indices of the `k` weakest rows in the matrix ordered from weakest to strongest.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def the_k_weakest_rows_in_a_matrix(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "mat =",
        "output": "[2,0,3]",
        "explanation": "The number of soldiers in each row is:"
      },
      {
        "input": "mat =",
        "output": "[0,2]",
        "explanation": "The number of soldiers in each row is:"
      }
    ],
    "constraints": [
      "m == mat.length",
      "n == mat[i].length",
      "2 <= n, m <= 100",
      "1 <= k <= m",
      "matrix[i][j] is either 0 or 1."
    ]
  },
  {
    "questionId": 1338,
    "title": "Reduce Array Size to The Half",
    "titleSlug": "reduce-array-size-to-the-half",
    "content": "<p>Given an array `arr`.  You can choose a set of integers and remove all the occurrences of these integers in the array.</p>\n<p>Return the minimum size of the set so that at least half of the integers of the array are removed.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def reduce_array_size_to_the_half(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [3,3,3,3,5,5,5,2,2,7]",
        "output": "2",
        "explanation": "Choosing {3,7} will make the new array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the old array)."
      },
      {
        "input": "arr = [7,7,7,7,7,7]",
        "output": "1",
        "explanation": "The only possible set you can choose is {7}. This will make the new array empty."
      },
      {
        "input": "arr = [1,9]",
        "output": "1"
      },
      {
        "input": "arr = [1000,1000,3,7]",
        "output": "1"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10]",
        "output": "5"
      }
    ],
    "constraints": [
      "1 <= arr.length <= 10^5",
      "arr.length is even.",
      "1 <= arr[i] <= 10^5"
    ]
  },
  {
    "questionId": 1339,
    "title": "Maximum Product of Splitted Binary Tree",
    "titleSlug": "maximum-product-of-splitted-binary-tree",
    "content": "<p>Given a binary tree `root`. Split the binary tree into two subtrees by removing 1 edge such that the product of the sums of the subtrees are maximized.</p>\n<p>Since the answer may be too large, return it modulo 10^9 + 7.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_product_of_splitted_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2,3,4,5,6]",
        "output": "110",
        "explanation": "Remove the red edge and get 2 binary trees with sum 11 and 10. Their product is 110 (11*10)"
      },
      {
        "input": "root = [1,null,2,3,4,null,null,5,6]",
        "output": "90",
        "explanation": "Remove the red edge and get 2 binary trees with sum 15 and 6.Their product is 90 (15*6)"
      },
      {
        "input": "root = [2,3,9,10,7,8,6,5,4,11,1]",
        "output": "1025"
      },
      {
        "input": "root = [1,1]",
        "output": "1"
      }
    ],
    "constraints": [
      "Each tree has at most 50000 nodes and at least 2 nodes.",
      "Each node's value is between [1, 10000]."
    ]
  },
  {
    "questionId": 1342,
    "title": "Number of Steps to Reduce a Number to Zero",
    "titleSlug": "number-of-steps-to-reduce-a-number-to-zero",
    "content": "<p>Given a non-negative integer `num`, return the number of steps to reduce it to zero. If the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_steps_to_reduce_a_number_to_zero(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "num = 14",
        "output": "6",
        "explanation": "Step 1) 14 is even; divide by 2 and obtain 7."
      },
      {
        "input": "num = 8",
        "output": "4",
        "explanation": "Step 1) 8 is even; divide by 2 and obtain 4."
      },
      {
        "input": "num = 123",
        "output": "12"
      }
    ],
    "constraints": [
      "0 <= num <= 10^6"
    ]
  },
  {
    "questionId": 1343,
    "title": "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold",
    "titleSlug": "number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold",
    "content": "<p>Given an array of integers `arr` and two integers `k` and `threshold`.</p>\n<p>Return the number of sub-arrays of size `k` and average greater than or equal to `threshold`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_sub_arrays_of_size_k_and_average_greater_than_or_equal_to_threshold(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4",
        "output": "3",
        "explanation": "Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold)."
      },
      {
        "input": "arr = [1,1,1,1,1], k = 1, threshold = 0",
        "output": "5"
      },
      {
        "input": "arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5",
        "output": "6",
        "explanation": "The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers."
      },
      {
        "input": "arr = [7,7,7,7,7,7,7], k = 7, threshold = 7",
        "output": "1"
      },
      {
        "input": "arr = [4,4,4,4], k = 4, threshold = 1",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= arr.length <= 10^5",
      "1 <= arr[i] <= 10^4",
      "1 <= k <= arr.length",
      "0 <= threshold <= 10^4"
    ]
  },
  {
    "questionId": 1344,
    "title": "Angle Between Hands of a Clock",
    "titleSlug": "angle-between-hands-of-a-clock",
    "content": "<p>Given two numbers, `hour` and `minutes`. Return the smaller angle (in degrees) formed between the `hour` and the `minute` hand.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def angle_between_hands_of_a_clock(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "hour = 12, minutes = 30",
        "output": "165"
      },
      {
        "input": "hour = 3, minutes = 30",
        "output": "75"
      },
      {
        "input": "hour = 3, minutes = 15",
        "output": "7.5"
      },
      {
        "input": "hour = 4, minutes = 50",
        "output": "155"
      },
      {
        "input": "hour = 12, minutes = 0",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= hour <= 12",
      "0 <= minutes <= 59",
      "Answers within 10^-5 of the actual value will be accepted as correct."
    ]
  },
  {
    "questionId": 1346,
    "title": "Check If N and Its Double Exist",
    "titleSlug": "check-if-n-and-its-double-exist",
    "content": "<p>Given an array `arr` of integers, check if there exists two integers `N` and `M` such that `N` is the double of `M` ( i.e. `N = 2 * M`).</p>\n<p>More formally check if there exists two indices `i` and `j` such that :\n`i != j`\n`0 <= i, j < arr.length`\n`arr[i] == 2 * arr[j]`</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def check_if_n_and_its_double_exist(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [10,2,5,3]",
        "output": "true",
        "explanation": "N` = 10` is the double of M` = 5`,that is, `10 = 2 * 5`."
      },
      {
        "input": "arr = [7,1,14,11]",
        "output": "true",
        "explanation": "N` = 14` is the double of M` = 7`,that is, `14 = 2 * 7`."
      },
      {
        "input": "arr = [3,1,7,11]",
        "output": "false",
        "explanation": "In this case does not exist N and M, such that N = 2 * M."
      }
    ],
    "constraints": [
      "2 <= arr.length <= 500",
      "-10^3 <= arr[i] <= 10^3"
    ]
  },
  {
    "questionId": 1347,
    "title": "Minimum Number of Steps to Make Two Strings Anagram",
    "titleSlug": "minimum-number-of-steps-to-make-two-strings-anagram",
    "content": "<p>Given two equal-size strings `s` and `t`. In one step you can choose any character of `t` and replace it with another character.</p>\n<p>Return the minimum number of steps to make `t` an anagram of `s`.</p>\n<p>An Anagram of a string is a string that contains the same characters with a different (or the same) ordering.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_number_of_steps_to_make_two_strings_anagram(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"bab\", t = \"aba\"",
        "output": "1",
        "explanation": "Replace the first 'a' in t with b, t = \"bba\" which is anagram of s."
      },
      {
        "input": "s = \"leetcode\", t = \"practice\"",
        "output": "5",
        "explanation": "Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s."
      },
      {
        "input": "s = \"anagram\", t = \"mangaar\"",
        "output": "0",
        "explanation": "\"anagram\" and \"mangaar\" are anagrams."
      },
      {
        "input": "s = \"xxyyzz\", t = \"xxyyzz\"",
        "output": "0"
      },
      {
        "input": "s = \"friend\", t = \"family\"",
        "output": "4"
      }
    ],
    "constraints": [
      "1 <= s.length <= 50000",
      "s.length == t.length",
      "s and t contain lower-case English letters only."
    ]
  },
  {
    "questionId": 1348,
    "title": "Tweet Counts Per Frequency",
    "titleSlug": "tweet-counts-per-frequency",
    "content": "<p>A social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time. These periods can be partitioned into smaller time chunks based on a certain frequency (every minute, hour, or day).</p>\n<p>For example, the period `[10, 10000]` (in seconds) would be partitioned into the following time chunks with these frequencies:\nEvery minute (60-second chunks): `[10,69]`, `[70,129]`, `[130,189]`, `...`, `[9970,10000]`\nEvery hour (3600-second chunks): `[10,3609]`, `[3610,7209]`, `[7210,10000]`\nEvery day (86400-second chunks): `[10,10000]`\nNotice that the last chunk may be shorter than the specified frequency's chunk size and will always end with the end time of the period (`10000` in the above example).</p>\n<p>Design and implement an API to help the company with their analysis.</p>\n<p>Implement the `TweetCounts` class:\n`TweetCounts()` Initializes the `TweetCounts` object.</p>\n<p>`void recordTweet(String tweetName, int time)` Stores the `tweetName` at the recorded `time` (in seconds).</p>\n<p>`List<Integer> getTweetCountsPerFrequency(String freq, String tweetName, int startTime, int endTime)` Returns a list of integers representing the number of tweets with `tweetName` in each time chunk for the given period of time `[startTime, endTime]` (in seconds) and frequency `freq`.</p>\n<p>`freq` is one of `\"minute\"`, `\"hour\"`, or `\"day\"` representing a frequency of every minute, hour, or day respectively.</p>\n<p>Example:\nInput\n[\"TweetCounts\",\"recordTweet\",\"recordTweet\",\"recordTweet\",\"getTweetCountsPerFrequency\",\"getTweetCountsPerFrequency\",\"recordTweet\",\"getTweetCountsPerFrequency\"]\n[[],[\"tweet3\",0],[\"tweet3\",60],[\"tweet3\",10],[\"minute\",\"tweet3\",0,59],[\"minute\",\"tweet3\",0,60],[\"tweet3\",120],[\"hour\",\"tweet3\",0,210]]\nOutput\n[null,null,null,null,[2],[2,1],null,[4]]\nExplanation\nTweetCounts tweetCounts = new TweetCounts();\ntweetCounts.recordTweet(\"tweet3\", 0);                              // New tweet \"tweet3\" at time 0\ntweetCounts.recordTweet(\"tweet3\", 60);                             // New tweet \"tweet3\" at time 60\ntweetCounts.recordTweet(\"tweet3\", 10);                             // New tweet \"tweet3\" at time 10\ntweetCounts.getTweetCountsPerFrequency(\"minute\", \"tweet3\", 0, 59); // return [2]; chunk [0,59] had 2 tweets\ntweetCounts.getTweetCountsPerFrequency(\"minute\", \"tweet3\", 0, 60); // return [2,1]; chunk [0,59] had 2 tweets, chunk [60,60] had 1 tweet\ntweetCounts.recordTweet(\"tweet3\", 120);                            // New tweet \"tweet3\" at time 120\ntweetCounts.getTweetCountsPerFrequency(\"hour\", \"tweet3\", 0, 210);  // return [4]; chunk [0,210] had 4 tweets</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def tweet_counts_per_frequency(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "0 <= time, startTime, endTime <= 109",
      "0 <= endTime - startTime <= 104",
      "There will be at most 104 calls in total to recordTweet and getTweetCountsPerFrequency."
    ]
  },
  {
    "questionId": 1351,
    "title": "Count Negative Numbers in a Sorted Matrix",
    "titleSlug": "count-negative-numbers-in-a-sorted-matrix",
    "content": "<p>Given a `m x n` matrix `grid` which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in `grid`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_negative_numbers_in_a_sorted_matrix(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]",
        "output": "8",
        "explanation": "There are 8 negatives number in the matrix."
      },
      {
        "input": "grid = [[3,2],[1,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,-1],[-1,-1]]",
        "output": "3"
      },
      {
        "input": "grid = [[-1]]",
        "output": "1"
      }
    ],
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m, n <= 100",
      "-100 <= grid[i][j] <= 100",
      "Follow up: Could you find an O(n + m) solution?"
    ]
  },
  {
    "questionId": 1352,
    "title": "Product of the Last K Numbers",
    "titleSlug": "product-of-the-last-k-numbers",
    "content": "<p>Implement the class `ProductOfNumbers` that supports two methods:\n1.` add(int num)`\nAdds the number `num` to the back of the current list of numbers.</p>\n<p>2.` getProduct(int k)`\nReturns the product of the last `k` numbers in the current list.</p>\n<p>You can assume that always the current list has at least `k` numbers.</p>\n<p>At any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.</p>\n<p>Example:\nInput\n[\"ProductOfNumbers\",\"add\",\"add\",\"add\",\"add\",\"add\",\"getProduct\",\"getProduct\",\"getProduct\",\"add\",\"getProduct\"]\n[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]\nOutput\n[null,null,null,null,null,null,20,40,0,null,32]\nExplanation\nProductOfNumbers productOfNumbers = new ProductOfNumbers();\nproductOfNumbers.add(3);        // [3]\nproductOfNumbers.add(0);        // [3,0]\nproductOfNumbers.add(2);        // [3,0,2]\nproductOfNumbers.add(5);        // [3,0,2,5]\nproductOfNumbers.add(4);        // [3,0,2,5,4]\nproductOfNumbers.getProduct(2); // return 20. The product of the last 2 numbers is 5 * 4 = 20\nproductOfNumbers.getProduct(3); // return 40. The product of the last 3 numbers is 2 * 5 * 4 = 40\nproductOfNumbers.getProduct(4); // return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0\nproductOfNumbers.add(8);        // [3,0,2,5,4,8]\nproductOfNumbers.getProduct(2); // return 32. The product of the last 2 numbers is 4 * 8 = 32</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def product_of_the_last_k_numbers(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "There will be at most 40000 operations considering both add and getProduct.",
      "0 <= num <= 100",
      "1 <= k <= 40000"
    ]
  },
  {
    "questionId": 1353,
    "title": "Maximum Number of Events That Can Be Attended",
    "titleSlug": "maximum-number-of-events-that-can-be-attended",
    "content": "<p>Given an array of `events` where `events[i] = [startDayi, endDayi]`. Every event `i` starts at `startDayi` and ends at `endDayi`.</p>\n<p>You can attend an event `i` at any day `d` where `startTimei <= d <= endTimei`. Notice that you can only attend one event at any time `d`.</p>\n<p>Return the maximum number of events you can attend.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_number_of_events_that_can_be_attended(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "events = [[1,2],[2,3],[3,4]]",
        "output": "3",
        "explanation": "You can attend all the three events."
      },
      {
        "input": "events= [[1,2],[2,3],[3,4],[1,2]]",
        "output": "4"
      },
      {
        "input": "events = [[1,4],[4,4],[2,2],[3,4],[1,1]]",
        "output": "4"
      },
      {
        "input": "events = [[1,100000]]",
        "output": "1"
      },
      {
        "input": "events = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7]]",
        "output": "7"
      }
    ],
    "constraints": [
      "1 <= events.length <= 105",
      "events[i].length == 2",
      "1 <= startDayi <= endDayi <= 105"
    ]
  },
  {
    "questionId": 1356,
    "title": "Sort Integers by The Number of 1 Bits",
    "titleSlug": "sort-integers-by-the-number-of-1-bits",
    "content": "<p>Given an integer array `arr`. You have to sort the integers in the array in ascending order by the number of 1's in their binary representation and in case of two or more integers have the same number of 1's you have to sort them in ascending order.</p>\n<p>Return the sorted array.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sort_integers_by_the_number_of_1_bits(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [0,1,2,3,4,5,6,7,8]",
        "output": "[0,1,2,4,8,3,5,6,7]"
      },
      {
        "input": "arr = [1024,512,256,128,64,32,16,8,4,2,1]",
        "output": "[1,2,4,8,16,32,64,128,256,512,1024]"
      },
      {
        "input": "arr = [10000,10000]",
        "output": "[10000,10000]"
      },
      {
        "input": "arr = [2,3,5,7,11,13,17,19]",
        "output": "[2,3,5,17,7,11,13,19]"
      },
      {
        "input": "arr = [10,100,1000,10000]",
        "output": "[10,100,10000,1000]"
      }
    ],
    "constraints": [
      "1 <= arr.length <= 500",
      "0 <= arr[i] <= 10^4"
    ]
  },
  {
    "questionId": 1357,
    "title": "Apply Discount Every n Orders",
    "titleSlug": "apply-discount-every-n-orders",
    "content": "<p>There is a sale in a supermarket, there will be a `discount` every `n` customer.</p>\n<p>There are some products in the supermarket where the id of the `i-th` product is `products[i]` and the price per unit of this product is `prices[i]`.</p>\n<p>The system will count the number of customers and when the `n-th` customer arrive he/she will have a `discount` on the bill. (i.e if the cost is `x` the new cost is `x - (discount * x) / 100`). Then the system will start counting customers again.</p>\n<p>The customer orders a certain amount of each product where `product[i]` is the id of the `i-th` product the customer ordered and `amount[i]` is the number of units the customer ordered of that product.</p>\n<p>Implement the `Cashier` class:\n`Cashier(int n, int discount, int[] products, int[] prices)` Initializes the object with `n`, the `discount`, the `products` and their `prices`.</p>\n<p>`double getBill(int[] product, int[] amount)` returns the value of the bill and apply the discount if needed. Answers within `10^-5` of the actual value will be accepted as correct.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def apply_discount_every_n_orders(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= n <= 10^4",
      "0 <= discount <= 100",
      "1 <= products.length <= 200",
      "1 <= products[i] <= 200",
      "There are not repeated elements in the array products.",
      "prices.length == products.length",
      "1 <= prices[i] <= 1000",
      "1 <= product.length <= products.length",
      "product[i] exists in products.",
      "amount.length == product.length",
      "1 <= amount[i] <= 1000",
      "At most 1000 calls will be made to getBill.",
      "Answers within 10^-5 of the actual value will be accepted as correct."
    ]
  },
  {
    "questionId": 1358,
    "title": "Number of Substrings Containing All Three Characters",
    "titleSlug": "number-of-substrings-containing-all-three-characters",
    "content": "<p>Given a string `s` consisting only of characters a, b and c.</p>\n<p>Return the number of substrings containing at least one occurrence of all these characters a, b and c.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_substrings_containing_all_three_characters(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"abcabc\"",
        "output": "10",
        "explanation": "The substrings containing at least one occurrence of the characters a, b and c are \"abc\", \"abca\", \"abcab\", \"abcabc\", \"bca\", \"bcab\", \"bcabc\", \"cab\", \"cabc\" and \"abc\" (again)."
      },
      {
        "input": "s = \"aaacb\"",
        "output": "3",
        "explanation": "The substrings containing at least one occurrence of the characters a, b and c are \"aaacb\", \"aacb\" and \"acb\"."
      },
      {
        "input": "s = \"abc\"",
        "output": "1"
      }
    ],
    "constraints": [
      "3 <= s.length <= 5 x 10^4",
      "s only consists of a, b or c characters."
    ]
  },
  {
    "questionId": 1360,
    "title": "Number of Days Between Two Dates",
    "titleSlug": "number-of-days-between-two-dates",
    "content": "<p>Write a program to count the number of days between two dates.</p>\n<p>The two dates are given as strings, their format is `YYYY-MM-DD` as shown in the examples.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_days_between_two_dates(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "date1 = \"2019-06-29\", date2 = \"2019-06-30\"",
        "output": "1"
      },
      {
        "input": "date1 = \"2020-01-15\", date2 = \"2019-12-31\"",
        "output": "15"
      }
    ],
    "constraints": [
      "The given dates are valid dates between the years 1971 and 2100."
    ]
  },
  {
    "questionId": 1361,
    "title": "Validate Binary Tree Nodes",
    "titleSlug": "validate-binary-tree-nodes",
    "content": "<p>You have `n` binary tree nodes numbered from `0` to `n - 1` where node `i` has two children `leftChild[i]` and `rightChild[i]`, return `true` if and only if all the given nodes form exactly one valid binary tree.</p>\n<p>If node `i` has no left child then `leftChild[i]` will equal `-1`, similarly for the right child.</p>\n<p>Note that the nodes have no values and that we only use the node numbers in this problem.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def validate_binary_tree_nodes(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]",
        "output": "true"
      },
      {
        "input": "n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]",
        "output": "false"
      },
      {
        "input": "n = 2, leftChild = [1,0], rightChild = [-1,-1]",
        "output": "false"
      },
      {
        "input": "n = 6, leftChild = [1,-1,-1,4,-1,-1], rightChild = [2,-1,-1,5,-1,-1]",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= n <= 104",
      "leftChild.length == rightChild.length == n",
      "-1 <= leftChild[i], rightChild[i] <= n - 1"
    ]
  },
  {
    "questionId": 1362,
    "title": "Closest Divisors",
    "titleSlug": "closest-divisors",
    "content": "<p>Given an integer `num`, find the closest two integers in absolute difference whose product equals `num + 1` or `num + 2`.</p>\n<p>Return the two integers in any order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def closest_divisors(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "num = 8",
        "output": "[3,3]",
        "explanation": "For num + 1 = 9, the closest divisors are 3 & 3, for num + 2 = 10, the closest divisors are 2 & 5, hence 3 & 3 is chosen."
      },
      {
        "input": "num = 123",
        "output": "[5,25]"
      },
      {
        "input": "num = 999",
        "output": "[40,25]"
      }
    ],
    "constraints": [
      "1 <= num <= 10^9"
    ]
  },
  {
    "questionId": 1365,
    "title": "How Many Numbers Are Smaller Than the Current Number",
    "titleSlug": "how-many-numbers-are-smaller-than-the-current-number",
    "content": "<p>Given the array `nums`, for each `nums[i]` find out how many numbers in the array are smaller than it. That is, for each `nums[i]` you have to count the number of valid `j's` such that `j != i` and `nums[j] < nums[i]`.</p>\n<p>Return the answer in an array.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def how_many_numbers_are_smaller_than_the_current_number(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [8,1,2,2,3]",
        "output": "[4,0,1,1,3]",
        "explanation": "For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3)."
      },
      {
        "input": "nums = [6,5,4,8]",
        "output": "[2,1,0,3]"
      },
      {
        "input": "nums = [7,7,7,7]",
        "output": "[0,0,0,0]"
      }
    ],
    "constraints": [
      "2 <= nums.length <= 500",
      "0 <= nums[i] <= 100"
    ]
  },
  {
    "questionId": 1366,
    "title": "Rank Teams by Votes",
    "titleSlug": "rank-teams-by-votes",
    "content": "<p>In a special ranking system, each voter gives a rank from highest to lowest to all teams participated in the competition.</p>\n<p>The ordering of teams is decided by who received the most position-one votes. If two or more teams tie in the first position, we consider the second position to resolve the conflict, if they tie again, we continue this process until the ties are resolved. If two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter.</p>\n<p>Given an array of strings `votes` which is the votes of all voters in the ranking systems. Sort all teams according to the ranking system described above.</p>\n<p>Return a string of all teams sorted by the ranking system.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def rank_teams_by_votes(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "votes = [\"ABC\",\"ACB\",\"ABC\",\"ACB\",\"ACB\"]",
        "output": "\"ACB\"",
        "explanation": "Team A was ranked first place by 5 voters. No other team was voted as first place so team A is the first team."
      },
      {
        "input": "votes = [\"WXYZ\",\"XYZW\"]",
        "output": "\"XWYZ\"",
        "explanation": "X is the winner due to tie-breaking rule. X has same votes as W for the first position but X has one vote as second position while W doesn't have any votes as second position."
      },
      {
        "input": "votes = [\"ZMNAGUEDSJYLBOPHRQICWFXTVK\"]",
        "output": "\"ZMNAGUEDSJYLBOPHRQICWFXTVK\"",
        "explanation": "Only one voter so his votes are used for the ranking."
      },
      {
        "input": "votes = [\"BCA\",\"CAB\",\"CBA\",\"ABC\",\"ACB\",\"BAC\"]",
        "output": "\"ABC\"",
        "explanation": "Team A was ranked first by 2 voters, second by 2 voters and third by 2 voters."
      },
      {
        "input": "votes = [\"M\",\"M\",\"M\",\"M\"]",
        "output": "\"M\"",
        "explanation": "Only team M in the competition so it has the first rank."
      }
    ],
    "constraints": [
      "1 <= votes.length <= 1000",
      "1 <= votes[i].length <= 26",
      "votes[i].length == votes[j].length for 0 <= i, j < votes.length.",
      "votes[i][j] is an English upper-case letter.",
      "All characters of votes[i] are unique.",
      "All the characters that occur in votes[0] also occur in votes[j] where 1 <= j < votes.length."
    ]
  },
  {
    "questionId": 1367,
    "title": "Linked List in Binary Tree",
    "titleSlug": "linked-list-in-binary-tree",
    "content": "<p>Given a binary tree `root` and a linked list with `head` as the first node. \nReturn True if all the elements in the linked list starting from the `head` correspond to some downward path connected in the binary tree otherwise return False.</p>\n<p>In this context downward path means a path that starts at some node and goes downwards.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def linked_list_in_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]",
        "output": "true",
        "explanation": "Nodes in blue form a subpath in the binary Tree."
      },
      {
        "input": "head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]",
        "output": "true"
      },
      {
        "input": "head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]",
        "output": "false",
        "explanation": "There is no path in the binary tree that contains all the elements of the linked list from `head`."
      }
    ],
    "constraints": [
      "The number of nodes in the tree will be in the range [1, 2500].",
      "The number of nodes in the list will be in the range [1, 100].",
      "1 <= Node.val <= 100 for each node in the linked list and binary tree."
    ]
  },
  {
    "questionId": 1370,
    "title": "Increasing Decreasing String",
    "titleSlug": "increasing-decreasing-string",
    "content": "<p>Given a string `s`. You should re-order the string using the following algorithm:\nPick the smallest character from `s` and append it to the result.</p>\n<p>Pick the smallest character from `s` which is greater than the last appended character to the result and append it.</p>\n<p>Repeat step 2 until you cannot pick more characters.</p>\n<p>Pick the largest character from `s` and append it to the result.</p>\n<p>Pick the largest character from `s` which is smaller than the last appended character to the result and append it.</p>\n<p>Repeat step 5 until you cannot pick more characters.</p>\n<p>Repeat the steps from 1 to 6 until you pick all characters from `s`.</p>\n<p>In each step, If the smallest or the largest character appears more than once you can choose any occurrence and append it to the result.</p>\n<p>Return the result string after sorting `s` with this algorithm.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def increasing_decreasing_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"aaaabbbbcccc\"",
        "output": "\"abccbaabccba\"",
        "explanation": "After steps 1, 2 and 3 of the first iteration, result = \"abc\""
      },
      {
        "input": "s = \"rat\"",
        "output": "\"art\"",
        "explanation": "The word \"rat\" becomes \"art\" after re-ordering it with the mentioned algorithm."
      },
      {
        "input": "s = \"leetcode\"",
        "output": "\"cdelotee\""
      },
      {
        "input": "s = \"ggggggg\"",
        "output": "\"ggggggg\""
      },
      {
        "input": "s = \"spo\"",
        "output": "\"ops\""
      }
    ],
    "constraints": [
      "1 <= s.length <= 500",
      "s contains only lower-case English letters."
    ]
  },
  {
    "questionId": 1371,
    "title": "Find the Longest Substring Containing Vowels in Even Counts",
    "titleSlug": "find-the-longest-substring-containing-vowels-in-even-counts",
    "content": "<p>Given the string `s`, return the size of the longest substring containing each vowel an even number of times. That is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_the_longest_substring_containing_vowels_in_even_counts(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"eleetminicoworoep\"",
        "output": "13",
        "explanation": "The longest substring is \"leetminicowor\" which contains two each of the vowels: e, i and o and zero of the vowels: a and u."
      },
      {
        "input": "s = \"leetcodeisgreat\"",
        "output": "5",
        "explanation": "The longest substring is \"leetc\" which contains two e's."
      },
      {
        "input": "s = \"bcbcbc\"",
        "output": "6",
        "explanation": "In this case, the given string \"bcbcbc\" is the longest because all vowels: a, e, i, o and u appear zero times."
      }
    ],
    "constraints": [
      "1 <= s.length <= 5 x 10^5",
      "s contains only lowercase English letters."
    ]
  },
  {
    "questionId": 1372,
    "title": "Longest ZigZag Path in a Binary Tree",
    "titleSlug": "longest-zigzag-path-in-a-binary-tree",
    "content": "<p>You are given the `root` of a binary tree.</p>\n<p>A ZigZag path for a binary tree is defined as follow:\nChoose any node in the binary tree and a direction (right or left).</p>\n<p>If the current direction is right, move to the right child of the current node; otherwise, move to the left child.</p>\n<p>Change the direction from right to left or from left to right.</p>\n<p>Repeat the second and third steps until you can't move in the tree.</p>\n<p>Zigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0).</p>\n<p>Return the longest ZigZag path contained in that tree.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_zigzag_path_in_a_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1]",
        "output": "3",
        "explanation": "Longest ZigZag path in blue nodes (right -> left -> right)."
      },
      {
        "input": "root = [1,1,1,null,1,null,null,1,1,null,1]",
        "output": "4",
        "explanation": "Longest ZigZag path in blue nodes (left -> right -> left -> right)."
      },
      {
        "input": "root = [1]",
        "output": "0"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 5 * 104].",
      "1 <= Node.val <= 100"
    ]
  },
  {
    "questionId": 1374,
    "title": "Generate a String With Characters That Have Odd Counts",
    "titleSlug": "generate-a-string-with-characters-that-have-odd-counts",
    "content": "<p>Given an integer `n`, return a string with `n` characters such that each character in such string occurs an odd number of times.</p>\n<p>The returned string must contain only lowercase English letters. If there are multiples valid strings, return any of them.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def generate_a_string_with_characters_that_have_odd_counts(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 4",
        "output": "\"pppz\"",
        "explanation": "\"pppz\" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. Note that there are many other valid strings such as \"ohhh\" and \"love\"."
      },
      {
        "input": "n = 2",
        "output": "\"xy\"",
        "explanation": "\"xy\" is a valid string since the characters 'x' and 'y' occur once. Note that there are many other valid strings such as \"ag\" and \"ur\"."
      },
      {
        "input": "n = 7",
        "output": "\"holasss\""
      }
    ],
    "constraints": [
      "1 <= n <= 500"
    ]
  },
  {
    "questionId": 1375,
    "title": "Bulb Switcher III",
    "titleSlug": "bulb-switcher-iii",
    "content": "<p>There is a room with `n` bulbs, numbered from `1` to `n`, arranged in a row from left to right. Initially, all the bulbs are turned off.</p>\n<p>At moment k (for k from `0` to `n - 1`), we turn on the `light[k]` bulb. A bulb change color to blue only if it is on and all the previous bulbs (to the left) are turned on too.</p>\n<p>Return the number of moments in which all turned on bulbs are blue.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def bulb_switcher_iii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "light = [2,1,3,5,4]",
        "output": "3",
        "explanation": "All bulbs turned on, are blue at the moment 1, 2 and 4."
      },
      {
        "input": "light = [3,2,4,1,5]",
        "output": "2",
        "explanation": "All bulbs turned on, are blue at the moment 3, and 4 (index-0)."
      },
      {
        "input": "light = [4,1,2,3]",
        "output": "1",
        "explanation": "All bulbs turned on, are blue at the moment 3 (index-0)."
      },
      {
        "input": "light = [2,1,4,3,6,5]",
        "output": "3"
      },
      {
        "input": "light = [1,2,3,4,5,6]",
        "output": "6"
      }
    ],
    "constraints": [
      "n == light.length",
      "1 <= n <= 5 * 10^4",
      "light is a permutation of  [1, 2, ..., n]"
    ]
  },
  {
    "questionId": 1376,
    "title": "Time Needed to Inform All Employees",
    "titleSlug": "time-needed-to-inform-all-employees",
    "content": "<p>A company has `n` employees with a unique ID for each employee from `0` to `n - 1`. The head of the company is the one with `headID`.</p>\n<p>Each employee has one direct manager given in the `manager` array where `manager[i]` is the direct manager of the `i-th` employee, `manager[headID] = -1`. Also, it is guaranteed that the subordination relationships have a tree structure.</p>\n<p>The head of the company wants to inform all the company employees of an urgent piece of news. He will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news.</p>\n<p>The `i-th` employee needs `informTime[i]` minutes to inform all of his direct subordinates (i.e., After informTime[i] minutes, all his direct subordinates can start spreading the news).</p>\n<p>Return the number of minutes needed to inform all the employees about the urgent news.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def time_needed_to_inform_all_employees(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 1, headID = 0, manager = [-1], informTime = [0]",
        "output": "0",
        "explanation": "The head of the company is the only employee in the company."
      },
      {
        "input": "n = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0]",
        "output": "1",
        "explanation": "The head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all."
      },
      {
        "input": "n = 7, headID = 6, manager = [1,2,3,4,5,6,-1], informTime = [0,6,5,4,3,2,1]",
        "output": "21",
        "explanation": "The head has id = 6. He will inform employee with id = 5 in 1 minute."
      },
      {
        "input": "n = 15, headID = 0, manager = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6], informTime = [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0]",
        "output": "3",
        "explanation": "The first minute the head will inform employees 1 and 2."
      },
      {
        "input": "n = 4, headID = 2, manager = [3,3,-1,2], informTime = [0,0,162,914]",
        "output": "1076"
      }
    ],
    "constraints": [
      "1 <= n <= 105",
      "0 <= headID < n",
      "manager.length == n",
      "0 <= manager[i] < n",
      "manager[headID] == -1",
      "informTime.length == n",
      "0 <= informTime[i] <= 1000",
      "informTime[i] == 0 if employee i has no subordinates.",
      "It is guaranteed that all the employees can be informed."
    ]
  },
  {
    "questionId": 1379,
    "title": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree",
    "titleSlug": "find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree",
    "content": "<p>Given two binary trees `original` and `cloned` and given a reference to a node `target` in the original tree.</p>\n<p>The `cloned` tree is a copy of the `original` tree.</p>\n<p>Return a reference to the same node in the `cloned` tree.</p>\n<p>Note that you are not allowed to change any of the two trees or the `target` node and the answer must be a reference to a node in the `cloned` tree.</p>\n<p>Follow up: Solve the problem if repeated values on the tree are allowed.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_a_corresponding_node_of_a_binary_tree_in_a_clone_of_that_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "tree = [7,4,3,null,null,6,19], target = 3",
        "output": "3",
        "explanation": "In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree."
      },
      {
        "input": "tree = [7], target =  7",
        "output": "7"
      },
      {
        "input": "tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4",
        "output": "4"
      },
      {
        "input": "tree = [1,2,3,4,5,6,7,8,9,10], target = 5",
        "output": "5"
      },
      {
        "input": "tree = [1,2,null,3], target = 2",
        "output": "2"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 10^4].",
      "The values of the nodes of the tree are unique.",
      "target node is a node from the original tree and is not null."
    ]
  },
  {
    "questionId": 1380,
    "title": "Lucky Numbers in a Matrix",
    "titleSlug": "lucky-numbers-in-a-matrix",
    "content": "<p>Given a `m * n` matrix of distinct numbers, return all lucky numbers in the matrix in any order.</p>\n<p>A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def lucky_numbers_in_a_matrix(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "matrix = [[3,7,8],[9,11,13],[15,16,17]]",
        "output": "[15]",
        "explanation": "15 is the only lucky number since it is the minimum in its row and the maximum in its column"
      },
      {
        "input": "matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]",
        "output": "[12]",
        "explanation": "12 is the only lucky number since it is the minimum in its row and the maximum in its column."
      },
      {
        "input": "matrix = [[7,8],[1,2]]",
        "output": "[7]"
      }
    ],
    "constraints": [
      "m == mat.length",
      "n == mat[i].length",
      "1 <= n, m <= 50",
      "1 <= matrix[i][j] <= 10^5.",
      "All elements in the matrix are distinct."
    ]
  },
  {
    "questionId": 1381,
    "title": "Design a Stack With Increment Operation",
    "titleSlug": "design-a-stack-with-increment-operation",
    "content": "<p>Design a stack which supports the following operations.</p>\n<p>Implement the `CustomStack` class:\n`CustomStack(int maxSize)` Initializes the object with `maxSize` which is the maximum number of elements in the stack or do nothing if the stack reached the `maxSize`.</p>\n<p>`void push(int x)` Adds `x` to the top of the stack if the stack hasn't reached the `maxSize`.</p>\n<p>`int pop()` Pops and returns the top of stack or -1 if the stack is empty.</p>\n<p>`void inc(int k, int val)` Increments the bottom `k` elements of the stack by `val`. If there are less than `k` elements in the stack, just increment all the elements in the stack.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def design_a_stack_with_increment_operation(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= maxSize <= 1000",
      "1 <= x <= 1000",
      "1 <= k <= 1000",
      "0 <= val <= 100",
      "At most 1000 calls will be made to each method of increment, push and pop each separately."
    ]
  },
  {
    "questionId": 1382,
    "title": "Balance a Binary Search Tree",
    "titleSlug": "balance-a-binary-search-tree",
    "content": "<p>Given a binary search tree, return a balanced binary search tree with the same node values.</p>\n<p>A binary search tree is balanced if and only if the depth of the two subtrees of every node never differ by more than 1.</p>\n<p>If there is more than one answer, return any of them.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def balance_a_binary_search_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,null,2,null,3,null,4,null,null]",
        "output": "[2,1,3,null,null,null,4]",
        "explanation": "This is not the only correct answer, [3,1,4,null,2,null,null] is also correct."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is between 1 and 10^4.",
      "The tree nodes will have distinct values between 1 and 10^5."
    ]
  },
  {
    "questionId": 1385,
    "title": "Find the Distance Value Between Two Arrays",
    "titleSlug": "find-the-distance-value-between-two-arrays",
    "content": "<p>Given two integer arrays `arr1` and `arr2`, and the integer `d`, return the distance value between the two arrays.</p>\n<p>The distance value is defined as the number of elements `arr1[i]` such that there is not any element `arr2[j]` where `|arr1[i]-arr2[j]| <= d`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_the_distance_value_between_two_arrays(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2",
        "output": "2",
        "explanation": "For arr1[0]=4 we have:"
      },
      {
        "input": "arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3",
        "output": "2"
      },
      {
        "input": "arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= arr1.length, arr2.length <= 500",
      "-10^3 <= arr1[i], arr2[j] <= 10^3",
      "0 <= d <= 100"
    ]
  },
  {
    "questionId": 1386,
    "title": "Cinema Seat Allocation",
    "titleSlug": "cinema-seat-allocation",
    "content": "<p>A cinema has `n` rows of seats, numbered from 1 to `n` and there are ten seats in each row, labelled from 1 to 10 as shown in the figure above.</p>\n<p>Given the array `reservedSeats` containing the numbers of seats already reserved, for example, `reservedSeats[i] = [3,8]` means the seat located in row 3 and labelled with 8 is already reserved.</p>\n<p>Return the maximum number of four-person groups you can assign on the cinema seats. A four-person group occupies four adjacent seats in one single row. Seats across an aisle (such as [3,3] and [3,4]) are not considered to be adjacent, but there is an exceptional case on which an aisle split a four-person group, in that case, the aisle split a four-person group in the middle, which means to have two people on each side.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def cinema_seat_allocation(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]",
        "output": "4",
        "explanation": "The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group."
      },
      {
        "input": "n = 2, reservedSeats = [[2,1],[1,8],[2,6]]",
        "output": "2"
      },
      {
        "input": "n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]",
        "output": "4"
      }
    ],
    "constraints": [
      "1 <= n <= 10^9",
      "1 <= reservedSeats.length <= min(10*n, 10^4)",
      "reservedSeats[i].length == 2",
      "1 <= reservedSeats[i][0] <= n",
      "1 <= reservedSeats[i][1] <= 10",
      "All reservedSeats[i] are distinct."
    ]
  },
  {
    "questionId": 1387,
    "title": "Sort Integers by The Power Value",
    "titleSlug": "sort-integers-by-the-power-value",
    "content": "<p>The power of an integer `x` is defined as the number of steps needed to transform `x` into `1` using the following steps:\nif `x` is even then `x = x / 2`\nif `x` is odd then `x = 3 * x + 1`\nFor example, the power of x = 3 is 7 because 3 needs 7 steps to become 1 (3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1).</p>\n<p>Given three integers `lo`, `hi` and `k`. The task is to sort all integers in the interval `[lo, hi]` by the power value in ascending order, if two or more integers have the same power value sort them by ascending order.</p>\n<p>Return the `k-th` integer in the range `[lo, hi]` sorted by the power value.</p>\n<p>Notice that for any integer `x` `(lo <= x <= hi)` it is guaranteed that `x` will transform into `1` using these steps and that the power of `x` is will fit in 32 bit signed integer.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sort_integers_by_the_power_value(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "lo = 12, hi = 15, k = 2",
        "output": "13",
        "explanation": "The power of 12 is 9 (12 --> 6 --> 3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1)"
      },
      {
        "input": "lo = 1, hi = 1, k = 1",
        "output": "1"
      },
      {
        "input": "lo = 7, hi = 11, k = 4",
        "output": "7",
        "explanation": "The power array corresponding to the interval [7, 8, 9, 10, 11] is [16, 3, 19, 6, 14]."
      },
      {
        "input": "lo = 10, hi = 20, k = 5",
        "output": "13"
      },
      {
        "input": "lo = 1, hi = 1000, k = 777",
        "output": "570"
      }
    ],
    "constraints": [
      "1 <= lo <= hi <= 1000",
      "1 <= k <= hi - lo + 1"
    ]
  },
  {
    "questionId": 1389,
    "title": "Create Target Array in the Given Order",
    "titleSlug": "create-target-array-in-the-given-order",
    "content": "<p>Given two arrays of integers `nums` and `index`. Your task is to create target array under the following rules:\nInitially target array is empty.</p>\n<p>From left to right read nums[i] and index[i], insert at index `index[i]` the value `nums[i]` in target array.</p>\n<p>Repeat the previous step until there are no elements to read in `nums` and `index.`\nReturn the target array.</p>\n<p>It is guaranteed that the insertion operations will be valid.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def create_target_array_in_the_given_order(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [0,1,2,3,4], index = [0,1,2,2,1]",
        "output": "[0,4,1,3,2]",
        "explanation": "nums       index     target"
      },
      {
        "input": "nums = [1,2,3,4,0], index = [0,1,2,3,0]",
        "output": "[0,1,2,3,4]",
        "explanation": "nums       index     target"
      },
      {
        "input": "nums = [1], index = [0]",
        "output": "[1]"
      }
    ],
    "constraints": [
      "1 <= nums.length, index.length <= 100",
      "nums.length == index.length",
      "0 <= nums[i] <= 100",
      "0 <= index[i] <= i"
    ]
  },
  {
    "questionId": 1390,
    "title": "Four Divisors",
    "titleSlug": "four-divisors",
    "content": "<p>Given an integer array `nums`, return the sum of divisors of the integers in that array that have exactly four divisors.</p>\n<p>If there is no such integer in the array, return `0`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def four_divisors(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [21,4,7]",
        "output": "32",
        "explanation": "21 has 4 divisors: 1, 3, 7, 21"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^4",
      "1 <= nums[i] <= 10^5"
    ]
  },
  {
    "questionId": 1391,
    "title": "Check if There is a Valid Path in a Grid",
    "titleSlug": "check-if-there-is-a-valid-path-in-a-grid",
    "content": "<p>Given a m x n `grid`. Each cell of the `grid` represents a street. The street of `grid[i][j]` can be:\n1 which means a street connecting the left cell and the right cell.</p>\n<p>2 which means a street connecting the upper cell and the lower cell.</p>\n<p>3 which means a street connecting the left cell and the lower cell.</p>\n<p>4 which means a street connecting the right cell and the lower cell.</p>\n<p>5 which means a street connecting the left cell and the upper cell.</p>\n<p>6 which means a street connecting the right cell and the upper cell.</p>\n<p>You will initially start at the street of the upper-left cell `(0,0)`. A valid path in the grid is a path which starts from the upper left cell `(0,0)` and ends at the bottom-right cell `(m - 1, n - 1)`. The path should only follow the streets.</p>\n<p>Notice that you are not allowed to change any street.</p>\n<p>Return true if there is a valid path in the grid or false otherwise.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def check_if_there_is_a_valid_path_in_a_grid(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "grid = [[2,4,3],[6,5,2]]",
        "output": "true",
        "explanation": "As shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1)."
      },
      {
        "input": "grid = [[1,2,1],[1,2,1]]",
        "output": "false",
        "explanation": "As shown you the street at cell (0, 0) is not connected with any street of any other cell and you will get stuck at cell (0, 0)"
      },
      {
        "input": "grid = [[1,1,2]]",
        "output": "false",
        "explanation": "You will get stuck at cell (0, 1) and you cannot reach cell (0, 2)."
      },
      {
        "input": "grid = [[1,1,1,1,1,1,3]]",
        "output": "true"
      },
      {
        "input": "grid = [[2],[2],[2],[2],[2],[2],[6]]",
        "output": "true"
      }
    ],
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m, n <= 300",
      "1 <= grid[i][j] <= 6"
    ]
  },
  {
    "questionId": 1394,
    "title": "Find Lucky Integer in an Array",
    "titleSlug": "find-lucky-integer-in-an-array",
    "content": "<p>Given an array of integers `arr`, a lucky integer is an integer which has a frequency in the array equal to its value.</p>\n<p>Return a lucky integer in the array. If there are multiple lucky integers return the largest of them. If there is no lucky integer return -1.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_lucky_integer_in_an_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [2,2,3,4]",
        "output": "2",
        "explanation": "The only lucky number in the array is 2 because frequency[2] == 2."
      },
      {
        "input": "arr = [1,2,2,3,3,3]",
        "output": "3",
        "explanation": "1, 2 and 3 are all lucky numbers, return the largest of them."
      },
      {
        "input": "arr = [2,2,2,3,3]",
        "output": "-1",
        "explanation": "There are no lucky numbers in the array."
      },
      {
        "input": "arr = [5]",
        "output": "-1"
      },
      {
        "input": "arr = [7,7,7,7,7,7,7]",
        "output": "7"
      }
    ],
    "constraints": [
      "1 <= arr.length <= 500",
      "1 <= arr[i] <= 500"
    ]
  },
  {
    "questionId": 1395,
    "title": "Count Number of Teams",
    "titleSlug": "count-number-of-teams",
    "content": "<p>There are `n` soldiers standing in a line. Each soldier is assigned a unique `rating` value.</p>\n<p>You have to form a team of 3 soldiers amongst them under the following rules:\nChoose 3 soldiers with index (`i`, `j`, `k`) with rating (`rating[i]`, `rating[j]`, `rating[k]`).</p>\n<p>A team is valid if: (`rating[i] < rating[j] < rating[k]`) or (`rating[i] > rating[j] > rating[k]`) where (`0 <= i < j < k < n`).</p>\n<p>Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_number_of_teams(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "rating = [2,5,3,4,1]",
        "output": "3",
        "explanation": "We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1)."
      },
      {
        "input": "rating = [2,1,3]",
        "output": "0",
        "explanation": "We can't form any team given the conditions."
      },
      {
        "input": "rating = [1,2,3,4]",
        "output": "4"
      }
    ],
    "constraints": [
      "n == rating.length",
      "3 <= n <= 1000",
      "1 <= rating[i] <= 105",
      "All the integers in rating are unique."
    ]
  },
  {
    "questionId": 1396,
    "title": "Design Underground System",
    "titleSlug": "design-underground-system",
    "content": "<p>An underground railway system is keeping track of customer travel times between different stations. They are using this data to calculate the average time it takes to travel from one station to another.</p>\n<p>Implement the `UndergroundSystem` class:\n`void checkIn(int id, string stationName, int t)`</p>\n<p>A customer with a card ID equal to `id`, checks in at the station `stationName` at time `t`.</p>\n<p>A customer can only be checked into one place at a time.</p>\n<p>`void checkOut(int id, string stationName, int t)`</p>\n<p>A customer with a card ID equal to `id`, checks out from the station `stationName` at time `t`.</p>\n<p>`double getAverageTime(string startStation, string endStation)`</p>\n<p>Returns the average time it takes to travel from `startStation` to `endStation`.</p>\n<p>The average time is computed from all the previous traveling times from `startStation` to `endStation` that happened directly, meaning a check in at `startStation` followed by a check out from `endStation`.</p>\n<p>The time it takes to travel from `startStation` to `endStation` may be different from the time it takes to travel from `endStation` to `startStation`.</p>\n<p>There will be at least one customer that has traveled from `startStation` to `endStation` before `getAverageTime` is called.</p>\n<p>You may assume all calls to the `checkIn` and `checkOut` methods are consistent. If a customer checks in at time `t1` then checks out at time `t2`, then `t1 < t2`. All events happen in chronological order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def design_underground_system(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= id, t <= 106",
      "1 <= stationName.length, startStation.length, endStation.length <= 10",
      "All strings consist of uppercase and lowercase English letters and digits.",
      "There will be at most 2 * 104 calls in total to checkIn, checkOut, and getAverageTime.",
      "Answers within 10-5 of the actual value will be accepted."
    ]
  },
  {
    "questionId": 1399,
    "title": "Count Largest Group",
    "titleSlug": "count-largest-group",
    "content": "<p>Given an integer `n`. Each number from `1` to `n` is grouped according to the sum of its digits. \nReturn how many groups have the largest size.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_largest_group(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 13",
        "output": "4",
        "explanation": "There are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13:"
      },
      {
        "input": "n = 2",
        "output": "2",
        "explanation": "There are 2 groups [1], [2] of size 1."
      },
      {
        "input": "n = 15",
        "output": "6"
      },
      {
        "input": "n = 24",
        "output": "5"
      }
    ],
    "constraints": [
      "1 <= n <= 10^4"
    ]
  },
  {
    "questionId": 1400,
    "title": "Construct K Palindrome Strings",
    "titleSlug": "construct-k-palindrome-strings",
    "content": "<p>Given a string `s` and an integer `k`. You should construct `k` non-empty palindrome strings using all the characters in `s`.</p>\n<p>Return True if you can use all the characters in `s` to construct `k` palindrome strings or False otherwise.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def construct_k_palindrome_strings(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"annabelle\", k = 2",
        "output": "true",
        "explanation": "You can construct two palindromes using all characters in s."
      },
      {
        "input": "s = \"leetcode\", k = 3",
        "output": "false",
        "explanation": "It is impossible to construct 3 palindromes using all the characters of s."
      },
      {
        "input": "s = \"true\", k = 4",
        "output": "true",
        "explanation": "The only possible solution is to put each character in a separate string."
      },
      {
        "input": "s = \"yzyzyzyzyzyzyzy\", k = 2",
        "output": "true",
        "explanation": "Simply you can put all z's in one string and all y's in the other string. Both strings will be palindrome."
      },
      {
        "input": "s = \"cr\", k = 7",
        "output": "false",
        "explanation": "We don't have enough characters in s to construct 7 palindromes."
      }
    ],
    "constraints": [
      "1 <= s.length <= 10^5",
      "All characters in s are lower-case English letters.",
      "1 <= k <= 10^5"
    ]
  },
  {
    "questionId": 1401,
    "title": "Circle and Rectangle Overlapping",
    "titleSlug": "circle-and-rectangle-overlapping",
    "content": "<p>Given a circle represented as (`radius`, `x_center`, `y_center`) and an axis-aligned rectangle represented as (`x1`, `y1`, `x2`, `y2`), where (`x1`, `y1`) are the coordinates of the bottom-left corner, and (`x2`, `y2`) are the coordinates of the top-right corner of the rectangle.</p>\n<p>Return True if the circle and rectangle are overlapped otherwise return False.</p>\n<p>In other words, check if there are any point (xi, yi) such that belongs to the circle and the rectangle at the same time.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def circle_and_rectangle_overlapping(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "radius = 1, x_center = 0, y_center = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1",
        "output": "true",
        "explanation": "Circle and rectangle share the point (1,0)"
      },
      {
        "input": "radius = 1, x_center = 0, y_center = 0, x1 = -1, y1 = 0, x2 = 0, y2 = 1",
        "output": "true"
      },
      {
        "input": "radius = 1, x_center = 1, y_center = 1, x1 = -3, y1 = -3, x2 = 3, y2 = 3",
        "output": "true"
      },
      {
        "input": "radius = 1, x_center = 1, y_center = 1, x1 = 1, y1 = -3, x2 = 2, y2 = -1",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= radius <= 2000",
      "-10^4 <= x_center, y_center, x1, y1, x2, y2 <= 10^4",
      "x1 < x2",
      "y1 < y2"
    ]
  },
  {
    "questionId": 1403,
    "title": "Minimum Subsequence in Non-Increasing Order",
    "titleSlug": "minimum-subsequence-in-non-increasing-order",
    "content": "<p>Given the array `nums`, obtain a subsequence of the array whose sum of elements is strictly greater than the sum of the non included elements in such subsequence. \nIf there are multiple solutions, return the subsequence with minimum size and if there still exist multiple solutions, return the subsequence with the maximum total sum of all its elements. A subsequence of an array can be obtained by erasing some (possibly zero) elements from the array. \nNote that the solution with the given constraints is guaranteed to be unique. Also return the answer sorted in non-increasing order.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_subsequence_in_non_increasing_order(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [4,3,10,9,8]",
        "output": "[10,9]",
        "explanation": "The subsequences [10,9] and [10,8] are minimal such that the sum of their elements is strictly greater than the sum of elements not included, however, the subsequence [10,9] has the maximum total sum of its elements."
      },
      {
        "input": "nums = [4,4,7,6,7]",
        "output": "[7,7,6]",
        "explanation": "The subsequence [7,7] has the sum of its elements equal to 14 which is not strictly greater than the sum of elements not included (14 = 4 + 4 + 6). Therefore, the subsequence [7,6,7] is the minimal satisfying the conditions. Note the subsequence has to returned in non-decreasing order."
      },
      {
        "input": "nums = [6]",
        "output": "[6]"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 500",
      "1 <= nums[i] <= 100"
    ]
  },
  {
    "questionId": 1404,
    "title": "Number of Steps to Reduce a Number in Binary Representation to One",
    "titleSlug": "number-of-steps-to-reduce-a-number-in-binary-representation-to-one",
    "content": "<p>Given a number `s` in their binary representation. Return the number of steps to reduce it to 1 under the following rules:\nIf the current number is even, you have to divide it by 2.</p>\n<p>If the current number is odd, you have to add 1 to it.</p>\n<p>It's guaranteed that you can always reach to one for all testcases.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_steps_to_reduce_a_number_in_binary_representation_to_one(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"1101\"",
        "output": "6",
        "explanation": "\"1101\" corressponds to number 13 in their decimal representation."
      },
      {
        "input": "s = \"10\"",
        "output": "1",
        "explanation": "\"10\" corressponds to number 2 in their decimal representation."
      },
      {
        "input": "s = \"1\"",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= s.length <= 500",
      "s consists of characters '0' or '1'",
      "s[0] == '1'"
    ]
  },
  {
    "questionId": 1405,
    "title": "Longest Happy String",
    "titleSlug": "longest-happy-string",
    "content": "<p>A string is called happy if it does not have any of the strings `'aaa'`, `'bbb'` or `'ccc'` as a substring.</p>\n<p>Given three integers `a`, `b` and `c`, return any string `s`, which satisfies following conditions:\n`s` is happy and longest possible.</p>\n<p>`s` contains at most `a` occurrences of the letter `'a'`, at most `b` occurrences of the letter `'b'` and at most `c` occurrences of the letter `'c'`.</p>\n<p>`s `will only contain `'a'`, `'b'` and `'c'` letters.</p>\n<p>If there is no such string `s` return the empty string `\"\"`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_happy_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "a = 1, b = 1, c = 7",
        "output": "\"ccaccbcc\"",
        "explanation": "\"ccbccacc\" would also be a correct answer."
      },
      {
        "input": "a = 2, b = 2, c = 1",
        "output": "\"aabbc\""
      },
      {
        "input": "a = 7, b = 1, c = 0",
        "output": "\"aabaa\"",
        "explanation": "It's the only correct answer in this case."
      }
    ],
    "constraints": [
      "0 <= a, b, c <= 100",
      "a + b + c > 0"
    ]
  },
  {
    "questionId": 1408,
    "title": "String Matching in an Array",
    "titleSlug": "string-matching-in-an-array",
    "content": "<p>Given an array of string `words`. Return all strings in `words` which is substring of another word in any order. \nString `words[i]` is substring of `words[j]`, if can be obtained removing some characters to left and/or right side of `words[j]`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def string_matching_in_an_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "words = [\"mass\",\"as\",\"hero\",\"superhero\"]",
        "output": "[\"as\",\"hero\"]",
        "explanation": "\"as\" is substring of \"mass\" and \"hero\" is substring of \"superhero\"."
      },
      {
        "input": "words = [\"leetcode\",\"et\",\"code\"]",
        "output": "[\"et\",\"code\"]",
        "explanation": "\"et\", \"code\" are substring of \"leetcode\"."
      },
      {
        "input": "words = [\"blue\",\"green\",\"bu\"]",
        "output": "[]"
      }
    ],
    "constraints": [
      "1 <= words.length <= 100",
      "1 <= words[i].length <= 30",
      "words[i] contains only lowercase English letters.",
      "It's guaranteed that words[i] will be unique."
    ]
  },
  {
    "questionId": 1409,
    "title": "Queries on a Permutation With Key",
    "titleSlug": "queries-on-a-permutation-with-key",
    "content": "<p>Given the array `queries` of positive integers between `1` and `m`, you have to process all `queries[i]` (from `i=0` to `i=queries.length-1`) according to the following rules:\nIn the beginning, you have the permutation `P=[1,2,3,...,m]`.</p>\n<p>For the current `i`, find the position of `queries[i]` in the permutation `P` (indexing from 0) and then move this at the beginning of the permutation `P.` Notice that the position of `queries[i]` in `P` is the result for `queries[i]`.</p>\n<p>Return an array containing the result for the given `queries`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def queries_on_a_permutation_with_key(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "queries = [3,1,2,1], m = 5",
        "output": "[2,1,2,1]",
        "explanation": "The queries are processed as follow:"
      },
      {
        "input": "queries = [4,1,2,2], m = 4",
        "output": "[3,1,2,0]"
      },
      {
        "input": "queries = [7,5,5,8,3], m = 8",
        "output": "[6,5,0,7,5]"
      }
    ],
    "constraints": [
      "1 <= m <= 10^3",
      "1 <= queries.length <= m",
      "1 <= queries[i] <= m"
    ]
  },
  {
    "questionId": 1410,
    "title": "HTML Entity Parser",
    "titleSlug": "html-entity-parser",
    "content": "<p>HTML entity parser is the parser that takes HTML code as input and replace all the entities of the special characters by the characters itself.</p>\n<p>The special characters and their entities for HTML are:\nQuotation Mark: the entity is `&quot;` and symbol character is `\"`.</p>\n<p>Single Quote Mark: the entity is `&apos;` and symbol character is `'`.</p>\n<p>Ampersand: the entity is `&amp;` and symbol character is `&`.</p>\n<p>Greater Than Sign: the entity is `&gt;` and symbol character is `>`.</p>\n<p>Less Than Sign: the entity is `&lt;` and symbol character is `<`.</p>\n<p>Slash: the entity is `&frasl;` and symbol character is `/`.</p>\n<p>Given the input `text` string to the HTML parser, you have to implement the entity parser.</p>\n<p>Return the text after replacing the entities by the special characters.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def html_entity_parser(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "text = \"&amp; is an HTML entity but &ambassador; is not.\"",
        "output": "\"& is an HTML entity but &ambassador; is not.\"",
        "explanation": "The parser will replace the &amp; entity by &"
      },
      {
        "input": "text = \"and I quote: &quot;...&quot;\"",
        "output": "\"and I quote: \\\"...\\\"\""
      },
      {
        "input": "text = \"Stay home! Practice on Leetcode :)\"",
        "output": "\"Stay home! Practice on Leetcode :)\""
      },
      {
        "input": "text = \"x &gt; y &amp;&amp; x &lt; y is always false\"",
        "output": "\"x > y && x < y is always false\""
      },
      {
        "input": "text = \"leetcode.com&frasl;problemset&frasl;all\"",
        "output": "\"leetcode.com/problemset/all\""
      }
    ],
    "constraints": [
      "1 <= text.length <= 10^5",
      "The string may contain any possible characters out of all the 256 ASCII characters."
    ]
  },
  {
    "questionId": 1413,
    "title": "Minimum Value to Get Positive Step by Step Sum",
    "titleSlug": "minimum-value-to-get-positive-step-by-step-sum",
    "content": "<p>Given an array of integers `nums`, you start with an initial positive value startValue.</p>\n<p>In each iteration, you calculate the step by step sum of startValue plus elements in `nums` (from left to right).</p>\n<p>Return the minimum positive value of startValue such that the step by step sum is never less than 1.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_value_to_get_positive_step_by_step_sum(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [-3,2,-3,4,2]",
        "output": "5",
        "explanation": "If you choose startValue = 4, in the third iteration your step by step sum is less than 1."
      },
      {
        "input": "nums = [1,2]",
        "output": "1",
        "explanation": "Minimum start value should be positive."
      },
      {
        "input": "nums = [1,-2,-3]",
        "output": "5"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 100",
      "-100 <= nums[i] <= 100"
    ]
  },
  {
    "questionId": 1414,
    "title": "Find the Minimum Number of Fibonacci Numbers Whose Sum Is K",
    "titleSlug": "find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k",
    "content": "<p>Given an integer `k`, return the minimum number of Fibonacci numbers whose sum is equal to `k`. The same Fibonacci number can be used multiple times.</p>\n<p>The Fibonacci numbers are defined as:\n`F1 = 1`\n`F2 = 1`\n`Fn = Fn-1 + Fn-2` for `n > 2.`\nIt is guaranteed that for the given constraints we can always find such Fibonacci numbers that sum up to `k`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_the_minimum_number_of_fibonacci_numbers_whose_sum_is_k(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "k = 7",
        "output": "2",
        "explanation": "The Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ..."
      },
      {
        "input": "k = 10",
        "output": "2",
        "explanation": "For k = 10 we can use 2 + 8 = 10."
      },
      {
        "input": "k = 19",
        "output": "3",
        "explanation": "For k = 19 we can use 1 + 5 + 13 = 19."
      }
    ],
    "constraints": [
      "1 <= k <= 10^9"
    ]
  },
  {
    "questionId": 1415,
    "title": "The k-th Lexicographical String of All Happy Strings of Length n",
    "titleSlug": "the-k-th-lexicographical-string-of-all-happy-strings-of-length-n",
    "content": "<p>A happy string is a string that:\nconsists only of letters of the set `['a', 'b', 'c']`.</p>\n<p>`s[i] != s[i + 1]` for all values of `i` from `1` to `s.length - 1` (string is 1-indexed).</p>\n<p>For example, strings \"abc\", \"ac\", \"b\" and \"abcbabcbcb\" are all happy strings and strings \"aa\", \"baa\" and \"ababbc\" are not happy strings.</p>\n<p>Given two integers `n` and `k`, consider a list of all happy strings of length `n` sorted in lexicographical order.</p>\n<p>Return the kth string of this list or return an empty string if there are less than `k` happy strings of length `n`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def the_k_th_lexicographical_string_of_all_happy_strings_of_length_n(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 1, k = 3",
        "output": "\"c\"",
        "explanation": "The list [\"a\", \"b\", \"c\"] contains all happy strings of length 1. The third string is \"c\"."
      },
      {
        "input": "n = 1, k = 4",
        "output": "\"\"",
        "explanation": "There are only 3 happy strings of length 1."
      },
      {
        "input": "n = 3, k = 9",
        "output": "\"cab\"",
        "explanation": "There are 12 different happy string of length 3 [\"aba\", \"abc\", \"aca\", \"acb\", \"bab\", \"bac\", \"bca\", \"bcb\", \"cab\", \"cac\", \"cba\", \"cbc\"]. You will find the 9th string = \"cab\""
      },
      {
        "input": "n = 2, k = 7",
        "output": "\"\""
      },
      {
        "input": "n = 10, k = 100",
        "output": "\"abacbabacb\""
      }
    ],
    "constraints": [
      "1 <= n <= 10",
      "1 <= k <= 100"
    ]
  },
  {
    "questionId": 1417,
    "title": "Reformat The String",
    "titleSlug": "reformat-the-string",
    "content": "<p>Given alphanumeric string `s`. (Alphanumeric string is a string consisting of lowercase English letters and digits).</p>\n<p>You have to find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit. That is, no two adjacent characters have the same type.</p>\n<p>Return the reformatted string or return an empty string if it is impossible to reformat the string.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def reformat_the_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"a0b1c2\"",
        "output": "\"0a1b2c\"",
        "explanation": "No two adjacent characters have the same type in \"0a1b2c\". \"a0b1c2\", \"0a1b2c\", \"0c2a1b\" are also valid permutations."
      },
      {
        "input": "s = \"leetcode\"",
        "output": "\"\"",
        "explanation": "\"leetcode\" has only characters so we cannot separate them by digits."
      },
      {
        "input": "s = \"1229857369\"",
        "output": "\"\"",
        "explanation": "\"1229857369\" has only digits so we cannot separate them by characters."
      },
      {
        "input": "s = \"covid2019\"",
        "output": "\"c2o0v1i9d\""
      },
      {
        "input": "s = \"ab123\"",
        "output": "\"1a2b3\""
      }
    ],
    "constraints": [
      "1 <= s.length <= 500",
      "s consists of only lowercase English letters and/or digits."
    ]
  },
  {
    "questionId": 1418,
    "title": "Display Table of Food Orders in a Restaurant",
    "titleSlug": "display-table-of-food-orders-in-a-restaurant",
    "content": "<p>Given the array `orders`, which represents the orders that customers have done in a restaurant. More specifically `orders[i]=[customerNamei,tableNumberi,foodItemi]` where `customerNamei` is the name of the customer, `tableNumberi` is the table customer sit at, and `foodItemi` is the item customer orders.</p>\n<p>Return the restaurant's \u201cdisplay table\u201d. The \u201cdisplay table\u201d is a table whose row entries denote how many of each food item each table ordered. The first column is the table number and the remaining columns correspond to each food item in alphabetical order. The first row should be a header whose first column is \u201cTable\u201d, followed by the names of the food items. Note that the customer names are not part of the table. Additionally, the rows should be sorted in numerically increasing order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def display_table_of_food_orders_in_a_restaurant(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "orders = [[\"David\",\"3\",\"Ceviche\"],[\"Corina\",\"10\",\"Beef Burrito\"],[\"David\",\"3\",\"Fried Chicken\"],[\"Carla\",\"5\",\"Water\"],[\"Carla\",\"5\",\"Ceviche\"],[\"Rous\",\"3\",\"Ceviche\"]]",
        "output": "[[\"Table\",\"Beef Burrito\",\"Ceviche\",\"Fried Chicken\",\"Water\"],[\"3\",\"0\",\"2\",\"1\",\"0\"],[\"5\",\"0\",\"1\",\"0\",\"1\"],[\"10\",\"1\",\"0\",\"0\",\"0\"]]",
        "explanation": "The displaying table looks like:"
      },
      {
        "input": "orders = [[\"James\",\"12\",\"Fried Chicken\"],[\"Ratesh\",\"12\",\"Fried Chicken\"],[\"Amadeus\",\"12\",\"Fried Chicken\"],[\"Adam\",\"1\",\"Canadian Waffles\"],[\"Brianna\",\"1\",\"Canadian Waffles\"]]",
        "output": "[[\"Table\",\"Canadian Waffles\",\"Fried Chicken\"],[\"1\",\"2\",\"0\"],[\"12\",\"0\",\"3\"]]",
        "explanation": "For the table 1: Adam and Brianna order \"Canadian Waffles\"."
      },
      {
        "input": "orders = [[\"Laura\",\"2\",\"Bean Burrito\"],[\"Jhon\",\"2\",\"Beef Burrito\"],[\"Melissa\",\"2\",\"Soda\"]]",
        "output": "[[\"Table\",\"Bean Burrito\",\"Beef Burrito\",\"Soda\"],[\"2\",\"1\",\"1\",\"1\"]]"
      }
    ],
    "constraints": [
      "1 <= orders.length <= 5 * 10^4",
      "orders[i].length == 3",
      "1 <= customerNamei.length, foodItemi.length <= 20",
      "customerNamei and foodItemi consist of lowercase and uppercase English letters and the space character.",
      "tableNumberi is a valid integer between 1 and 500."
    ]
  },
  {
    "questionId": 1419,
    "title": "Minimum Number of Frogs Croaking",
    "titleSlug": "minimum-number-of-frogs-croaking",
    "content": "<p>Given the string `croakOfFrogs`, which represents a combination of the string \"croak\" from different frogs, that is, multiple frogs can croak at the same time, so multiple \u201ccroak\u201d are mixed. Return the minimum number of different frogs to finish all the croak in the given string.</p>\n<p>A valid \"croak\" means a frog is printing 5 letters \u2018c\u2019, \u2019r\u2019, \u2019o\u2019, \u2019a\u2019, \u2019k\u2019 sequentially. The frogs have to print all five letters to finish a croak. If the given string is not a combination of valid \"croak\" return -1.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_number_of_frogs_croaking(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "croakOfFrogs = \"croakcroak\"",
        "output": "1",
        "explanation": "One frog yelling \"croak\" twice."
      },
      {
        "input": "croakOfFrogs = \"crcoakroak\"",
        "output": "2",
        "explanation": "The minimum number of frogs is two."
      },
      {
        "input": "croakOfFrogs = \"croakcrook\"",
        "output": "-1",
        "explanation": "The given string is an invalid combination of \"croak\" from different frogs."
      },
      {
        "input": "croakOfFrogs = \"croakcroa\"",
        "output": "-1"
      }
    ],
    "constraints": [
      "1 <= croakOfFrogs.length <= 10^5",
      "All characters in the string are: 'c', 'r', 'o', 'a' or 'k'."
    ]
  },
  {
    "questionId": 1422,
    "title": "Maximum Score After Splitting a String",
    "titleSlug": "maximum-score-after-splitting-a-string",
    "content": "<p>Given a string `s` of zeros and ones, return the maximum score after splitting the string into two non-empty substrings (i.e. left substring and right substring).</p>\n<p>The score after splitting a string is the number of zeros in the left substring plus the number of ones in the right substring.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_score_after_splitting_a_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"011101\"",
        "output": "5",
        "explanation": "All possible ways of splitting s into two non-empty substrings are:"
      },
      {
        "input": "s = \"00111\"",
        "output": "5",
        "explanation": "When left = \"00\" and right = \"111\", we get the maximum score = 2 + 3 = 5"
      },
      {
        "input": "s = \"1111\"",
        "output": "3"
      }
    ],
    "constraints": [
      "2 <= s.length <= 500",
      "The string s consists of characters '0' and '1' only."
    ]
  },
  {
    "questionId": 1423,
    "title": "Maximum Points You Can Obtain from Cards",
    "titleSlug": "maximum-points-you-can-obtain-from-cards",
    "content": "<p>There are several cards arranged in a row, and each card has an associated number of points The points are given in the integer array `cardPoints`.</p>\n<p>In one step, you can take one card from the beginning or from the end of the row. You have to take exactly `k` cards.</p>\n<p>Your score is the sum of the points of the cards you have taken.</p>\n<p>Given the integer array `cardPoints` and the integer `k`, return the maximum score you can obtain.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_points_you_can_obtain_from_cards(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "cardPoints = [1,2,3,4,5,6,1], k = 3",
        "output": "12",
        "explanation": "After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12."
      },
      {
        "input": "cardPoints = [2,2,2], k = 2",
        "output": "4",
        "explanation": "Regardless of which two cards you take, your score will always be 4."
      },
      {
        "input": "cardPoints = [9,7,7,9,7,7,9], k = 7",
        "output": "55",
        "explanation": "You have to take all the cards. Your score is the sum of points of all cards."
      },
      {
        "input": "cardPoints = [1,1000,1], k = 1",
        "output": "1",
        "explanation": "You cannot take the card in the middle. Your best score is 1."
      },
      {
        "input": "cardPoints = [1,79,80,1,1,1,200,1], k = 3",
        "output": "202"
      }
    ],
    "constraints": [
      "1 <= cardPoints.length <= 10^5",
      "1 <= cardPoints[i] <= 10^4",
      "1 <= k <= cardPoints.length"
    ]
  },
  {
    "questionId": 1424,
    "title": "Diagonal Traverse II",
    "titleSlug": "diagonal-traverse-ii",
    "content": "<p>Given a list of lists of integers, `nums`, return all elements of `nums` in diagonal order as shown in the below images.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def diagonal_traverse_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [[1,2,3],[4,5,6],[7,8,9]]",
        "output": "[1,4,2,7,5,3,8,6,9]"
      },
      {
        "input": "nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]",
        "output": "[1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]"
      },
      {
        "input": "nums = [[1,2,3],[4],[5,6,7],[8],[9,10,11]]",
        "output": "[1,4,2,5,3,8,6,9,7,10,11]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6]]",
        "output": "[1,2,3,4,5,6]"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^5",
      "1 <= nums[i].length <= 10^5",
      "1 <= nums[i][j] <= 10^9",
      "There at most 10^5 elements in nums."
    ]
  },
  {
    "questionId": 1426,
    "title": "Counting Elements",
    "titleSlug": "counting-elements",
    "content": "<p>Given an integer array `arr`, count how many elements `x` there are, such that `x + 1` is also in `arr`. If there are duplicates in `arr`, count them separately.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def counting_elements(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [1,2,3]",
        "output": "2",
        "explanation": "1 and 2 are counted cause 2 and 3 are in arr."
      },
      {
        "input": "arr = [1,1,3,3,5,5,7,7]",
        "output": "0",
        "explanation": "No numbers are counted, cause there's no 2, 4, 6, or 8 in arr."
      },
      {
        "input": "arr = [1,3,2,3,5,0]",
        "output": "3",
        "explanation": "0, 1 and 2 are counted cause 1, 2 and 3 are in arr."
      },
      {
        "input": "arr = [1,1,2,2]",
        "output": "2",
        "explanation": "Two 1s are counted cause 2 is in arr."
      },
      {
        "input": "arr = [1,1,2]",
        "output": "2",
        "explanation": "Both 1s are counted because 2 is in the array."
      }
    ],
    "constraints": [
      "1 <= arr.length <= 1000",
      "0 <= arr[i] <= 1000"
    ]
  },
  {
    "questionId": 1427,
    "title": "Perform String Shifts",
    "titleSlug": "perform-string-shifts",
    "content": "<p>You are given a string `s` containing lowercase English letters, and a matrix `shift`, where `shift[i] = [direction, amount]`:\n`direction` can be `0` (for left shift) or `1` (for right shift). \n`amount` is the amount by which string `s` is to be shifted.</p>\n<p>A left shift by 1 means remove the first character of `s` and append it to the end.</p>\n<p>Similarly, a right shift by 1 means remove the last character of `s` and add it to the beginning.</p>\n<p>Return the final string after all operations.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def perform_string_shifts(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"abc\", shift = [[0,1],[1,2]]",
        "output": "\"cab\"",
        "explanation": "[0,1] means shift to left by 1. \"abc\" -> \"bca\""
      },
      {
        "input": "s = \"abcdefg\", shift = [[1,1],[1,1],[0,2],[1,3]]",
        "output": "\"efgabcd\"",
        "explanation": "[1,1] means shift to right by 1. \"abcdefg\" -> \"gabcdef\""
      }
    ],
    "constraints": [
      "1 <= s.length <= 100",
      "s only contains lower case English letters.",
      "1 <= shift.length <= 100",
      "shift[i].length == 2",
      "0 <= shift[i][0] <= 1",
      "0 <= shift[i][1] <= 100"
    ]
  },
  {
    "questionId": 1428,
    "title": "Leftmost Column with at Least a One",
    "titleSlug": "leftmost-column-with-at-least-a-one",
    "content": "<p>(This problem is an interactive problem.)\nA row-sorted binary matrix means that all elements are `0` or `1` and each row of the matrix is sorted in non-decreasing order.</p>\n<p>Given a row-sorted binary matrix `binaryMatrix`, return the index (0-indexed) of the leftmost column with a 1 in it. If such an index does not exist, return `-1`.</p>\n<p>You can't access the Binary Matrix directly. You may only access the matrix using a `BinaryMatrix` interface:\n`BinaryMatrix.get(row, col)` returns the element of the matrix at index `(row, col)` (0-indexed).</p>\n<p>`BinaryMatrix.dimensions()` returns the dimensions of the matrix as a list of 2 elements `[rows, cols]`, which means the matrix is `rows x cols`.</p>\n<p>Submissions making more than `1000` calls to `BinaryMatrix.get` will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.</p>\n<p>For custom testing purposes, the input will be the entire binary matrix `mat`. You will not have access to the binary matrix directly.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def leftmost_column_with_at_least_a_one(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "mat = [[0,0],[1,1]]",
        "output": "0"
      },
      {
        "input": "mat = [[0,0],[0,1]]",
        "output": "1"
      },
      {
        "input": "mat = [[0,0],[0,0]]",
        "output": "-1"
      },
      {
        "input": "mat = [[0,0,0,1],[0,0,1,1],[0,1,1,1]]",
        "output": "1"
      }
    ],
    "constraints": [
      "rows == mat.length",
      "cols == mat[i].length",
      "1 <= rows, cols <= 100",
      "mat[i][j] is either 0 or 1.",
      "mat[i] is sorted in non-decreasing order."
    ]
  },
  {
    "questionId": 1429,
    "title": "First Unique Number",
    "titleSlug": "first-unique-number",
    "content": "<p>You have a queue of integers, you need to retrieve the first unique integer in the queue.</p>\n<p>Implement the `FirstUnique` class:\n`FirstUnique(int[] nums)` Initializes the object with the numbers in the queue.</p>\n<p>`int showFirstUnique()` returns the value of the first unique integer of the queue, and returns -1 if there is no such integer.</p>\n<p>`void add(int value)` insert value to the queue.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def first_unique_number(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "[\"FirstUnique\",\"showFirstUnique\",\"add\",\"showFirstUnique\",\"add\",\"showFirstUnique\",\"add\",\"showFirstUnique\"]",
        "output": "[null,2,null,2,null,3,null,-1]",
        "explanation": "FirstUnique firstUnique = new FirstUnique([2,3,5]);"
      },
      {
        "input": "[\"FirstUnique\",\"showFirstUnique\",\"add\",\"add\",\"add\",\"add\",\"add\",\"showFirstUnique\"]",
        "output": "[null,-1,null,null,null,null,null,17]",
        "explanation": "FirstUnique firstUnique = new FirstUnique([7,7,7,7,7,7]);"
      },
      {
        "input": "[\"FirstUnique\",\"showFirstUnique\",\"add\",\"showFirstUnique\"]",
        "output": "[null,809,null,-1]",
        "explanation": "FirstUnique firstUnique = new FirstUnique([809]);"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^5",
      "1 <= nums[i] <= 10^8",
      "1 <= value <= 10^8",
      "At most 50000 calls will be made to showFirstUnique and add."
    ]
  },
  {
    "questionId": 1430,
    "title": "Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree",
    "titleSlug": "check-if-a-string-is-a-valid-sequence-from-root-to-leaves-path-in-a-binary-tree",
    "content": "<p>Given a binary tree where each path going from the root to any leaf form a valid sequence, check if a given string is a valid sequence in such binary tree. \nWe get the given string from the concatenation of an array of integers `arr` and the concatenation of all values of the nodes along a path results in a sequence in the given binary tree.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def check_if_a_string_is_a_valid_sequence_from_root_to_leaves_path_in_a_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,0,1]",
        "output": "true",
        "explanation": "The path 0 -> 1 -> 0 -> 1 is a valid sequence (green color in the figure)."
      },
      {
        "input": "root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,0,1]",
        "output": "false",
        "explanation": "The path 0 -> 0 -> 1 does not exist, therefore it is not even a sequence."
      },
      {
        "input": "root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,1]",
        "output": "false",
        "explanation": "The path 0 -> 1 -> 1 is a sequence, but it is not a valid sequence."
      }
    ],
    "constraints": [
      "1 <= arr.length <= 5000",
      "0 <= arr[i] <= 9",
      "Each node's value is between [0 - 9]."
    ]
  },
  {
    "questionId": 1431,
    "title": "Kids With the Greatest Number of Candies",
    "titleSlug": "kids-with-the-greatest-number-of-candies",
    "content": "<p>Given the array `candies` and the integer `extraCandies`, where `candies[i]` represents the number of candies that the ith kid has.</p>\n<p>For each kid check if there is a way to distribute `extraCandies` among the kids such that he or she can have the greatest number of candies among them. Notice that multiple kids can have the greatest number of candies.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def kids_with_the_greatest_number_of_candies(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "candies = [2,3,5,1,3], extraCandies = 3",
        "output": "[true,true,true,false,true]",
        "explanation": "Kid 1 has 2 candies and if he or she receives all extra candies (3) will have 5 candies --- the greatest number of candies among the kids."
      },
      {
        "input": "candies = [4,2,1,1,2], extraCandies = 1",
        "output": "[true,false,false,false,false]",
        "explanation": "There is only 1 extra candy, therefore only kid 1 will have the greatest number of candies among the kids regardless of who takes the extra candy."
      },
      {
        "input": "candies = [12,1,12], extraCandies = 10",
        "output": "[true,false,true]"
      }
    ],
    "constraints": [
      "2 <= candies.length <= 100",
      "1 <= candies[i] <= 100",
      "1 <= extraCandies <= 50"
    ]
  },
  {
    "questionId": 1432,
    "title": "Max Difference You Can Get From Changing an Integer",
    "titleSlug": "max-difference-you-can-get-from-changing-an-integer",
    "content": "<p>You are given an integer `num`. You will apply the following steps exactly two times:\nPick a digit `x (0 <= x <= 9)`.</p>\n<p>Pick another digit `y (0 <= y <= 9)`. The digit `y` can be equal to `x`.</p>\n<p>Replace all the occurrences of `x` in the decimal representation of `num` by `y`.</p>\n<p>The new integer cannot have any leading zeros, also the new integer cannot be 0.</p>\n<p>Let `a` and `b` be the results of applying the operations to `num` the first and second times, respectively.</p>\n<p>Return the max difference between `a` and `b`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def max_difference_you_can_get_from_changing_an_integer(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "num = 555",
        "output": "888",
        "explanation": "The first time pick x = 5 and y = 9 and store the new integer in a."
      },
      {
        "input": "num = 9",
        "output": "8",
        "explanation": "The first time pick x = 9 and y = 9 and store the new integer in a."
      },
      {
        "input": "num = 123456",
        "output": "820000"
      },
      {
        "input": "num = 10000",
        "output": "80000"
      },
      {
        "input": "num = 9288",
        "output": "8700"
      }
    ],
    "constraints": [
      "1 <= num <= 10^8"
    ]
  },
  {
    "questionId": 1433,
    "title": "Check If a String Can Break Another String",
    "titleSlug": "check-if-a-string-can-break-another-string",
    "content": "<p>Given two strings: `s1` and `s2` with the same size, check if some permutation of string `s1` can break some permutation of string `s2` or vice-versa. In other words `s2` can break `s1` or vice-versa.</p>\n<p>A string `x` can break string `y` (both of size `n`) if `x[i] >= y[i]` (in alphabetical order) for all `i` between `0` and `n-1`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def check_if_a_string_can_break_another_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s1 = \"abc\", s2 = \"xya\"",
        "output": "true",
        "explanation": "\"ayx\" is a permutation of s2=\"xya\" which can break to string \"abc\" which is a permutation of s1=\"abc\"."
      },
      {
        "input": "s1 = \"abe\", s2 = \"acd\"",
        "output": "false",
        "explanation": "All permutations for s1=\"abe\" are: \"abe\", \"aeb\", \"bae\", \"bea\", \"eab\" and \"eba\" and all permutation for s2=\"acd\" are: \"acd\", \"adc\", \"cad\", \"cda\", \"dac\" and \"dca\". However, there is not any permutation from s1 which can break some permutation from s2 and vice-versa."
      },
      {
        "input": "s1 = \"leetcodee\", s2 = \"interview\"",
        "output": "true"
      }
    ],
    "constraints": [
      "s1.length == n",
      "s2.length == n",
      "1 <= n <= 10^5",
      "All strings consist of lowercase English letters."
    ]
  },
  {
    "questionId": 1436,
    "title": "Destination City",
    "titleSlug": "destination-city",
    "content": "<p>You are given the array `paths`, where `paths[i] = [cityAi, cityBi]` means there exists a direct path going from `cityAi` to `cityBi`. Return the destination city, that is, the city without any path outgoing to another city.</p>\n<p>It is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def destination_city(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "paths = [[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]",
        "output": "\"Sao Paulo\"",
        "explanation": "Starting at \"London\" city you will reach \"Sao Paulo\" city which is the destination city. Your trip consist of: \"London\" -> \"New York\" -> \"Lima\" -> \"Sao Paulo\"."
      },
      {
        "input": "paths = [[\"B\",\"C\"],[\"D\",\"B\"],[\"C\",\"A\"]]",
        "output": "\"A\"",
        "explanation": "All possible trips are:"
      },
      {
        "input": "paths = [[\"A\",\"Z\"]]",
        "output": "\"Z\""
      }
    ],
    "constraints": [
      "1 <= paths.length <= 100",
      "paths[i].length == 2",
      "1 <= cityAi.length, cityBi.length <= 10",
      "cityAi != cityBi",
      "All strings consist of lowercase and uppercase English letters and the space character."
    ]
  },
  {
    "questionId": 1437,
    "title": "Check If All 1's Are at Least Length K Places Away",
    "titleSlug": "check-if-all-1s-are-at-least-length-k-places-away",
    "content": "<p>Given an array `nums` of 0s and 1s and an integer `k`, return `True` if all 1's are at least `k` places away from each other, otherwise return `False`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def check_if_all_1s_are_at_least_length_k_places_away(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,0,0,0,1,0,0,1], k = 2",
        "output": "true",
        "explanation": "Each of the 1s are at least 2 places away from each other."
      },
      {
        "input": "nums = [1,0,0,1,0,1], k = 2",
        "output": "false",
        "explanation": "The second 1 and third 1 are only one apart from each other."
      },
      {
        "input": "nums = [1,1,1,1,1], k = 0",
        "output": "true"
      },
      {
        "input": "nums = [0,1,0,1], k = 1",
        "output": "true"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 105",
      "0 <= k <= nums.length",
      "nums[i] is 0 or 1"
    ]
  },
  {
    "questionId": 1438,
    "title": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
    "titleSlug": "longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit",
    "content": "<p>Given an array of integers `nums` and an integer `limit`, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to `limit`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_continuous_subarray_with_absolute_diff_less_than_or_equal_to_limit(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [8,2,4,7], limit = 4",
        "output": "2",
        "explanation": "All subarrays are:"
      },
      {
        "input": "nums = [10,1,2,4,7,2], limit = 5",
        "output": "4",
        "explanation": "The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 <= 5."
      },
      {
        "input": "nums = [4,2,2,2,4,4,2,2], limit = 0",
        "output": "3"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 105",
      "1 <= nums[i] <= 109",
      "0 <= limit <= 109"
    ]
  },
  {
    "questionId": 1441,
    "title": "Build an Array With Stack Operations",
    "titleSlug": "build-an-array-with-stack-operations",
    "content": "<p>Given an array `target` and an integer `n`. In each iteration, you will read a number from  `list = {1,2,3..., n}`.</p>\n<p>Build the `target` array using the following operations:\nPush: Read a new element from the beginning `list`, and push it in the array.</p>\n<p>Pop: delete the last element of the array.</p>\n<p>If the target array is already built, stop reading more elements.</p>\n<p>Return the operations to build the target array. You are guaranteed that the answer is unique.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def build_an_array_with_stack_operations(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "target = [1,3], n = 3",
        "output": "[\"Push\",\"Push\",\"Pop\",\"Push\"]",
        "explanation": "Read number 1 and automatically push in the array -> [1]"
      },
      {
        "input": "target = [1,2,3], n = 3",
        "output": "[\"Push\",\"Push\",\"Push\"]"
      },
      {
        "input": "target = [1,2], n = 4",
        "output": "[\"Push\",\"Push\"]",
        "explanation": "You only need to read the first 2 numbers and stop."
      },
      {
        "input": "target = [2,3,4], n = 4",
        "output": "[\"Push\",\"Pop\",\"Push\",\"Push\",\"Push\"]"
      }
    ],
    "constraints": [
      "1 <= target.length <= 100",
      "1 <= target[i] <= n",
      "1 <= n <= 100",
      "target is strictly increasing."
    ]
  },
  {
    "questionId": 1442,
    "title": "Count Triplets That Can Form Two Arrays of Equal XOR",
    "titleSlug": "count-triplets-that-can-form-two-arrays-of-equal-xor",
    "content": "<p>Given an array of integers `arr`.</p>\n<p>We want to select three indices `i`, `j` and `k` where `(0 <= i < j <= k < arr.length)`.</p>\n<p>Let's define `a` and `b` as follows:\n`a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]`\n`b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]`\nNote that ^ denotes the bitwise-xor operation.</p>\n<p>Return the number of triplets (`i`, `j` and `k`) Where `a == b`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_triplets_that_can_form_two_arrays_of_equal_xor(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [2,3,1,6,7]",
        "output": "4",
        "explanation": "The triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4)"
      },
      {
        "input": "arr = [1,1,1,1,1]",
        "output": "10"
      },
      {
        "input": "arr = [2,3]",
        "output": "0"
      },
      {
        "input": "arr = [1,3,5,7,9]",
        "output": "3"
      },
      {
        "input": "arr = [7,11,12,9,5,2,7,17,22]",
        "output": "8"
      }
    ],
    "constraints": [
      "1 <= arr.length <= 300",
      "1 <= arr[i] <= 10^8"
    ]
  },
  {
    "questionId": 1443,
    "title": "Minimum Time to Collect All Apples in a Tree",
    "titleSlug": "minimum-time-to-collect-all-apples-in-a-tree",
    "content": "<p>Given an undirected tree consisting of `n` vertices numbered from `0` to `n-1`, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex.</p>\n<p>The edges of the undirected tree are given in the array `edges`, where `edges[i] = [ai, bi]` means that exists an edge connecting the vertices `ai` and `bi`. Additionally, there is a boolean array `hasApple`, where `hasApple[i] = true` means that vertex `i` has an apple; otherwise, it does not have any apple.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_time_to_collect_all_apples_in_a_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false]",
        "output": "8",
        "explanation": "The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows."
      },
      {
        "input": "n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,false,true,false]",
        "output": "6",
        "explanation": "The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows."
      },
      {
        "input": "n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,false,false,false,false,false]",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= n <= 10^5",
      "edges.length == n - 1",
      "edges[i].length == 2",
      "0 <= ai < bi <= n - 1",
      "fromi < toi",
      "hasApple.length == n"
    ]
  },
  {
    "questionId": 1446,
    "title": "Consecutive Characters",
    "titleSlug": "consecutive-characters",
    "content": "<p>Given a string `s`, the power of the string is the maximum length of a non-empty substring that contains only one unique character.</p>\n<p>Return the power of the string.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def consecutive_characters(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"leetcode\"",
        "output": "2",
        "explanation": "The substring \"ee\" is of length 2 with the character 'e' only."
      },
      {
        "input": "s = \"abbcccddddeeeeedcba\"",
        "output": "5",
        "explanation": "The substring \"eeeee\" is of length 5 with the character 'e' only."
      },
      {
        "input": "s = \"triplepillooooow\"",
        "output": "5"
      },
      {
        "input": "s = \"hooraaaaaaaaaaay\"",
        "output": "11"
      },
      {
        "input": "s = \"tourist\"",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= s.length <= 500",
      "s contains only lowercase English letters."
    ]
  },
  {
    "questionId": 1447,
    "title": "Simplified Fractions",
    "titleSlug": "simplified-fractions",
    "content": "<p>Given an integer `n`, return a list of all simplified fractions between 0 and 1 (exclusive) such that the denominator is less-than-or-equal-to `n`. The fractions can be in any order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def simplified_fractions(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 2",
        "output": "[\"1/2\"]",
        "explanation": "\"1/2\" is the only unique fraction with a denominator less-than-or-equal-to 2."
      },
      {
        "input": "n = 3",
        "output": "[\"1/2\",\"1/3\",\"2/3\"]"
      },
      {
        "input": "n = 4",
        "output": "[\"1/2\",\"1/3\",\"1/4\",\"2/3\",\"3/4\"]",
        "explanation": "\"2/4\" is not a simplified fraction because it can be simplified to \"1/2\"."
      },
      {
        "input": "n = 1",
        "output": "[]"
      }
    ],
    "constraints": [
      "1 <= n <= 100"
    ]
  },
  {
    "questionId": 1448,
    "title": "Count Good Nodes in Binary Tree",
    "titleSlug": "count-good-nodes-in-binary-tree",
    "content": "<p>Given a binary tree `root`, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.</p>\n<p>Return the number of good nodes in the binary tree.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_good_nodes_in_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [3,1,4,3,null,1,5]",
        "output": "4",
        "explanation": "Nodes in blue are good."
      },
      {
        "input": "root = [3,3,null,4,2]",
        "output": "3",
        "explanation": "Node 2 -> (3, 3, 2) is not good, because \"3\" is higher than it."
      },
      {
        "input": "root = [1]",
        "output": "1",
        "explanation": "Root is considered as good."
      }
    ],
    "constraints": [
      "The number of nodes in the binary tree is in the range [1, 10^5].",
      "Each node's value is between [-10^4, 10^4]."
    ]
  },
  {
    "questionId": 1450,
    "title": "Number of Students Doing Homework at a Given Time",
    "titleSlug": "number-of-students-doing-homework-at-a-given-time",
    "content": "<p>Given two integer arrays `startTime` and `endTime` and given an integer `queryTime`.</p>\n<p>The `ith` student started doing their homework at the time `startTime[i]` and finished it at time `endTime[i]`.</p>\n<p>Return the number of students doing their homework at time `queryTime`. More formally, return the number of students where `queryTime` lays in the interval `[startTime[i], endTime[i]]` inclusive.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_students_doing_homework_at_a_given_time(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "startTime = [1,2,3], endTime = [3,2,7], queryTime = 4",
        "output": "1",
        "explanation": "We have 3 students where:"
      },
      {
        "input": "startTime = [4], endTime = [4], queryTime = 4",
        "output": "1",
        "explanation": "The only student was doing their homework at the queryTime."
      },
      {
        "input": "startTime = [4], endTime = [4], queryTime = 5",
        "output": "0"
      },
      {
        "input": "startTime = [1,1,1,1], endTime = [1,3,2,4], queryTime = 7",
        "output": "0"
      },
      {
        "input": "startTime = [9,8,7,6,5,4,3,2,1], endTime = [10,10,10,10,10,10,10,10,10], queryTime = 5",
        "output": "5"
      }
    ],
    "constraints": [
      "startTime.length == endTime.length",
      "1 <= startTime.length <= 100",
      "1 <= startTime[i] <= endTime[i] <= 1000",
      "1 <= queryTime <= 1000"
    ]
  },
  {
    "questionId": 1451,
    "title": "Rearrange Words in a Sentence",
    "titleSlug": "rearrange-words-in-a-sentence",
    "content": "<p>Given a sentence `text` (A sentence is a string of space-separated words) in the following format:\nFirst letter is in upper case.</p>\n<p>Each word in `text` are separated by a single space.</p>\n<p>Your task is to rearrange the words in text such that all words are rearranged in an increasing order of their lengths. If two words have the same length, arrange them in their original order.</p>\n<p>Return the new text following the format shown above.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def rearrange_words_in_a_sentence(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "text = \"Leetcode is cool\"",
        "output": "\"Is cool leetcode\"",
        "explanation": "There are 3 words, \"Leetcode\" of length 8, \"is\" of length 2 and \"cool\" of length 4."
      },
      {
        "input": "text = \"Keep calm and code on\"",
        "output": "\"On and keep calm code\"",
        "explanation": "Output is ordered as follows:"
      },
      {
        "input": "text = \"To be or not to be\"",
        "output": "\"To be or to be not\""
      }
    ],
    "constraints": [
      "text begins with a capital letter and then contains lowercase letters and single space between words.",
      "1 <= text.length <= 10^5"
    ]
  },
  {
    "questionId": 1452,
    "title": "People Whose List of Favorite Companies Is Not a Subset of Another List",
    "titleSlug": "people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list",
    "content": "<p>Given the array `favoriteCompanies` where `favoriteCompanies[i]` is the list of favorites companies for the `ith` person (indexed from 0).</p>\n<p>Return the indices of people whose list of favorite companies is not a subset of any other list of favorites companies. You must return the indices in increasing order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def people_whose_list_of_favorite_companies_is_not_a_subset_of_another_list(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "favoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"google\",\"microsoft\"],[\"google\",\"facebook\"],[\"google\"],[\"amazon\"]]",
        "output": "[0,1,4]",
        "explanation": "Person with index=2 has favoriteCompanies[2]=[\"google\",\"facebook\"] which is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] corresponding to the person with index 0."
      },
      {
        "input": "favoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"leetcode\",\"amazon\"],[\"facebook\",\"google\"]]",
        "output": "[0,1]",
        "explanation": "In this case favoriteCompanies[2]=[\"facebook\",\"google\"] is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"], therefore, the answer is [0,1]."
      },
      {
        "input": "favoriteCompanies = [[\"leetcode\"],[\"google\"],[\"facebook\"],[\"amazon\"]]",
        "output": "[0,1,2,3]"
      }
    ],
    "constraints": [
      "1 <= favoriteCompanies.length <= 100",
      "1 <= favoriteCompanies[i].length <= 500",
      "1 <= favoriteCompanies[i][j].length <= 20",
      "All strings in favoriteCompanies[i] are distinct.",
      "All lists of favorite companies are distinct, that is, If we sort alphabetically each list then favoriteCompanies[i] != favoriteCompanies[j].",
      "All strings consist of lowercase English letters only."
    ]
  },
  {
    "questionId": 1455,
    "title": "Check If a Word Occurs As a Prefix of Any Word in a Sentence",
    "titleSlug": "check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence",
    "content": "<p>Given a `sentence` that consists of some words separated by a single space, and a `searchWord`.</p>\n<p>You have to check if `searchWord` is a prefix of any word in `sentence`.</p>\n<p>Return the index of the word in `sentence` where `searchWord` is a prefix of this word (1-indexed).</p>\n<p>If `searchWord` is a prefix of more than one word, return the index of the first word (minimum index). If there is no such word return -1.</p>\n<p>A prefix of a string `S` is any leading contiguous substring of `S`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def check_if_a_word_occurs_as_a_prefix_of_any_word_in_a_sentence(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "sentence = \"i love eating burger\", searchWord = \"burg\"",
        "output": "4",
        "explanation": "\"burg\" is prefix of \"burger\" which is the 4th word in the sentence."
      },
      {
        "input": "sentence = \"this problem is an easy problem\", searchWord = \"pro\"",
        "output": "2",
        "explanation": "\"pro\" is prefix of \"problem\" which is the 2nd and the 6th word in the sentence, but we return 2 as it's the minimal index."
      },
      {
        "input": "sentence = \"i am tired\", searchWord = \"you\"",
        "output": "-1",
        "explanation": "\"you\" is not a prefix of any word in the sentence."
      },
      {
        "input": "sentence = \"i use triple pillow\", searchWord = \"pill\"",
        "output": "4"
      },
      {
        "input": "sentence = \"hello from the other side\", searchWord = \"they\"",
        "output": "-1"
      }
    ],
    "constraints": [
      "1 <= sentence.length <= 100",
      "1 <= searchWord.length <= 10",
      "sentence consists of lowercase English letters and spaces.",
      "searchWord consists of lowercase English letters."
    ]
  },
  {
    "questionId": 1456,
    "title": "Maximum Number of Vowels in a Substring of Given Length",
    "titleSlug": "maximum-number-of-vowels-in-a-substring-of-given-length",
    "content": "<p>Given a string `s` and an integer `k`.</p>\n<p>Return the maximum number of vowel letters in any substring of `s` with length `k`.</p>\n<p>Vowel letters in English are (a, e, i, o, u).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_number_of_vowels_in_a_substring_of_given_length(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"abciiidef\", k = 3",
        "output": "3",
        "explanation": "The substring \"iii\" contains 3 vowel letters."
      },
      {
        "input": "s = \"aeiou\", k = 2",
        "output": "2",
        "explanation": "Any substring of length 2 contains 2 vowels."
      },
      {
        "input": "s = \"leetcode\", k = 3",
        "output": "2",
        "explanation": "\"lee\", \"eet\" and \"ode\" contain 2 vowels."
      },
      {
        "input": "s = \"rhythms\", k = 4",
        "output": "0",
        "explanation": "We can see that s doesn't have any vowel letters."
      },
      {
        "input": "s = \"tryhard\", k = 4",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists of lowercase English letters.",
      "1 <= k <= s.length"
    ]
  },
  {
    "questionId": 1457,
    "title": "Pseudo-Palindromic Paths in a Binary Tree",
    "titleSlug": "pseudo-palindromic-paths-in-a-binary-tree",
    "content": "<p>Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome.</p>\n<p>Return the number of pseudo-palindromic paths going from the root node to leaf nodes.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def pseudo_palindromic_paths_in_a_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [2,3,1,3,1,null,1]",
        "output": "2",
        "explanation": "The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome)."
      },
      {
        "input": "root = [2,1,1,1,3,null,null,null,null,null,1]",
        "output": "1",
        "explanation": "The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the green path [2,1,1], the path [2,1,3,1], and the path [2,1]. Among these paths only the green path is pseudo-palindromic since [2,1,1] can be rearranged in [1,2,1] (palindrome)."
      },
      {
        "input": "root = [9]",
        "output": "1"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 105].",
      "1 <= Node.val <= 9"
    ]
  },
  {
    "questionId": 1460,
    "title": "Make Two Arrays Equal by Reversing Sub-arrays",
    "titleSlug": "make-two-arrays-equal-by-reversing-sub-arrays",
    "content": "<p>Given two integer arrays of equal length `target` and `arr`.</p>\n<p>In one step, you can select any non-empty sub-array of `arr` and reverse it. You are allowed to make any number of steps.</p>\n<p>Return True if you can make `arr` equal to `target`, or False otherwise.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def make_two_arrays_equal_by_reversing_sub_arrays(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "target = [1,2,3,4], arr = [2,4,1,3]",
        "output": "true",
        "explanation": "You can follow the next steps to convert arr to target:"
      },
      {
        "input": "target = [7], arr = [7]",
        "output": "true",
        "explanation": "arr is equal to target without any reverses."
      },
      {
        "input": "target = [1,12], arr = [12,1]",
        "output": "true"
      },
      {
        "input": "target = [3,7,9], arr = [3,7,11]",
        "output": "false",
        "explanation": "arr doesn't have value 9 and it can never be converted to target."
      },
      {
        "input": "target = [1,1,1,1,1], arr = [1,1,1,1,1]",
        "output": "true"
      }
    ],
    "constraints": [
      "target.length == arr.length",
      "1 <= target.length <= 1000",
      "1 <= target[i] <= 1000",
      "1 <= arr[i] <= 1000"
    ]
  },
  {
    "questionId": 1461,
    "title": "Check If a String Contains All Binary Codes of Size K",
    "titleSlug": "check-if-a-string-contains-all-binary-codes-of-size-k",
    "content": "<p>Given a binary string `s` and an integer `k`.</p>\n<p>Return `true` if every binary code of length `k` is a substring of `s`. Otherwise, return `false`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def check_if_a_string_contains_all_binary_codes_of_size_k(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"00110110\", k = 2",
        "output": "true",
        "explanation": "The binary codes of length 2 are \"00\", \"01\", \"10\" and \"11\". They can be all found as substrings at indicies 0, 1, 3 and 2 respectively."
      },
      {
        "input": "s = \"00110\", k = 2",
        "output": "true"
      },
      {
        "input": "s = \"0110\", k = 1",
        "output": "true",
        "explanation": "The binary codes of length 1 are \"0\" and \"1\", it is clear that both exist as a substring."
      },
      {
        "input": "s = \"0110\", k = 2",
        "output": "false",
        "explanation": "The binary code \"00\" is of length 2 and doesn't exist in the array."
      },
      {
        "input": "s = \"0000000001011100\", k = 4",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= s.length <= 5 * 105",
      "s[i] is either '0' or '1'.",
      "1 <= k <= 20"
    ]
  },
  {
    "questionId": 1462,
    "title": "Course Schedule IV",
    "titleSlug": "course-schedule-iv",
    "content": "<p>There are a total of `n` courses you have to take, labeled from `0` to `n-1`.</p>\n<p>Some courses may have direct prerequisites, for example, to take course 0 you have first to take course 1, which is expressed as a pair: `[1,0]`\nGiven the total number of courses `n`, a list of direct `prerequisite` pairs and a list of `queries` pairs.</p>\n<p>You should answer for each `queries[i]` whether the course `queries[i][0]` is a prerequisite of the course `queries[i][1]` or not.</p>\n<p>Return a list of boolean, the answers to the given `queries`.</p>\n<p>Please note that if course a is a prerequisite of course b and course b is a prerequisite of course c, then, course a is a prerequisite of course c.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def course_schedule_iv(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 2, prerequisites = [[1,0]], queries = [[0,1],[1,0]]",
        "output": "[false,true]",
        "explanation": "course 0 is not a prerequisite of course 1 but the opposite is true."
      },
      {
        "input": "n = 2, prerequisites = [], queries = [[1,0],[0,1]]",
        "output": "[false,false]",
        "explanation": "There are no prerequisites and each course is independent."
      },
      {
        "input": "n = 3, prerequisites = [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]]",
        "output": "[true,true]"
      },
      {
        "input": "n = 3, prerequisites = [[1,0],[2,0]], queries = [[0,1],[2,0]]",
        "output": "[false,true]"
      },
      {
        "input": "n = 5, prerequisites = [[0,1],[1,2],[2,3],[3,4]], queries = [[0,4],[4,0],[1,3],[3,0]]",
        "output": "[true,false,true,false]"
      }
    ],
    "constraints": [
      "2 <= n <= 100",
      "0 <= prerequisite.length <= (n * (n - 1) / 2)",
      "0 <= prerequisite[i][0], prerequisite[i][1] < n",
      "prerequisite[i][0] != prerequisite[i][1]",
      "The prerequisites graph has no cycles.",
      "The prerequisites graph has no repeated edges.",
      "1 <= queries.length <= 10^4",
      "queries[i][0] != queries[i][1]"
    ]
  },
  {
    "questionId": 1464,
    "title": "Maximum Product of Two Elements in an Array",
    "titleSlug": "maximum-product-of-two-elements-in-an-array",
    "content": "<p>Given the array of integers `nums`, you will choose two different indices `i` and `j` of that array. Return the maximum value of `(nums[i]-1)*(nums[j]-1)`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_product_of_two_elements_in_an_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [3,4,5,2]",
        "output": "12",
        "explanation": "If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12."
      },
      {
        "input": "nums = [1,5,4,5]",
        "output": "16",
        "explanation": "Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16."
      },
      {
        "input": "nums = [3,7]",
        "output": "12"
      }
    ],
    "constraints": [
      "2 <= nums.length <= 500",
      "1 <= nums[i] <= 10^3"
    ]
  },
  {
    "questionId": 1465,
    "title": "Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",
    "titleSlug": "maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts",
    "content": "<p>Given a rectangular cake with height `h` and width `w`, and two arrays of integers `horizontalCuts` and `verticalCuts` where `horizontalCuts[i]` is the distance from the top of the rectangular cake to the `ith` horizontal cut and similarly, `verticalCuts[j]` is the distance from the left of the rectangular cake to the `jth` vertical cut.</p>\n<p>Return the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays `horizontalCuts` and `verticalCuts`. Since the answer can be a huge number, return this modulo 10^9 + 7.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_area_of_a_piece_of_cake_after_horizontal_and_vertical_cuts(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]",
        "output": "4",
        "explanation": "The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green piece of cake has the maximum area."
      },
      {
        "input": "h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]",
        "output": "6",
        "explanation": "The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green and yellow pieces of cake have the maximum area."
      },
      {
        "input": "h = 5, w = 4, horizontalCuts = [3], verticalCuts = [3]",
        "output": "9"
      }
    ],
    "constraints": [
      "2 <= h, w <= 10^9",
      "1 <= horizontalCuts.length < min(h, 10^5)",
      "1 <= verticalCuts.length < min(w, 10^5)",
      "1 <= horizontalCuts[i] < h",
      "1 <= verticalCuts[i] < w",
      "It is guaranteed that all elements in horizontalCuts are distinct.",
      "It is guaranteed that all elements in verticalCuts are distinct."
    ]
  },
  {
    "questionId": 1466,
    "title": "Reorder Routes to Make All Paths Lead to the City Zero",
    "titleSlug": "reorder-routes-to-make-all-paths-lead-to-the-city-zero",
    "content": "<p>There are `n` cities numbered from `0` to `n-1` and `n-1` roads such that there is only one way to travel between two different cities (this network form a tree). Last year, The ministry of transport decided to orient the roads in one direction because they are too narrow.</p>\n<p>Roads are represented by `connections` where `connections[i] = [a, b]` represents a road from city `a` to `b`.</p>\n<p>This year, there will be a big event in the capital (city 0), and many people want to travel to this city.</p>\n<p>Your task consists of reorienting some roads such that each city can visit the city 0. Return the minimum number of edges changed.</p>\n<p>It's guaranteed that each city can reach the city 0 after reorder.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def reorder_routes_to_make_all_paths_lead_to_the_city_zero(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]",
        "output": "3",
        "explanation": "Change the direction of edges show in red such that each node can reach the node 0 (capital)."
      },
      {
        "input": "n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]",
        "output": "2",
        "explanation": "Change the direction of edges show in red such that each node can reach the node 0 (capital)."
      },
      {
        "input": "n = 3, connections = [[1,0],[2,0]]",
        "output": "0"
      }
    ],
    "constraints": [
      "2 <= n <= 5 * 10^4",
      "connections.length == n-1",
      "connections[i].length == 2",
      "0 <= connections[i][0], connections[i][1] <= n-1",
      "connections[i][0] != connections[i][1]"
    ]
  },
  {
    "questionId": 1469,
    "title": "Find All The Lonely Nodes",
    "titleSlug": "find-all-the-lonely-nodes",
    "content": "<p>In a binary tree, a lonely node is a node that is the only child of its parent node. The root of the tree is not lonely because it does not have a parent node.</p>\n<p>Given the `root` of a binary tree, return an array containing the values of all lonely nodes in the tree. Return the list in any order.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_all_the_lonely_nodes(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2,3,null,4]",
        "output": "[4]",
        "explanation": "Light blue node is the only lonely node."
      },
      {
        "input": "root = [7,1,4,6,null,5,3,null,null,null,null,null,2]",
        "output": "[6,2]",
        "explanation": "Light blue nodes are lonely nodes."
      },
      {
        "input": "root = [11,99,88,77,null,null,66,55,null,null,44,33,null,null,22]",
        "output": "[77,55,33,66,44,22]",
        "explanation": "Nodes 99 and 88 share the same parent. Node 11 is the root."
      },
      {
        "input": "root = [197]",
        "output": "[]"
      },
      {
        "input": "root = [31,null,78,null,28]",
        "output": "[78,28]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 1000].",
      "Each node's value is between [1, 10^6]."
    ]
  },
  {
    "questionId": 1470,
    "title": "Shuffle the Array",
    "titleSlug": "shuffle-the-array",
    "content": "<p>Given the array `nums` consisting of `2n` elements in the form `[x1,x2,...,xn,y1,y2,...,yn]`.</p>\n<p>Return the array in the form `[x1,y1,x2,y2,...,xn,yn]`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def shuffle_the_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [2,5,1,3,4,7], n = 3",
        "output": "[2,3,5,4,1,7]",
        "explanation": "Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7]."
      },
      {
        "input": "nums = [1,2,3,4,4,3,2,1], n = 4",
        "output": "[1,4,2,3,3,2,4,1]"
      },
      {
        "input": "nums = [1,1,2,2], n = 2",
        "output": "[1,2,1,2]"
      }
    ],
    "constraints": [
      "1 <= n <= 500",
      "nums.length == 2n",
      "1 <= nums[i] <= 10^3"
    ]
  },
  {
    "questionId": 1471,
    "title": "The k Strongest Values in an Array",
    "titleSlug": "the-k-strongest-values-in-an-array",
    "content": "<p>Given an array of integers `arr` and an integer `k`.</p>\n<p>A value `arr[i]` is said to be stronger than a value `arr[j]` if `|arr[i] - m| > |arr[j] - m|` where `m` is the median of the array.</p>\n<p>If `|arr[i] - m| == |arr[j] - m|`, then `arr[i]` is said to be stronger than `arr[j]` if `arr[i] > arr[j]`.</p>\n<p>Return a list of the strongest `k` values in the array. return the answer in any arbitrary order.</p>\n<p>Median is the middle value in an ordered integer list. More formally, if the length of the list is n, the median is the element in position `((n - 1) / 2)` in the sorted list (0-indexed).</p>\n<p>For `arr = [6, -3, 7, 2, 11]`, `n = 5` and the median is obtained by sorting the array `arr = [-3, 2, 6, 7, 11]` and the median is `arr[m]` where `m = ((5 - 1) / 2) = 2`. The median is `6`.</p>\n<p>For `arr = [-7, 22, 17, 3]`, `n = 4` and the median is obtained by sorting the array `arr = [-7, 3, 17, 22]` and the median is `arr[m]` where `m = ((4 - 1) / 2) = 1`. The median is `3`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def the_k_strongest_values_in_an_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [1,2,3,4,5], k = 2",
        "output": "[5,1]",
        "explanation": "Median is 3, the elements of the array sorted by the strongest are [5,1,4,2,3]. The strongest 2 elements are [5, 1]. [1, 5] is also accepted answer."
      },
      {
        "input": "arr = [1,1,3,5,5], k = 2",
        "output": "[5,5]",
        "explanation": "Median is 3, the elements of the array sorted by the strongest are [5,5,1,1,3]. The strongest 2 elements are [5, 5]."
      },
      {
        "input": "arr = [6,7,11,7,6,8], k = 5",
        "output": "[11,8,6,6,7]",
        "explanation": "Median is 7, the elements of the array sorted by the strongest are [11,8,6,6,7,7]."
      },
      {
        "input": "arr = [6,-3,7,2,11], k = 3",
        "output": "[-3,11,2]"
      },
      {
        "input": "arr = [-7,22,17,3], k = 2",
        "output": "[22,17]"
      }
    ],
    "constraints": [
      "1 <= arr.length <= 10^5",
      "-10^5 <= arr[i] <= 10^5",
      "1 <= k <= arr.length"
    ]
  },
  {
    "questionId": 1472,
    "title": "Design Browser History",
    "titleSlug": "design-browser-history",
    "content": "<p>You have a browser of one tab where you start on the `homepage` and you can visit another `url`, get back in the history number of `steps` or move forward in the history number of `steps`.</p>\n<p>Implement the `BrowserHistory` class:\n`BrowserHistory(string homepage)` Initializes the object with the `homepage` of the browser.</p>\n<p>`void visit(string url)` Visits `url` from the current page. It clears up all the forward history.</p>\n<p>`string back(int steps)` Move `steps` back in history. If you can only return `x` steps in the history and `steps > x`, you will return only `x` steps. Return the current `url` after moving back in history at most `steps`.</p>\n<p>`string forward(int steps)` Move `steps` forward in history. If you can only forward `x` steps in the history and `steps > x`, you will forward only `x` steps. Return the current `url` after forwarding in history at most `steps`.</p>\n<p>Example:\nInput:\n[\"BrowserHistory\",\"visit\",\"visit\",\"visit\",\"back\",\"back\",\"forward\",\"visit\",\"forward\",\"back\",\"back\"]\n[[\"leetcode.com\"],[\"google.com\"],[\"facebook.com\"],[\"youtube.com\"],[1],[1],[1],[\"linkedin.com\"],[2],[2],[7]]\nOutput:\n[null,null,null,null,\"facebook.com\",\"google.com\",\"facebook.com\",null,\"linkedin.com\",\"google.com\",\"leetcode.com\"]\nExplanation:\nBrowserHistory browserHistory = new BrowserHistory(\"leetcode.com\");\nbrowserHistory.visit(\"google.com\");       // You are in \"leetcode.com\". Visit \"google.com\"\nbrowserHistory.visit(\"facebook.com\");     // You are in \"google.com\". Visit \"facebook.com\"\nbrowserHistory.visit(\"youtube.com\");      // You are in \"facebook.com\". Visit \"youtube.com\"\nbrowserHistory.back(1);                   // You are in \"youtube.com\", move back to \"facebook.com\" return \"facebook.com\"\nbrowserHistory.back(1);                   // You are in \"facebook.com\", move back to \"google.com\" return \"google.com\"\nbrowserHistory.forward(1);                // You are in \"google.com\", move forward to \"facebook.com\" return \"facebook.com\"\nbrowserHistory.visit(\"linkedin.com\");     // You are in \"facebook.com\". Visit \"linkedin.com\"\nbrowserHistory.forward(2);                // You are in \"linkedin.com\", you cannot move forward any steps.</p>\n<p>browserHistory.back(2);                   // You are in \"linkedin.com\", move back two steps to \"facebook.com\" then to \"google.com\". return \"google.com\"\nbrowserHistory.back(7);                   // You are in \"google.com\", you can move back only one step to \"leetcode.com\". return \"leetcode.com\"</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def design_browser_history(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= homepage.length <= 20",
      "1 <= url.length <= 20",
      "1 <= steps <= 100",
      "homepage and url consist of  '.' or lower case English letters.",
      "At most 5000 calls will be made to visit, back, and forward."
    ]
  },
  {
    "questionId": 1474,
    "title": "Delete N Nodes After M Nodes of a Linked List",
    "titleSlug": "delete-n-nodes-after-m-nodes-of-a-linked-list",
    "content": "<p>Given the `head` of a linked list and two integers `m` and `n`. Traverse the linked list and remove some nodes in the following way:\nStart with the head as the current node.</p>\n<p>Keep the first `m` nodes starting with the current node.</p>\n<p>Remove the next `n` nodes\nKeep repeating steps 2 and 3 until you reach the end of the list.</p>\n<p>Return the head of the modified list after removing the mentioned nodes.</p>\n<p>Follow up question: How can you solve this problem by modifying the list in-place?</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def delete_n_nodes_after_m_nodes_of_a_linked_list(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13], m = 2, n = 3",
        "output": "[1,2,6,7,11,12]",
        "explanation": "Keep the first (m = 2) nodes starting from the head of the linked List  (1 ->2) show in black nodes."
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11], m = 1, n = 3",
        "output": "[1,5,9]",
        "explanation": "Head of linked list after removing nodes is returned."
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11], m = 3, n = 1",
        "output": "[1,2,3,5,6,7,9,10,11]"
      },
      {
        "input": "head = [9,3,7,7,9,10,8,2], m = 1, n = 2",
        "output": "[9,7,8]"
      }
    ],
    "constraints": [
      "The given linked list will contain between 1 and 10^4 nodes.",
      "The value of each node in the linked list will be in the range [1, 10^6].",
      "1 <= m,n <= 1000"
    ]
  },
  {
    "questionId": 1475,
    "title": "Final Prices With a Special Discount in a Shop",
    "titleSlug": "final-prices-with-a-special-discount-in-a-shop",
    "content": "<p>Given the array `prices` where `prices[i]` is the price of the `ith` item in a shop. There is a special discount for items in the shop, if you buy the `ith` item, then you will receive a discount equivalent to `prices[j]` where `j` is the minimum index such that `j > i` and `prices[j] <= prices[i]`, otherwise, you will not receive any discount at all.</p>\n<p>Return an array where the `ith` element is the final price you will pay for the `ith` item of the shop considering the special discount.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def final_prices_with_a_special_discount_in_a_shop(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "prices = [8,4,6,2,3]",
        "output": "[4,2,4,2,3]",
        "explanation": "For item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, therefore, the final price you will pay is 8 - 4 = 4."
      },
      {
        "input": "prices = [1,2,3,4,5]",
        "output": "[1,2,3,4,5]",
        "explanation": "In this case, for all items, you will not receive any discount at all."
      },
      {
        "input": "prices = [10,1,1,6]",
        "output": "[9,0,1,6]"
      }
    ],
    "constraints": [
      "1 <= prices.length <= 500",
      "1 <= prices[i] <= 10^3"
    ]
  },
  {
    "questionId": 1476,
    "title": "Subrectangle Queries",
    "titleSlug": "subrectangle-queries",
    "content": "<p>Implement the class `SubrectangleQueries` which receives a `rows x cols` rectangle as a matrix of integers in the constructor and supports two methods:\n1.` updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)`\nUpdates all values with `newValue` in the subrectangle whose upper left coordinate is `(row1,col1)` and bottom right coordinate is `(row2,col2)`.</p>\n<p>2.` getValue(int row, int col)`\nReturns the current value of the coordinate `(row,col)` from the rectangle.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def subrectangle_queries(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "There will be at most 500 operations considering both methods: updateSubrectangle and getValue.",
      "1 <= rows, cols <= 100",
      "rows == rectangle.length",
      "cols == rectangle[i].length",
      "0 <= row1 <= row2 < rows",
      "0 <= col1 <= col2 < cols",
      "1 <= newValue, rectangle[i][j] <= 10^9",
      "0 <= row < rows",
      "0 <= col < cols"
    ]
  },
  {
    "questionId": 1477,
    "title": "Find Two Non-overlapping Sub-arrays Each With Target Sum",
    "titleSlug": "find-two-non-overlapping-sub-arrays-each-with-target-sum",
    "content": "<p>Given an array of integers `arr` and an integer `target`.</p>\n<p>You have to find two non-overlapping sub-arrays of `arr` each with sum equal `target`. There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is minimum.</p>\n<p>Return the minimum sum of the lengths of the two required sub-arrays, or return -1 if you cannot find such two sub-arrays.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_two_non_overlapping_sub_arrays_each_with_target_sum(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [3,2,2,4,3], target = 3",
        "output": "2",
        "explanation": "Only two sub-arrays have sum = 3 ([3] and [3]). The sum of their lengths is 2."
      },
      {
        "input": "arr = [7,3,4,7], target = 7",
        "output": "2",
        "explanation": "Although we have three non-overlapping sub-arrays of sum = 7 ([7], [3,4] and [7]), but we will choose the first and third sub-arrays as the sum of their lengths is 2."
      },
      {
        "input": "arr = [4,3,2,6,2,3,4], target = 6",
        "output": "-1",
        "explanation": "We have only one sub-array of sum = 6."
      },
      {
        "input": "arr = [5,5,4,4,5], target = 3",
        "output": "-1",
        "explanation": "We cannot find a sub-array of sum = 3."
      },
      {
        "input": "arr = [3,1,1,1,5,1,2,1], target = 3",
        "output": "3",
        "explanation": "Note that sub-arrays [1,2] and [2,1] cannot be an answer because they overlap."
      }
    ],
    "constraints": [
      "1 <= arr.length <= 10^5",
      "1 <= arr[i] <= 1000",
      "1 <= target <= 10^8"
    ]
  },
  {
    "questionId": 1480,
    "title": "Running Sum of 1d Array",
    "titleSlug": "running-sum-of-1d-array",
    "content": "<p>Given an array `nums`. We define a running sum of an array as `runningSum[i] = sum(nums[0]...nums[i])`.</p>\n<p>Return the running sum of `nums`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def running_sum_of_1d_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3,4]",
        "output": "[1,3,6,10]",
        "explanation": "Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4]."
      },
      {
        "input": "nums = [1,1,1,1,1]",
        "output": "[1,2,3,4,5]",
        "explanation": "Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1]."
      },
      {
        "input": "nums = [3,1,2,10,1]",
        "output": "[3,4,6,16,17]"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 1000",
      "-10^6 <= nums[i] <= 10^6"
    ]
  },
  {
    "questionId": 1481,
    "title": "Least Number of Unique Integers after K Removals",
    "titleSlug": "least-number-of-unique-integers-after-k-removals",
    "content": "<p>Given an array of integers `arr` and an integer `k`. Find the least number of unique integers after removing exactly `k` elements.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def least_number_of_unique_integers_after_k_removals(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [5,5,4], k = 1",
        "output": "1",
        "explanation": "Remove the single 4, only 5 is left."
      },
      {
        "input": "arr = [4,3,1,1,3,3,2], k = 3",
        "output": "2",
        "explanation": "Remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left."
      }
    ],
    "constraints": [
      "1 <= arr.length <= 10^5",
      "1 <= arr[i] <= 10^9",
      "0 <= k <= arr.length"
    ]
  },
  {
    "questionId": 1482,
    "title": "Minimum Number of Days to Make m Bouquets",
    "titleSlug": "minimum-number-of-days-to-make-m-bouquets",
    "content": "<p>Given an integer array `bloomDay`, an integer `m` and an integer `k`.</p>\n<p>We need to make `m` bouquets. To make a bouquet, you need to use `k` adjacent flowers from the garden.</p>\n<p>The garden consists of `n` flowers, the `ith` flower will bloom in the `bloomDay[i]` and then can be used in exactly one bouquet.</p>\n<p>Return the minimum number of days you need to wait to be able to make `m` bouquets from the garden. If it is impossible to make `m` bouquets return -1.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_number_of_days_to_make_m_bouquets(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "bloomDay = [1,10,3,10,2], m = 3, k = 1",
        "output": "3",
        "explanation": "Let's see what happened in the first three days. x means flower bloomed and _ means flower didn't bloom in the garden."
      },
      {
        "input": "bloomDay = [1,10,3,10,2], m = 3, k = 2",
        "output": "-1",
        "explanation": "We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1."
      },
      {
        "input": "bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3",
        "output": "12",
        "explanation": "We need 2 bouquets each should have 3 flowers."
      },
      {
        "input": "bloomDay = [1000000000,1000000000], m = 1, k = 1",
        "output": "1000000000",
        "explanation": "You need to wait 1000000000 days to have a flower ready for a bouquet."
      },
      {
        "input": "bloomDay = [1,10,2,9,3,8,4,7,5,6], m = 4, k = 2",
        "output": "9"
      }
    ],
    "constraints": [
      "bloomDay.length == n",
      "1 <= n <= 10^5",
      "1 <= bloomDay[i] <= 10^9",
      "1 <= m <= 10^6",
      "1 <= k <= n"
    ]
  },
  {
    "questionId": 1485,
    "title": "Clone Binary Tree With Random Pointer",
    "titleSlug": "clone-binary-tree-with-random-pointer",
    "content": "<p>A binary tree is given such that each node contains an additional random pointer which could point to any node in the tree or null.</p>\n<p>Return a deep copy of the tree.</p>\n<p>The tree is represented in the same input/output way as normal binary trees where each node is represented as a pair of `[val, random_index]` where:\n`val`: an integer representing `Node.val`\n`random_index`: the index of the node (in the input) where the random pointer points to, or `null` if it does not point to any node.</p>\n<p>You will be given the tree in class `Node` and you should return the cloned tree in class `NodeCopy`. `NodeCopy` class is just a clone of `Node` class with the same attributes and constructors.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def clone_binary_tree_with_random_pointer(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [[1,null],null,[4,3],[7,0]]",
        "output": "[[1,null],null,[4,3],[7,0]]",
        "explanation": "The original binary tree is [1,null,4,7]."
      },
      {
        "input": "root = [[1,4],null,[1,0],null,[1,5],[1,5]]",
        "output": "[[1,4],null,[1,0],null,[1,5],[1,5]]",
        "explanation": "The random pointer of a node can be the node itself."
      },
      {
        "input": "root = [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]",
        "output": "[[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]"
      },
      {
        "input": "root = []",
        "output": "[]"
      },
      {
        "input": "root = [[1,null],null,[2,null],null,[1,null]]",
        "output": "[[1,null],null,[2,null],null,[1,null]]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 1000].",
      "Each node's value is between [1, 10^6]."
    ]
  },
  {
    "questionId": 1486,
    "title": "XOR Operation in an Array",
    "titleSlug": "xor-operation-in-an-array",
    "content": "<p>Given an integer `n` and an integer `start`.</p>\n<p>Define an array `nums` where `nums[i] = start + 2*i` (0-indexed) and `n == nums.length`.</p>\n<p>Return the bitwise XOR of all elements of `nums`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def xor_operation_in_an_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 5, start = 0",
        "output": "8",
        "explanation": "Array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8."
      },
      {
        "input": "n = 4, start = 3",
        "output": "8",
        "explanation": "Array nums is equal to [3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8."
      },
      {
        "input": "n = 1, start = 7",
        "output": "7"
      },
      {
        "input": "n = 10, start = 5",
        "output": "2"
      }
    ],
    "constraints": [
      "1 <= n <= 1000",
      "0 <= start <= 1000",
      "n == nums.length"
    ]
  },
  {
    "questionId": 1487,
    "title": "Making File Names Unique",
    "titleSlug": "making-file-names-unique",
    "content": "<p>Given an array of strings `names` of size `n`. You will create `n` folders in your file system such that, at the `ith` minute, you will create a folder with the name `names[i]`.</p>\n<p>Since two files cannot have the same name, if you enter a folder name which is previously used, the system will have a suffix addition to its name in the form of `(k)`, where, `k` is the smallest positive integer such that the obtained name remains unique.</p>\n<p>Return an array of strings of length `n` where `ans[i]` is the actual name the system will assign to the `ith` folder when you create it.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def making_file_names_unique(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "names = [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]",
        "output": "[\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]",
        "explanation": "Let's see how the file system creates folder names:"
      },
      {
        "input": "names = [\"gta\",\"gta(1)\",\"gta\",\"avalon\"]",
        "output": "[\"gta\",\"gta(1)\",\"gta(2)\",\"avalon\"]",
        "explanation": "Let's see how the file system creates folder names:"
      },
      {
        "input": "names = [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece\"]",
        "output": "[\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece(4)\"]",
        "explanation": "When the last folder is created, the smallest positive valid k is 4, and it becomes \"onepiece(4)\"."
      },
      {
        "input": "names = [\"wano\",\"wano\",\"wano\",\"wano\"]",
        "output": "[\"wano\",\"wano(1)\",\"wano(2)\",\"wano(3)\"]",
        "explanation": "Just increase the value of k each time you create folder \"wano\"."
      },
      {
        "input": "names = [\"kaido\",\"kaido(1)\",\"kaido\",\"kaido(1)\"]",
        "output": "[\"kaido\",\"kaido(1)\",\"kaido(2)\",\"kaido(1)(1)\"]",
        "explanation": "Please note that system adds the suffix (k) to current name even it contained the same suffix before."
      }
    ],
    "constraints": [
      "1 <= names.length <= 5 * 10^4",
      "1 <= names[i].length <= 20",
      "names[i] consists of lower case English letters, digits and/or round brackets."
    ]
  },
  {
    "questionId": 1488,
    "title": "Avoid Flood in The City",
    "titleSlug": "avoid-flood-in-the-city",
    "content": "<p>Your country has an infinite number of lakes. Initially, all the lakes are empty, but when it rains over the `nth` lake, the `nth` lake becomes full of water. If it rains over a lake which is full of water, there will be a flood. Your goal is to avoid the flood in any lake.</p>\n<p>Given an integer array `rains` where:\n`rains[i] > 0` means there will be rains over the `rains[i]` lake.</p>\n<p>`rains[i] == 0` means there are no rains this day and you can choose one lake this day and dry it.</p>\n<p>Return an array `ans` where:\n`ans.length == rains.length`\n`ans[i] == -1` if `rains[i] > 0`.</p>\n<p>`ans[i]` is the lake you choose to dry in the `ith` day if `rains[i] == 0`.</p>\n<p>If there are multiple valid answers return any of them. If it is impossible to avoid flood return an empty array.</p>\n<p>Notice that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes. (see example 4)</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def avoid_flood_in_the_city(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "rains = [1,2,3,4]",
        "output": "[-1,-1,-1,-1]",
        "explanation": "After the first day full lakes are [1]"
      },
      {
        "input": "rains = [1,2,0,0,2,1]",
        "output": "[-1,-1,2,1,-1,-1]",
        "explanation": "After the first day full lakes are [1]"
      },
      {
        "input": "rains = [1,2,0,1,2]",
        "output": "[]",
        "explanation": "After the second day, full lakes are  [1,2]. We have to dry one lake in the third day."
      },
      {
        "input": "rains = [69,0,0,0,69]",
        "output": "[-1,69,1,1,-1]",
        "explanation": "Any solution on one of the forms [-1,69,x,y,-1], [-1,x,69,y,-1] or [-1,x,y,69,-1] is acceptable where 1 <= x,y <= 10^9"
      },
      {
        "input": "rains = [10,20,20]",
        "output": "[]",
        "explanation": "It will rain over lake 20 two consecutive days. There is no chance to dry any lake."
      }
    ],
    "constraints": [
      "1 <= rains.length <= 105",
      "0 <= rains[i] <= 109"
    ]
  },
  {
    "questionId": 1490,
    "title": "Clone N-ary Tree",
    "titleSlug": "clone-n-ary-tree",
    "content": "<p>Given a `root` of an N-ary tree, return a deep copy (clone) of the tree.</p>\n<p>Each node in the n-ary tree contains a val (`int`) and a list (`List[Node]`) of its children.</p>\n<p>class Node {\n    public int val;\n    public List<Node> children;\n}\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).</p>\n<p>Follow up: Can your solution work for the graph problem?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def clone_n_ary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,null,3,2,4,null,5,6]",
        "output": "[1,null,3,2,4,null,5,6]"
      },
      {
        "input": "root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
        "output": "[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]"
      }
    ],
    "constraints": [
      "The depth of the n-ary tree is less than or equal to 1000.",
      "The total number of nodes is between [0, 10^4]."
    ]
  },
  {
    "questionId": 1491,
    "title": "Average Salary Excluding the Minimum and Maximum Salary",
    "titleSlug": "average-salary-excluding-the-minimum-and-maximum-salary",
    "content": "<p>Given an array of unique integers `salary` where `salary[i]` is the salary of the employee `i`.</p>\n<p>Return the average salary of employees excluding the minimum and maximum salary.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def average_salary_excluding_the_minimum_and_maximum_salary(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "salary = [4000,3000,1000,2000]",
        "output": "2500.00000",
        "explanation": "Minimum salary and maximum salary are 1000 and 4000 respectively."
      },
      {
        "input": "salary = [1000,2000,3000]",
        "output": "2000.00000",
        "explanation": "Minimum salary and maximum salary are 1000 and 3000 respectively."
      },
      {
        "input": "salary = [6000,5000,4000,3000,2000,1000]",
        "output": "3500.00000"
      },
      {
        "input": "salary = [8000,9000,2000,3000,6000,1000]",
        "output": "4750.00000"
      }
    ],
    "constraints": [
      "3 <= salary.length <= 100",
      "10^3 <= salary[i] <= 10^6",
      "salary[i] is unique.",
      "Answers within 10^-5 of the actual value will be accepted as correct."
    ]
  },
  {
    "questionId": 1492,
    "title": "The kth Factor of n",
    "titleSlug": "the-kth-factor-of-n",
    "content": "<p>Given two positive integers `n` and `k`.</p>\n<p>A factor of an integer `n` is defined as an integer `i` where `n % i == 0`.</p>\n<p>Consider a list of all factors of `n` sorted in ascending order, return the `kth` factor in this list or return -1 if `n` has less than `k` factors.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def the_kth_factor_of_n(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 12, k = 3",
        "output": "3",
        "explanation": "Factors list is [1, 2, 3, 4, 6, 12], the 3rd factor is 3."
      },
      {
        "input": "n = 7, k = 2",
        "output": "7",
        "explanation": "Factors list is [1, 7], the 2nd factor is 7."
      },
      {
        "input": "n = 4, k = 4",
        "output": "-1",
        "explanation": "Factors list is [1, 2, 4], there is only 3 factors. We should return -1."
      },
      {
        "input": "n = 1, k = 1",
        "output": "1",
        "explanation": "Factors list is [1], the 1st factor is 1."
      },
      {
        "input": "n = 1000, k = 3",
        "output": "4",
        "explanation": "Factors list is [1, 2, 4, 5, 8, 10, 20, 25, 40, 50, 100, 125, 200, 250, 500, 1000]."
      }
    ],
    "constraints": [
      "1 <= k <= n <= 1000"
    ]
  },
  {
    "questionId": 1493,
    "title": "Longest Subarray of 1's After Deleting One Element",
    "titleSlug": "longest-subarray-of-1s-after-deleting-one-element",
    "content": "<p>Given a binary array `nums`, you should delete one element from it.</p>\n<p>Return the size of the longest non-empty subarray containing only 1's in the resulting array.</p>\n<p>Return 0 if there is no such subarray.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_subarray_of_1s_after_deleting_one_element(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,1,0,1]",
        "output": "3",
        "explanation": "After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's."
      },
      {
        "input": "nums = [0,1,1,1,0,1,1,0,1]",
        "output": "5",
        "explanation": "After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1]."
      },
      {
        "input": "nums = [1,1,1]",
        "output": "2",
        "explanation": "You must delete one element."
      },
      {
        "input": "nums = [1,1,0,0,1,1,1,0,1]",
        "output": "4"
      },
      {
        "input": "nums = [0,0,0]",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^5",
      "nums[i] is either 0 or 1."
    ]
  },
  {
    "questionId": 1496,
    "title": "Path Crossing",
    "titleSlug": "path-crossing",
    "content": "<p>Given a string `path`, where `path[i] = 'N'`, `'S'`, `'E'` or `'W'`, each representing moving one unit north, south, east, or west, respectively. You start at the origin `(0, 0)` on a 2D plane and walk on the path specified by `path`.</p>\n<p>Return `True` if the path crosses itself at any point, that is, if at any time you are on a location you've previously visited. Return `False` otherwise.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def path_crossing(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "path = \"NES\"",
        "output": "false",
        "explanation": "Notice that the path doesn't cross any point more than once."
      },
      {
        "input": "path = \"NESWW\"",
        "output": "true",
        "explanation": "Notice that the path visits the origin twice."
      }
    ],
    "constraints": [
      "1 <= path.length <= 10^4",
      "path will only consist of characters in {'N', 'S', 'E', 'W}"
    ]
  },
  {
    "questionId": 1497,
    "title": "Check If Array Pairs Are Divisible by k",
    "titleSlug": "check-if-array-pairs-are-divisible-by-k",
    "content": "<p>Given an array of integers `arr` of even length `n` and an integer `k`.</p>\n<p>We want to divide the array into exactly `n / 2` pairs such that the sum of each pair is divisible by `k`.</p>\n<p>Return True If you can find a way to do that or False otherwise.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def check_if_array_pairs_are_divisible_by_k(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [1,2,3,4,5,10,6,7,8,9], k = 5",
        "output": "true",
        "explanation": "Pairs are (1,9),(2,8),(3,7),(4,6) and (5,10)."
      },
      {
        "input": "arr = [1,2,3,4,5,6], k = 7",
        "output": "true",
        "explanation": "Pairs are (1,6),(2,5) and(3,4)."
      },
      {
        "input": "arr = [1,2,3,4,5,6], k = 10",
        "output": "false",
        "explanation": "You can try all possible pairs to see that there is no way to divide arr into 3 pairs each with sum divisible by 10."
      },
      {
        "input": "arr = [-10,10], k = 2",
        "output": "true"
      },
      {
        "input": "arr = [-1,1,-2,2,-3,3,-4,4], k = 3",
        "output": "true"
      }
    ],
    "constraints": [
      "arr.length == n",
      "1 <= n <= 105",
      "n is even.",
      "-109 <= arr[i] <= 109",
      "1 <= k <= 105"
    ]
  },
  {
    "questionId": 1498,
    "title": "Number of Subsequences That Satisfy the Given Sum Condition",
    "titleSlug": "number-of-subsequences-that-satisfy-the-given-sum-condition",
    "content": "<p>Given an array of integers `nums` and an integer `target`.</p>\n<p>Return the number of non-empty subsequences of `nums` such that the sum of the minimum and maximum element on it is less or equal to `target`. Since the answer may be too large, return it modulo `109 + 7`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_subsequences_that_satisfy_the_given_sum_condition(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [3,5,6,7], target = 9",
        "output": "4",
        "explanation": "There are 4 subsequences that satisfy the condition."
      },
      {
        "input": "nums = [3,3,6,8], target = 10",
        "output": "6",
        "explanation": "There are 6 subsequences that satisfy the condition. (nums can have repeated numbers)."
      },
      {
        "input": "nums = [2,3,3,4,6,7], target = 12",
        "output": "61",
        "explanation": "There are 63 non-empty subsequences, two of them don't satisfy the condition ([6,7], [7])."
      },
      {
        "input": "nums = [5,2,4,1,7,6,8], target = 16",
        "output": "127",
        "explanation": "All non-empty subset satisfy the condition (2^7 - 1) = 127"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 105",
      "1 <= nums[i] <= 106",
      "1 <= target <= 106"
    ]
  },
  {
    "questionId": 1500,
    "title": "Design a File Sharing System",
    "titleSlug": "design-a-file-sharing-system",
    "content": "<p>We will use a file-sharing system to share a very large file which consists of `m` small chunks with IDs from `1` to `m`.</p>\n<p>When users join the system, the system should assign a unique ID to them. The unique ID should be used once for each user, but when a user leaves the system, the ID can be reused again.</p>\n<p>Users can request a certain chunk of the file, the system should return a list of IDs of all the users who own this chunk. If the user receive a non-empty list of IDs, they receive the requested chunk successfully.</p>\n<p>Implement the `FileSharing` class:\n`FileSharing(int m)` Initializes the object with a file of `m` chunks.</p>\n<p>`int join(int[] ownedChunks)`: A new user joined the system owning some chunks of the file, the system should assign an id to the user which is the smallest positive integer not taken by any other user. Return the assigned id.</p>\n<p>`void leave(int userID)`: The user with `userID` will leave the system, you cannot take file chunks from them anymore.</p>\n<p>`int[] request(int userID, int chunkID)`: The user `userID` requested the file chunk with `chunkID`. Return a list of the IDs of all users that own this chunk sorted in ascending order.</p>\n<p>Follow-ups:\nWhat happens if the system identifies the user by their IP address instead of their unique ID and users disconnect and connect from the system with the same IP?\nIf the users in the system join and leave the system frequently without requesting any chunks, will your solution still be efficient?\nIf all each user join the system one time, request all files and then leave, will your solution still be efficient?\nIf the system will be used to share `n` files where the `ith` file consists of `m[i]`, what are the changes you have to do?</p>\n<p>Example:\nInput:\n[\"FileSharing\",\"join\",\"join\",\"join\",\"request\",\"request\",\"leave\",\"request\",\"leave\",\"join\"]\n[[4],[[1,2]],[[2,3]],[[4]],[1,3],[2,2],[1],[2,1],[2],[[]]]\nOutput:\n[null,1,2,3,[2],[1,2],null,[],null,1]\nExplanation:\nFileSharing fileSharing = new FileSharing(4); // We use the system to share a file of 4 chunks.</p>\n<p>fileSharing.join([1, 2]);    // A user who has chunks [1,2] joined the system, assign id = 1 to them and return 1.</p>\n<p>fileSharing.join([2, 3]);    // A user who has chunks [2,3] joined the system, assign id = 2 to them and return 2.</p>\n<p>fileSharing.join([4]);       // A user who has chunk [4] joined the system, assign id = 3 to them and return 3.</p>\n<p>fileSharing.request(1, 3);   // The user with id = 1 requested the third file chunk, as only the user with id = 2 has the file, return [2] . Notice that user 1 now has chunks [1,2,3].</p>\n<p>fileSharing.request(2, 2);   // The user with id = 2 requested the second file chunk, users with ids [1,2] have this chunk, thus we return [1,2].</p>\n<p>fileSharing.leave(1);        // The user with id = 1 left the system, all the file chunks with them are no longer available for other users.</p>\n<p>fileSharing.request(2, 1);   // The user with id = 2 requested the first file chunk, no one in the system has this chunk, we return empty list [].</p>\n<p>fileSharing.leave(2);        // The user with id = 2 left the system.</p>\n<p>fileSharing.join([]);        // A user who doesn't have any chunks joined the system, assign id = 1 to them and return 1. Notice that ids 1 and 2 are free and we can reuse them.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def design_a_file_sharing_system(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= m <= 10^5",
      "0 <= ownedChunks.length <= min(100, m)",
      "1 <= ownedChunks[i] <= m",
      "Values of ownedChunks are unique.",
      "1 <= chunkID <= m",
      "userID is guaranteed to be a user in the system if you assign the IDs correctly.",
      "At most 10^4 calls will be made to join, leave and request.",
      "Each call to leave will have a matching call for join."
    ]
  },
  {
    "questionId": 1502,
    "title": "Can Make Arithmetic Progression From Sequence",
    "titleSlug": "can-make-arithmetic-progression-from-sequence",
    "content": "<p>Given an array of numbers `arr`. A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same.</p>\n<p>Return `true` if the array can be rearranged to form an arithmetic progression, otherwise, return `false`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def can_make_arithmetic_progression_from_sequence(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [3,5,1]",
        "output": "true",
        "explanation": "We can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements."
      },
      {
        "input": "arr = [1,2,4]",
        "output": "false",
        "explanation": "There is no way to reorder the elements to obtain an arithmetic progression."
      }
    ],
    "constraints": [
      "2 <= arr.length <= 1000",
      "-10^6 <= arr[i] <= 10^6"
    ]
  },
  {
    "questionId": 1503,
    "title": "Last Moment Before All Ants Fall Out of a Plank",
    "titleSlug": "last-moment-before-all-ants-fall-out-of-a-plank",
    "content": "<p>We have a wooden plank of the length `n` units. Some ants are walking on the plank, each ant moves with speed 1 unit per second. Some of the ants move to the left, the other move to the right.</p>\n<p>When two ants moving in two different directions meet at some point, they change their directions and continue moving again. Assume changing directions doesn't take any additional time.</p>\n<p>When an ant reaches one end of the plank at a time `t`, it falls out of the plank imediately.</p>\n<p>Given an integer `n` and two integer arrays `left` and `right`, the positions of the ants moving to the left and the right. Return the moment when the last ant(s) fall out of the plank.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def last_moment_before_all_ants_fall_out_of_a_plank(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 4, left = [4,3], right = [0,1]",
        "output": "4",
        "explanation": "In the image above:"
      },
      {
        "input": "n = 7, left = [], right = [0,1,2,3,4,5,6,7]",
        "output": "7",
        "explanation": "All ants are going to the right, the ant at index 0 needs 7 seconds to fall."
      },
      {
        "input": "n = 7, left = [0,1,2,3,4,5,6,7], right = []",
        "output": "7",
        "explanation": "All ants are going to the left, the ant at index 7 needs 7 seconds to fall."
      },
      {
        "input": "n = 9, left = [5], right = [4]",
        "output": "5",
        "explanation": "At t = 1 second, both ants will be at the same intial position but with different direction."
      },
      {
        "input": "n = 6, left = [6], right = [0]",
        "output": "6"
      }
    ],
    "constraints": [
      "1 <= n <= 10^4",
      "0 <= left.length <= n + 1",
      "0 <= left[i] <= n",
      "0 <= right.length <= n + 1",
      "0 <= right[i] <= n",
      "1 <= left.length + right.length <= n + 1",
      "All values of left and right are unique, and each value can appear only in one of the two arrays."
    ]
  },
  {
    "questionId": 1504,
    "title": "Count Submatrices With All Ones",
    "titleSlug": "count-submatrices-with-all-ones",
    "content": "<p>Given a `rows * columns` matrix `mat` of ones and zeros, return how many submatrices have all ones.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_submatrices_with_all_ones(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "mat = [[1,0,1],",
        "output": "13",
        "explanation": "There are 6 rectangles of side 1x1."
      },
      {
        "input": "mat = [[0,1,1,0],",
        "output": "24",
        "explanation": "There are 8 rectangles of side 1x1."
      },
      {
        "input": "mat = [[1,1,1,1,1,1]]",
        "output": "21"
      },
      {
        "input": "mat = [[1,0,1],[0,1,0],[1,0,1]]",
        "output": "5"
      }
    ],
    "constraints": [
      "1 <= rows <= 150",
      "1 <= columns <= 150",
      "0 <= mat[i][j] <= 1"
    ]
  },
  {
    "questionId": 1506,
    "title": "Find Root of N-Ary Tree",
    "titleSlug": "find-root-of-n-ary-tree",
    "content": "<p>You are given all the nodes of an N-ary tree as an array of `Node` objects, where each node has a unique value.</p>\n<p>Return the root of the N-ary tree.</p>\n<p>Custom testing:\nAn N-ary tree can be serialized as represented in its level order traversal where each group of children is separated by the `null` value (see examples).</p>\n<p>For example, the above tree is serialized as `[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]`.</p>\n<p>The testing will be done in the following way:\nThe input data should be provided as a serialization of the tree.</p>\n<p>The driver code will construct the tree from the serialized input data and put each `Node` object into an array in an arbitrary order.</p>\n<p>The driver code will pass the array to `findRoot`, and your function should find and return the root `Node` object in the array.</p>\n<p>The driver code will take the returned `Node` object and serialize it. If the serialized value and the input data are the same, the test passes.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_root_of_n_ary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "tree = [1,null,3,2,4,null,5,6]",
        "output": "[1,null,3,2,4,null,5,6]",
        "explanation": "The tree from the input data is shown above."
      },
      {
        "input": "tree = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
        "output": "[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]"
      }
    ],
    "constraints": [
      "The total number of nodes is between [1, 5 * 104].",
      "Each node has a unique value.",
      "Follow up:",
      "Could you solve this problem in constant space complexity with a linear time algorithm?"
    ]
  },
  {
    "questionId": 1507,
    "title": "Reformat Date",
    "titleSlug": "reformat-date",
    "content": "<p>Given a `date` string in the form `Day Month Year`, where:\n`Day` is in the set `{\"1st\", \"2nd\", \"3rd\", \"4th\", ..., \"30th\", \"31st\"}`.</p>\n<p>`Month` is in the set `{\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"}`.</p>\n<p>`Year` is in the range `[1900, 2100]`.</p>\n<p>Convert the date string to the format `YYYY-MM-DD`, where:\n`YYYY` denotes the 4 digit year.</p>\n<p>`MM` denotes the 2 digit month.</p>\n<p>`DD` denotes the 2 digit day.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def reformat_date(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "date = \"20th Oct 2052\"",
        "output": "\"2052-10-20\""
      },
      {
        "input": "date = \"6th Jun 1933\"",
        "output": "\"1933-06-06\""
      },
      {
        "input": "date = \"26th May 1960\"",
        "output": "\"1960-05-26\""
      }
    ],
    "constraints": [
      "The given dates are guaranteed to be valid, so no error handling is necessary."
    ]
  },
  {
    "questionId": 1508,
    "title": "Range Sum of Sorted Subarray Sums",
    "titleSlug": "range-sum-of-sorted-subarray-sums",
    "content": "<p>Given the array `nums` consisting of `n` positive integers. You computed the sum of all non-empty continous subarrays from the array and then sort them in non-decreasing order, creating a new array of `n * (n + 1) / 2` numbers.</p>\n<p>Return the sum of the numbers from index `left` to index `right` (indexed from 1), inclusive, in the new array. Since the answer can be a huge number return it modulo 10^9 + 7.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def range_sum_of_sorted_subarray_sums(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3,4], n = 4, left = 1, right = 5",
        "output": "13",
        "explanation": "All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13."
      },
      {
        "input": "nums = [1,2,3,4], n = 4, left = 3, right = 4",
        "output": "6",
        "explanation": "The given array is the same as example 1. We have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6."
      },
      {
        "input": "nums = [1,2,3,4], n = 4, left = 1, right = 10",
        "output": "50"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^3",
      "nums.length == n",
      "1 <= nums[i] <= 100",
      "1 <= left <= right <= n * (n + 1) / 2"
    ]
  },
  {
    "questionId": 1509,
    "title": "Minimum Difference Between Largest and Smallest Value in Three Moves",
    "titleSlug": "minimum-difference-between-largest-and-smallest-value-in-three-moves",
    "content": "<p>Given an array `nums`, you are allowed to choose one element of `nums` and change it by any value in one move.</p>\n<p>Return the minimum difference between the largest and smallest value of `nums` after perfoming at most 3 moves.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_difference_between_largest_and_smallest_value_in_three_moves(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [5,3,2,4]",
        "output": "0",
        "explanation": "Change the array [5,3,2,4] to [2,2,2,2]."
      },
      {
        "input": "nums = [1,5,0,10,14]",
        "output": "1",
        "explanation": "Change the array [1,5,0,10,14] to [1,1,0,1,1]."
      },
      {
        "input": "nums = [6,6,0,1,1,4,6]",
        "output": "2"
      },
      {
        "input": "nums = [1,5,6,14,15]",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^9 <= nums[i] <= 10^9"
    ]
  },
  {
    "questionId": 1512,
    "title": "Number of Good Pairs",
    "titleSlug": "number-of-good-pairs",
    "content": "<p>Given an array of integers `nums`.</p>\n<p>A pair `(i,j)` is called good if `nums[i]` == `nums[j]` and `i` < `j`.</p>\n<p>Return the number of good pairs.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_good_pairs(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3,1,1,3]",
        "output": "4",
        "explanation": "There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed."
      },
      {
        "input": "nums = [1,1,1,1]",
        "output": "6",
        "explanation": "Each pair in the array are good."
      },
      {
        "input": "nums = [1,2,3]",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 100",
      "1 <= nums[i] <= 100"
    ]
  },
  {
    "questionId": 1513,
    "title": "Number of Substrings With Only 1s",
    "titleSlug": "number-of-substrings-with-only-1s",
    "content": "<p>Given a binary string `s` (a string consisting only of '0' and '1's).</p>\n<p>Return the number of substrings with all characters 1's.</p>\n<p>Since the answer may be too large, return it modulo 10^9 + 7.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_substrings_with_only_1s(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"0110111\"",
        "output": "9",
        "explanation": "There are 9 substring in total with only 1's characters."
      },
      {
        "input": "s = \"101\"",
        "output": "2",
        "explanation": "Substring \"1\" is shown 2 times in s."
      },
      {
        "input": "s = \"111111\"",
        "output": "21",
        "explanation": "Each substring contains only 1's characters."
      },
      {
        "input": "s = \"000\"",
        "output": "0"
      }
    ],
    "constraints": [
      "s[i] == '0' or s[i] == '1'",
      "1 <= s.length <= 10^5"
    ]
  },
  {
    "questionId": 1514,
    "title": "Path with Maximum Probability",
    "titleSlug": "path-with-maximum-probability",
    "content": "<p>You are given an undirected weighted graph of `n` nodes (0-indexed), represented by an edge list where `edges[i] = [a, b]` is an undirected edge connecting the nodes `a` and `b` with a probability of success of traversing that edge `succProb[i]`.</p>\n<p>Given two nodes `start` and `end`, find the path with the maximum probability of success to go from `start` to `end` and return its success probability.</p>\n<p>If there is no path from `start` to `end`, return 0. Your answer will be accepted if it differs from the correct answer by at most 1e-5.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def path_with_maximum_probability(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2",
        "output": "0.25000",
        "explanation": "There are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25."
      },
      {
        "input": "n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2",
        "output": "0.30000"
      },
      {
        "input": "n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2",
        "output": "0.00000",
        "explanation": "There is no path between 0 and 2."
      }
    ],
    "constraints": [
      "2 <= n <= 10^4",
      "0 <= start, end < n",
      "start != end",
      "0 <= a, b < n",
      "a != b",
      "0 <= succProb.length == edges.length <= 2*10^4",
      "0 <= succProb[i] <= 1",
      "There is at most one edge between every two nodes."
    ]
  },
  {
    "questionId": 1518,
    "title": "Water Bottles",
    "titleSlug": "water-bottles",
    "content": "<p>Given `numBottles` full water bottles, you can exchange `numExchange` empty water bottles for one full water bottle.</p>\n<p>The operation of drinking a full water bottle turns it into an empty bottle.</p>\n<p>Return the maximum number of water bottles you can drink.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def water_bottles(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "numBottles = 9, numExchange = 3",
        "output": "13",
        "explanation": "You can exchange 3 empty bottles to get 1 full water bottle."
      },
      {
        "input": "numBottles = 15, numExchange = 4",
        "output": "19",
        "explanation": "You can exchange 4 empty bottles to get 1 full water bottle."
      },
      {
        "input": "numBottles = 5, numExchange = 5",
        "output": "6"
      },
      {
        "input": "numBottles = 2, numExchange = 3",
        "output": "2"
      }
    ],
    "constraints": [
      "1 <= numBottles <= 100",
      "2 <= numExchange <= 100"
    ]
  },
  {
    "questionId": 1519,
    "title": "Number of Nodes in the Sub-Tree With the Same Label",
    "titleSlug": "number-of-nodes-in-the-sub-tree-with-the-same-label",
    "content": "<p>Given a tree (i.e. a connected, undirected graph that has no cycles) consisting of `n` nodes numbered from `0` to `n - 1` and exactly `n - 1` `edges`. The root of the tree is the node `0`, and each node of the tree has a label which is a lower-case character given in the string `labels` (i.e. The node with the number `i` has the label `labels[i]`).</p>\n<p>The `edges` array is given on the form `edges[i] = [ai, bi]`, which means there is an edge between nodes `ai` and `bi` in the tree.</p>\n<p>Return an array of size `n` where `ans[i]` is the number of nodes in the subtree of the `ith` node which have the same label as node `i`.</p>\n<p>A subtree of a tree `T` is the tree consisting of a node in `T` and all of its descendant nodes.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_nodes_in_the_sub_tree_with_the_same_label(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], labels = \"abaedcd\"",
        "output": "[2,1,1,1,1,1,1]",
        "explanation": "Node 0 has label 'a' and its sub-tree has node 2 with label 'a' as well, thus the answer is 2. Notice that any node is part of its sub-tree."
      },
      {
        "input": "n = 4, edges = [[0,1],[1,2],[0,3]], labels = \"bbbb\"",
        "output": "[4,2,1,1]",
        "explanation": "The sub-tree of node 2 contains only node 2, so the answer is 1."
      },
      {
        "input": "n = 5, edges = [[0,1],[0,2],[1,3],[0,4]], labels = \"aabab\"",
        "output": "[3,2,1,1,1]"
      },
      {
        "input": "n = 6, edges = [[0,1],[0,2],[1,3],[3,4],[4,5]], labels = \"cbabaa\"",
        "output": "[1,2,1,1,2,1]"
      },
      {
        "input": "n = 7, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]], labels = \"aaabaaa\"",
        "output": "[6,5,4,1,3,2,1]"
      }
    ],
    "constraints": [
      "1 <= n <= 10^5",
      "edges.length == n - 1",
      "edges[i].length == 2",
      "0 <= ai, bi < n",
      "ai != bi",
      "labels.length == n",
      "labels is consisting of only of lower-case English letters."
    ]
  },
  {
    "questionId": 1522,
    "title": "Diameter of N-Ary Tree",
    "titleSlug": "diameter-of-n-ary-tree",
    "content": "<p>Given a `root` of an N-ary tree, you need to compute the length of the diameter of the tree.</p>\n<p>The diameter of an N-ary tree is the length of the longest path between any two nodes in the tree. This path may or may not pass through the root.</p>\n<p>(Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value.)</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def diameter_of_n_ary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,null,3,2,4,null,5,6]",
        "output": "3",
        "explanation": "Diameter is shown in red color."
      },
      {
        "input": "root = [1,null,2,null,3,4,null,5,null,6]",
        "output": "4"
      },
      {
        "input": "root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
        "output": "7"
      }
    ],
    "constraints": [
      "The depth of the n-ary tree is less than or equal to 1000.",
      "The total number of nodes is between [1, 104]."
    ]
  },
  {
    "questionId": 1523,
    "title": "Count Odd Numbers in an Interval Range",
    "titleSlug": "count-odd-numbers-in-an-interval-range",
    "content": "<p>Given two non-negative integers `low` and `high`. Return the count of odd numbers between `low` and `high` (inclusive).</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_odd_numbers_in_an_interval_range(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "low = 3, high = 7",
        "output": "3",
        "explanation": "The odd numbers between 3 and 7 are [3,5,7]."
      },
      {
        "input": "low = 8, high = 10",
        "output": "1",
        "explanation": "The odd numbers between 8 and 10 are [9]."
      }
    ],
    "constraints": [
      "0 <= low <= high <= 10^9"
    ]
  },
  {
    "questionId": 1524,
    "title": "Number of Sub-arrays With Odd Sum",
    "titleSlug": "number-of-sub-arrays-with-odd-sum",
    "content": "<p>Given an array of integers `arr`. Return the number of sub-arrays with odd sum.</p>\n<p>As the answer may grow large, the answer must be computed modulo `10^9 + 7`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_sub_arrays_with_odd_sum(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [1,3,5]",
        "output": "4",
        "explanation": "All sub-arrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]"
      },
      {
        "input": "arr = [2,4,6]",
        "output": "0",
        "explanation": "All sub-arrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7]",
        "output": "16"
      },
      {
        "input": "arr = [100,100,99,99]",
        "output": "4"
      },
      {
        "input": "arr = [7]",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= arr.length <= 10^5",
      "1 <= arr[i] <= 100"
    ]
  },
  {
    "questionId": 1525,
    "title": "Number of Good Ways to Split a String",
    "titleSlug": "number-of-good-ways-to-split-a-string",
    "content": "<p>You are given a string `s`, a split is called good if you can split `s` into 2 non-empty strings `p` and `q` where its concatenation is equal to `s` and the number of distinct letters in `p` and `q` are the same.</p>\n<p>Return the number of good splits you can make in `s`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_good_ways_to_split_a_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"aacaba\"",
        "output": "2",
        "explanation": "There are 5 ways to split `\"aacaba\"` and 2 of them are good."
      },
      {
        "input": "s = \"abcd\"",
        "output": "1",
        "explanation": "Split the string as follows (\"ab\", \"cd\")."
      },
      {
        "input": "s = \"aaaaa\"",
        "output": "4",
        "explanation": "All possible splits are good."
      },
      {
        "input": "s = \"acbadbaada\"",
        "output": "2"
      }
    ],
    "constraints": [
      "s contains only lowercase English letters.",
      "1 <= s.length <= 10^5"
    ]
  },
  {
    "questionId": 1528,
    "title": "Shuffle String",
    "titleSlug": "shuffle-string",
    "content": "<p>Given a string `s` and an integer array `indices` of the same length.</p>\n<p>The string `s` will be shuffled such that the character at the `ith` position moves to `indices[i]` in the shuffled string.</p>\n<p>Return the shuffled string.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def shuffle_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"codeleet\", `indices` = [4,5,6,7,0,2,1,3]",
        "output": "\"leetcode\"",
        "explanation": "As shown, \"codeleet\" becomes \"leetcode\" after shuffling."
      },
      {
        "input": "s = \"abc\", `indices` = [0,1,2]",
        "output": "\"abc\"",
        "explanation": "After shuffling, each character remains in its position."
      },
      {
        "input": "s = \"aiohn\", `indices` = [3,1,4,2,0]",
        "output": "\"nihao\""
      },
      {
        "input": "s = \"aaiougrt\", `indices` = [4,0,2,6,7,3,1,5]",
        "output": "\"arigatou\""
      },
      {
        "input": "s = \"art\", `indices` = [1,0,2]",
        "output": "\"rat\""
      }
    ],
    "constraints": [
      "s.length == indices.length == n",
      "1 <= n <= 100",
      "s contains only lower-case English letters.",
      "0 <= indices[i] < n",
      "All values of indices are unique (i.e. indices is a permutation of the integers from 0 to n - 1)."
    ]
  },
  {
    "questionId": 1529,
    "title": "Bulb Switcher IV",
    "titleSlug": "bulb-switcher-iv",
    "content": "<p>There is a room with `n` bulbs, numbered from `0` to `n-1`, arranged in a row from left to right. Initially all the bulbs are turned off.</p>\n<p>Your task is to obtain the configuration represented by `target` where `target[i]` is '1' if the i-th bulb is turned on and is '0' if it is turned off.</p>\n<p>You have a switch to flip the state of the bulb, a flip operation is defined as follows:\nChoose any bulb (index `i`) of your current configuration.</p>\n<p>Flip each bulb from index `i` to `n-1`.</p>\n<p>When any bulb is flipped it means that if it is 0 it changes to 1 and if it is 1 it changes to 0.</p>\n<p>Return the minimum number of flips required to form `target`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def bulb_switcher_iv(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "target = \"10111\"",
        "output": "3",
        "explanation": "Initial configuration \"00000\"."
      },
      {
        "input": "target = \"101\"",
        "output": "3",
        "explanation": "\"000\" -> \"111\" -> \"100\" -> \"101\"."
      },
      {
        "input": "target = \"00000\"",
        "output": "0"
      },
      {
        "input": "target = \"001011101\"",
        "output": "5"
      }
    ],
    "constraints": [
      "1 <= target.length <= 10^5",
      "target[i] == '0' or target[i] == '1'"
    ]
  },
  {
    "questionId": 1530,
    "title": "Number of Good Leaf Nodes Pairs",
    "titleSlug": "number-of-good-leaf-nodes-pairs",
    "content": "<p>Given the `root` of a binary tree and an integer `distance`. A pair of two different leaf nodes of a binary tree is said to be good if the length of the shortest path between them is less than or equal to `distance`.</p>\n<p>Return the number of good leaf node pairs in the tree.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_good_leaf_nodes_pairs(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2,3,null,4], distance = 3",
        "output": "1",
        "explanation": "The leaf nodes of the tree are 3 and 4 and the length of the shortest path between them is 3. This is the only good pair."
      },
      {
        "input": "root = [1,2,3,4,5,6,7], distance = 3",
        "output": "2",
        "explanation": "The good pairs are [4,5] and [6,7] with shortest path = 2. The pair [4,6] is not good because the length of ther shortest path between them is 4."
      },
      {
        "input": "root = [7,1,4,6,null,5,3,null,null,null,null,null,2], distance = 3",
        "output": "1",
        "explanation": "The only good pair is [2,5]."
      },
      {
        "input": "root = [100], distance = 1",
        "output": "0"
      },
      {
        "input": "root = [1,1,1], distance = 2",
        "output": "1"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 2^10].",
      "Each node's value is between [1, 100].",
      "1 <= distance <= 10"
    ]
  },
  {
    "questionId": 1533,
    "title": "Find the Index of the Large Integer",
    "titleSlug": "find-the-index-of-the-large-integer",
    "content": "<p>We have an integer array `arr`, where all the integers in `arr` are equal except for one integer which is larger than the rest of the integers. You will not be given direct access to the array, instead, you will have an API `ArrayReader` which have the following functions:\n`int compareSub(int l, int r, int x, int y)`: where `0 <= l, r, x, y < ArrayReader.length()`, `l <= r and` `x <= y`. The function compares the sum of sub-array `arr[l..r]` with the sum of the sub-array `arr[x..y]` and returns:</p>\n<p>1 if `arr[l]+arr[l+1]+...+arr[r] > arr[x]+arr[x+1]+...+arr[y]`.</p>\n<p>0 if `arr[l]+arr[l+1]+...+arr[r] == arr[x]+arr[x+1]+...+arr[y]`.</p>\n<p>-1 if `arr[l]+arr[l+1]+...+arr[r] < arr[x]+arr[x+1]+...+arr[y]`.</p>\n<p>`int length()`: Returns the size of the array.</p>\n<p>You are allowed to call `compareSub()` 20 times at most. You can assume both functions work in `O(1)` time.</p>\n<p>Return the index of the array `arr` which has the largest integer.</p>\n<p>Follow-up:\nWhat if there are two numbers in `arr` that are bigger than all other numbers?\nWhat if there is one number that is bigger than other numbers and one number that is smaller than other numbers?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_the_index_of_the_large_integer(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [7,7,7,7,10,7,7,7]",
        "output": "4",
        "explanation": "The following calls to the API"
      },
      {
        "input": "nums = [6,6,12]",
        "output": "2"
      }
    ],
    "constraints": [
      "2 <= arr.length <= 5 * 10^5",
      "1 <= arr[i] <= 100",
      "All elements of arr are equal except for one element which is larger than all other elements."
    ]
  },
  {
    "questionId": 1534,
    "title": "Count Good Triplets",
    "titleSlug": "count-good-triplets",
    "content": "<p>Given an array of integers `arr`, and three integers `a`, `b` and `c`. You need to find the number of good triplets.</p>\n<p>A triplet `(arr[i], arr[j], arr[k])` is good if the following conditions are true:\n`0 <= i < j < k < arr.length`\n`|arr[i] - arr[j]| <= a`\n`|arr[j] - arr[k]| <= b`\n`|arr[i] - arr[k]| <= c`\nWhere `|x|` denotes the absolute value of `x`.</p>\n<p>Return the number of good triplets.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_good_triplets(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3",
        "output": "4",
        "explanation": "There are 4 good triplets: [(3,0,1), (3,0,1), (3,1,1), (0,1,1)]."
      },
      {
        "input": "arr = [1,1,2,2,3], a = 0, b = 0, c = 1",
        "output": "0",
        "explanation": "No triplet satisfies all conditions."
      }
    ],
    "constraints": [
      "3 <= arr.length <= 100",
      "0 <= arr[i] <= 1000",
      "0 <= a, b, c <= 1000"
    ]
  },
  {
    "questionId": 1535,
    "title": "Find the Winner of an Array Game",
    "titleSlug": "find-the-winner-of-an-array-game",
    "content": "<p>Given an integer array `arr` of distinct integers and an integer `k`.</p>\n<p>A game will be played between the first two elements of the array (i.e. `arr[0]` and `arr[1]`). In each round of the game, we compare `arr[0]` with `arr[1]`, the larger integer wins and remains at position `0` and the smaller integer moves to the end of the array. The game ends when an integer wins `k` consecutive rounds.</p>\n<p>Return the integer which will win the game.</p>\n<p>It is guaranteed that there will be a winner of the game.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_the_winner_of_an_array_game(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [2,1,3,5,4,6,7], k = 2",
        "output": "5",
        "explanation": "Let's see the rounds of the game:"
      },
      {
        "input": "arr = [3,2,1], k = 10",
        "output": "3",
        "explanation": "3 will win the first 10 rounds consecutively."
      },
      {
        "input": "arr = [1,9,8,2,3,7,6,4,5], k = 7",
        "output": "9"
      },
      {
        "input": "arr = [1,11,22,33,44,55,66,77,88,99], k = 1000000000",
        "output": "99"
      }
    ],
    "constraints": [
      "2 <= arr.length <= 10^5",
      "1 <= arr[i] <= 10^6",
      "arr contains distinct integers.",
      "1 <= k <= 10^9"
    ]
  },
  {
    "questionId": 1536,
    "title": "Minimum Swaps to Arrange a Binary Grid",
    "titleSlug": "minimum-swaps-to-arrange-a-binary-grid",
    "content": "<p>Given an `n x n` binary `grid`, in one step you can choose two adjacent rows of the grid and swap them.</p>\n<p>A grid is said to be valid if all the cells above the main diagonal are zeros.</p>\n<p>Return the minimum number of steps needed to make the grid valid, or -1 if the grid cannot be valid.</p>\n<p>The main diagonal of a grid is the diagonal that starts at cell `(1, 1)` and ends at cell `(n, n)`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_swaps_to_arrange_a_binary_grid(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "grid = [[0,0,1],[1,1,0],[1,0,0]]",
        "output": "3"
      },
      {
        "input": "grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]",
        "output": "-1",
        "explanation": "All rows are similar, swaps have no effect on the grid."
      },
      {
        "input": "grid = [[1,0,0],[1,1,0],[1,1,1]]",
        "output": "0"
      }
    ],
    "constraints": [
      "n == grid.length",
      "n == grid[i].length",
      "1 <= n <= 200",
      "grid[i][j] is 0 or 1"
    ]
  },
  {
    "questionId": 1538,
    "title": "Guess the Majority in a Hidden Array",
    "titleSlug": "guess-the-majority-in-a-hidden-array",
    "content": "<p>We have an integer array `nums`, where all the integers in `nums` are 0 or 1. You will not be given direct access to the array, instead, you will have an API `ArrayReader` which have the following functions:\n`int query(int a, int b, int c, int d)`: where `0 <= a < b < c < d < ArrayReader.length()`. The function returns the distribution of the value of the 4 elements and returns:</p>\n<p>4 : if the values of the 4 elements are the same (0 or 1).</p>\n<p>2 : if three elements have a value equal to 0 and one element has value equal to 1 or vice versa.</p>\n<p>0 : if two element have a value equal to 0 and two elements have a value equal to 1.</p>\n<p>`int length()`: Returns the size of the array.</p>\n<p>You are allowed to call `query()` 2 * n times at most where n is equal to `ArrayReader.length()`.</p>\n<p>Return any index of the most frequent value in `nums`, in case of tie, return -1.</p>\n<p>Follow up: What is the minimum number of calls needed to find the majority element?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def guess_the_majority_in_a_hidden_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [0,0,1,0,1,1,1,1]",
        "output": "5",
        "explanation": "The following calls to the API"
      },
      {
        "input": "nums = [0,0,1,1,0]",
        "output": "0"
      },
      {
        "input": "nums = [1,0,1,0,1,0,1,0]",
        "output": "-1"
      }
    ],
    "constraints": [
      "5 <= nums.length <= 10^5",
      "0 <= nums[i] <= 1"
    ]
  },
  {
    "questionId": 1539,
    "title": "Kth Missing Positive Number",
    "titleSlug": "kth-missing-positive-number",
    "content": "<p>Given an array `arr` of positive integers sorted in a strictly increasing order, and an integer `k`.</p>\n<p>Find the `kth` positive integer that is missing from this array.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def kth_missing_positive_number(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [2,3,4,7,11], k = 5",
        "output": "9",
        "explanation": "The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th missing positive integer is 9."
      },
      {
        "input": "arr = [1,2,3,4], k = 2",
        "output": "6",
        "explanation": "The missing positive integers are [5,6,7,...]. The 2nd missing positive integer is 6."
      }
    ],
    "constraints": [
      "1 <= arr.length <= 1000",
      "1 <= arr[i] <= 1000",
      "1 <= k <= 1000",
      "arr[i] < arr[j] for 1 <= i < j <= arr.length"
    ]
  },
  {
    "questionId": 1540,
    "title": "Can Convert String in K Moves",
    "titleSlug": "can-convert-string-in-k-moves",
    "content": "<p>Given two strings `s` and `t`, your goal is to convert `s` into `t` in `k` moves or less.</p>\n<p>During the `ith` (`1 <= i <= k`) move you can:\nChoose any index `j` (1-indexed) from `s`, such that `1 <= j <= s.length` and `j` has not been chosen in any previous move, and shift the character at that index `i` times.</p>\n<p>Do nothing.</p>\n<p>Shifting a character means replacing it by the next letter in the alphabet (wrapping around so that `'z'` becomes `'a'`). Shifting a character by `i` means applying the shift operations `i` times.</p>\n<p>Remember that any index `j` can be picked at most once.</p>\n<p>Return `true` if it's possible to convert `s` into `t` in no more than `k` moves, otherwise return `false`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def can_convert_string_in_k_moves(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"input\", t = \"ouput\", k = 9",
        "output": "true",
        "explanation": "In the 6th move, we shift 'i' 6 times to get 'o'. And in the 7th move we shift 'n' to get 'u'."
      },
      {
        "input": "s = \"abc\", t = \"bcd\", k = 10",
        "output": "false",
        "explanation": "We need to shift each character in s one time to convert it into t. We can shift 'a' to 'b' during the 1st move. However, there is no way to shift the other characters in the remaining moves to obtain t from s."
      },
      {
        "input": "s = \"aab\", t = \"bbb\", k = 27",
        "output": "true",
        "explanation": "In the 1st move, we shift the first 'a' 1 time to get 'b'. In the 27th move, we shift the second 'a' 27 times to get 'b'."
      }
    ],
    "constraints": [
      "1 <= s.length, t.length <= 10^5",
      "0 <= k <= 10^9",
      "s, t contain only lowercase English letters."
    ]
  },
  {
    "questionId": 1541,
    "title": "Minimum Insertions to Balance a Parentheses String",
    "titleSlug": "minimum-insertions-to-balance-a-parentheses-string",
    "content": "<p>Given a parentheses string `s` containing only the characters `'('` and `')'`. A parentheses string is balanced if:\nAny left parenthesis `'('` must have a corresponding two consecutive right parenthesis `'))'`.</p>\n<p>Left parenthesis `'('` must go before the corresponding two consecutive right parenthesis `'))'`.</p>\n<p>In other words, we treat `'('` as openning parenthesis and `'))'` as closing parenthesis.</p>\n<p>For example, `\"())\"`, `\"())(())))\"` and `\"(())())))\"` are balanced, `\")()\"`, `\"()))\"` and `\"(()))\"` are not balanced.</p>\n<p>You can insert the characters `'('` and `')'` at any position of the string to balance it if needed.</p>\n<p>Return the minimum number of insertions needed to make `s` balanced.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_insertions_to_balance_a_parentheses_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"(()))\"",
        "output": "1",
        "explanation": "The second '(' has two matching '))', but the first '(' has only ')' matching. We need to to add one more ')' at the end of the string to be \"(())))\" which is balanced."
      },
      {
        "input": "s = \"())\"",
        "output": "0",
        "explanation": "The string is already balanced."
      },
      {
        "input": "s = \"))())(\"",
        "output": "3",
        "explanation": "Add '(' to match the first '))', Add '))' to match the last '('."
      },
      {
        "input": "s = \"((((((\"",
        "output": "12",
        "explanation": "Add 12 ')' to balance the string."
      },
      {
        "input": "s = \")))))))\"",
        "output": "5",
        "explanation": "Add 4 '(' at the beginning of the string and one ')' at the end. The string becomes \"(((())))))))\"."
      }
    ],
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists of '(' and ')' only."
    ]
  },
  {
    "questionId": 1544,
    "title": "Make The String Great",
    "titleSlug": "make-the-string-great",
    "content": "<p>Given a string `s` of lower and upper case English letters.</p>\n<p>A good string is a string which doesn't have two adjacent characters `s[i]` and `s[i + 1]` where:\n`0 <= i <= s.length - 2`\n`s[i]` is a lower-case letter and `s[i + 1]` is the same letter but in upper-case or vice-versa.</p>\n<p>To make the string good, you can choose two adjacent characters that make the string bad and remove them. You can keep doing this until the string becomes good.</p>\n<p>Return the string after making it good. The answer is guaranteed to be unique under the given constraints.</p>\n<p>Notice that an empty string is also good.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def make_the_string_great(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"leEeetcode\"",
        "output": "\"leetcode\"",
        "explanation": "In the first step, either you choose i = 1 or i = 2, both will result \"leEeetcode\" to be reduced to \"leetcode\"."
      },
      {
        "input": "s = \"abBAcC\"",
        "output": "\"\"",
        "explanation": "We have many possible scenarios, and all lead to the same answer. For example:"
      },
      {
        "input": "s = \"s\"",
        "output": "\"s\""
      }
    ],
    "constraints": [
      "1 <= s.length <= 100",
      "s contains only lower and upper case English letters."
    ]
  },
  {
    "questionId": 1545,
    "title": "Find Kth Bit in Nth Binary String",
    "titleSlug": "find-kth-bit-in-nth-binary-string",
    "content": "<p>Given two positive integers `n` and `k`, the binary string  `Sn` is formed as follows:\n`S1 = \"0\"`\n`Si = Si-1 + \"1\" + reverse(invert(Si-1))` for `i > 1`\nWhere `+` denotes the concatenation operation, `reverse(x)` returns the reversed string x, and `invert(x)` inverts all the bits in x (0 changes to 1 and 1 changes to 0).</p>\n<p>For example, the first 4 strings in the above sequence are:\n`S1 = \"0\"`\n`S2 = \"011\"`\n`S3 = \"0111001\"`\n`S4 = \"011100110110001\"`\nReturn the `kth` bit in `Sn`. It is guaranteed that `k` is valid for the given `n`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_kth_bit_in_nth_binary_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 3, k = 1",
        "output": "\"0\"",
        "explanation": "S3 is \"0111001\". The first bit is \"0\"."
      },
      {
        "input": "n = 4, k = 11",
        "output": "\"1\"",
        "explanation": "S4 is \"011100110110001\". The 11th bit is \"1\"."
      },
      {
        "input": "n = 1, k = 1",
        "output": "\"0\""
      },
      {
        "input": "n = 2, k = 3",
        "output": "\"1\""
      }
    ],
    "constraints": [
      "1 <= n <= 20",
      "1 <= k <= 2n - 1"
    ]
  },
  {
    "questionId": 1546,
    "title": "Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",
    "titleSlug": "maximum-number-of-non-overlapping-subarrays-with-sum-equals-target",
    "content": "<p>Given an array `nums` and an integer `target`.</p>\n<p>Return the maximum number of non-empty non-overlapping subarrays such that the sum of values in each subarray is equal to `target`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_number_of_non_overlapping_subarrays_with_sum_equals_target(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,1,1,1,1], target = 2",
        "output": "2",
        "explanation": "There are 2 non-overlapping subarrays [1,1,1,1,1] with sum equals to target(2)."
      },
      {
        "input": "nums = [-1,3,5,1,4,2,-9], target = 6",
        "output": "2",
        "explanation": "There are 3 subarrays with sum equal to 6."
      },
      {
        "input": "nums = [-2,6,6,3,5,4,1,2,8], target = 10",
        "output": "3"
      },
      {
        "input": "nums = [0,0,0], target = 0",
        "output": "3"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4",
      "0 <= target <= 10^6"
    ]
  },
  {
    "questionId": 1550,
    "title": "Three Consecutive Odds",
    "titleSlug": "three-consecutive-odds",
    "content": "<p>Given an integer array `arr`, return `true` if there are three consecutive odd numbers in the array. Otherwise, return `false`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def three_consecutive_odds(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [2,6,4,1]",
        "output": "false",
        "explanation": "There are no three consecutive odds."
      },
      {
        "input": "arr = [1,2,34,3,4,5,7,23,12]",
        "output": "true",
        "explanation": "[5,7,23] are three consecutive odds."
      }
    ],
    "constraints": [
      "1 <= arr.length <= 1000",
      "1 <= arr[i] <= 1000"
    ]
  },
  {
    "questionId": 1551,
    "title": "Minimum Operations to Make Array Equal",
    "titleSlug": "minimum-operations-to-make-array-equal",
    "content": "<p>You have an array `arr` of length `n` where `arr[i] = (2 * i) + 1` for all valid values of `i` (i.e. `0 <= i < n`).</p>\n<p>In one operation, you can select two indices `x` and `y` where `0 <= x, y < n` and subtract `1` from `arr[x]` and add `1` to `arr[y]` (i.e. perform `arr[x] -=1 `and `arr[y] += 1`). The goal is to make all the elements of the array equal. It is guaranteed that all the elements of the array can be made equal using some operations.</p>\n<p>Given an integer `n`, the length of the array. Return the minimum number of operations needed to make all the elements of arr equal.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_operations_to_make_array_equal(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 3",
        "output": "2",
        "explanation": "arr = [1, 3, 5]"
      },
      {
        "input": "n = 6",
        "output": "9"
      }
    ],
    "constraints": [
      "1 <= n <= 10^4"
    ]
  },
  {
    "questionId": 1552,
    "title": "Magnetic Force Between Two Balls",
    "titleSlug": "magnetic-force-between-two-balls",
    "content": "<p>In universe Earth C-137, Rick discovered a special form of magnetic force between two balls if they are put in his new invented basket. Rick has `n` empty baskets, the `ith` basket is at `position[i]`, Morty has `m` balls and needs to distribute the balls into the baskets such that the minimum magnetic force between any two balls is maximum.</p>\n<p>Rick stated that magnetic force between two different balls at positions `x` and `y` is `|x - y|`.</p>\n<p>Given the integer array `position` and the integer `m`. Return the required force.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def magnetic_force_between_two_balls(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "position = [1,2,3,4,7], m = 3",
        "output": "3",
        "explanation": "Distributing the 3 balls into baskets 1, 4 and 7 will make the magnetic force between ball pairs [3, 3, 6]. The minimum magnetic force is 3. We cannot achieve a larger minimum magnetic force than 3."
      },
      {
        "input": "position = [5,4,3,2,1,1000000000], m = 2",
        "output": "999999999",
        "explanation": "We can use baskets 1 and 1000000000."
      }
    ],
    "constraints": [
      "n == position.length",
      "2 <= n <= 10^5",
      "1 <= position[i] <= 10^9",
      "All integers in position are distinct.",
      "2 <= m <= position.length"
    ]
  },
  {
    "questionId": 1554,
    "title": "Strings Differ by One Character",
    "titleSlug": "strings-differ-by-one-character",
    "content": "<p>Given a list of strings `dict` where all the strings are of the same length.</p>\n<p>Return `True` if there are 2 strings that only differ by 1 character in the same index, otherwise return `False`.</p>\n<p>Follow up: Could you solve this problem in O(n*m) where n is the length of `dict` and m is the length of each string.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def strings_differ_by_one_character(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "dict = [\"abcd\",\"acbd\", \"aacd\"]",
        "output": "true",
        "explanation": "Strings \"abcd\" and \"aacd\" differ only by one character in the index 1."
      },
      {
        "input": "dict = [\"ab\",\"cd\",\"yz\"]",
        "output": "false"
      },
      {
        "input": "dict = [\"abcd\",\"cccc\",\"abyd\",\"abab\"]",
        "output": "true"
      }
    ],
    "constraints": [
      "Number of characters in dict <= 10^5",
      "dict[i].length == dict[j].length",
      "dict[i] should be unique.",
      "dict[i] contains only lowercase English letters."
    ]
  },
  {
    "questionId": 1556,
    "title": "Thousand Separator",
    "titleSlug": "thousand-separator",
    "content": "<p>Given an integer `n`, add a dot (\".\") as the thousands separator and return it in string format.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def thousand_separator(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 987",
        "output": "\"987\""
      },
      {
        "input": "n = 1234",
        "output": "\"1.234\""
      },
      {
        "input": "n = 123456789",
        "output": "\"123.456.789\""
      },
      {
        "input": "n = 0",
        "output": "\"0\""
      }
    ],
    "constraints": [
      "0 <= n < 2^31"
    ]
  },
  {
    "questionId": 1557,
    "title": "Minimum Number of Vertices to Reach All Nodes",
    "titleSlug": "minimum-number-of-vertices-to-reach-all-nodes",
    "content": "<p>Given a directed acyclic graph, with `n` vertices numbered from `0` to `n-1`, and an array `edges` where `edges[i] = [fromi, toi]` represents a directed edge from node `fromi` to node `toi`.</p>\n<p>Find the smallest set of vertices from which all nodes in the graph are reachable. It's guaranteed that a unique solution exists.</p>\n<p>Notice that you can return the vertices in any order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_number_of_vertices_to_reach_all_nodes(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]",
        "output": "[0,3]",
        "explanation": "It's not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3]."
      },
      {
        "input": "n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]",
        "output": "[0,2,3]",
        "explanation": "Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4."
      }
    ],
    "constraints": [
      "2 <= n <= 10^5",
      "1 <= edges.length <= min(10^5, n * (n - 1) / 2)",
      "edges[i].length == 2",
      "0 <= fromi, toi < n",
      "All pairs (fromi, toi) are distinct."
    ]
  },
  {
    "questionId": 1558,
    "title": "Minimum Numbers of Function Calls to Make Target Array",
    "titleSlug": "minimum-numbers-of-function-calls-to-make-target-array",
    "content": "<p>Your task is to form an integer array `nums` from an initial array of zeros `arr` that is the same size as `nums`.</p>\n<p>Return the minimum number of function calls to make `nums` from `arr`.</p>\n<p>The answer is guaranteed to fit in a 32-bit signed integer.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_numbers_of_function_calls_to_make_target_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,5]",
        "output": "5",
        "explanation": "Increment by 1 (second element): [0, 0] to get [0, 1] (1 operation)."
      },
      {
        "input": "nums = [2,2]",
        "output": "3",
        "explanation": "Increment by 1 (both elements) [0, 0] -> [0, 1] -> [1, 1] (2 operations)."
      },
      {
        "input": "nums = [4,2,5]",
        "output": "6",
        "explanation": "(initial)[0,0,0] -> [1,0,0] -> [1,0,1] -> [2,0,2] -> [2,1,2] -> [4,2,4] -> [4,2,5](nums)."
      },
      {
        "input": "nums = [3,2,2,4]",
        "output": "7"
      },
      {
        "input": "nums = [2,4,8,16]",
        "output": "8"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^5",
      "0 <= nums[i] <= 10^9"
    ]
  },
  {
    "questionId": 1560,
    "title": "Most Visited Sector in  a Circular Track",
    "titleSlug": "most-visited-sector-in-a-circular-track",
    "content": "<p>Given an integer `n` and an integer array `rounds`. We have a circular track which consists of `n` sectors labeled from `1` to `n`. A marathon will be held on this track, the marathon consists of `m` rounds. The `ith` round starts at sector `rounds[i - 1]` and ends at sector `rounds[i]`. For example, round 1 starts at sector `rounds[0]` and ends at sector `rounds[1]`\nReturn an array of the most visited sectors sorted in ascending order.</p>\n<p>Notice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (See the first example).</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def most_visited_sector_in_a_circular_track(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 4, rounds = [1,3,1,2]",
        "output": "[1,2]",
        "explanation": "The marathon starts at sector 1. The order of the visited sectors is as follows:"
      },
      {
        "input": "n = 2, rounds = [2,1,2,1,2,1,2,1,2]",
        "output": "[2]"
      },
      {
        "input": "n = 7, rounds = [1,3,5,7]",
        "output": "[1,2,3,4,5,6,7]"
      }
    ],
    "constraints": [
      "2 <= n <= 100",
      "1 <= m <= 100",
      "rounds.length == m + 1",
      "1 <= rounds[i] <= n",
      "rounds[i] != rounds[i + 1] for 0 <= i < m"
    ]
  },
  {
    "questionId": 1561,
    "title": "Maximum Number of Coins You Can Get",
    "titleSlug": "maximum-number-of-coins-you-can-get",
    "content": "<p>There are 3n piles of coins of varying size, you and your friends will take piles of coins as follows:\nIn each step, you will choose any 3 piles of coins (not necessarily consecutive).</p>\n<p>Of your choice, Alice will pick the pile with the maximum number of coins.</p>\n<p>You will pick the next pile with maximum number of coins.</p>\n<p>Your friend Bob will pick the last pile.</p>\n<p>Repeat until there are no more piles of coins.</p>\n<p>Given an array of integers `piles` where `piles[i]` is the number of coins in the `ith` pile.</p>\n<p>Return the maximum number of coins which you can have.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_number_of_coins_you_can_get(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "piles = [2,4,1,2,7,8]",
        "output": "9",
        "explanation": "Choose the triplet (2, 7, 8), Alice Pick the pile with 8 coins, you the pile with 7 coins and Bob the last one."
      },
      {
        "input": "piles = [2,4,5]",
        "output": "4"
      },
      {
        "input": "piles = [9,8,7,6,5,1,2,3,4]",
        "output": "18"
      }
    ],
    "constraints": [
      "3 <= piles.length <= 10^5",
      "piles.length % 3 == 0",
      "1 <= piles[i] <= 10^4"
    ]
  },
  {
    "questionId": 1562,
    "title": "Find Latest Group of Size M",
    "titleSlug": "find-latest-group-of-size-m",
    "content": "<p>Given an array `arr` that represents a permutation of numbers from `1` to `n`. You have a binary string of size `n` that initially has all its bits set to zero.</p>\n<p>At each step `i` (assuming both the binary string and `arr` are 1-indexed) from `1` to `n`, the bit at position `arr[i]` is set to `1`. You are given an integer `m` and you need to find the latest step at which there exists a group of ones of length `m`. A group of ones is a contiguous substring of 1s such that it cannot be extended in either direction.</p>\n<p>Return the latest step at which there exists a group of ones of length exactly `m`. If no such group exists, return `-1`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_latest_group_of_size_m(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [3,5,1,2,4], m = 1",
        "output": "4",
        "explanation": "Step 1: \"00100\", groups: [\"1\"]"
      },
      {
        "input": "arr = [3,1,5,4,2], m = 2",
        "output": "-1",
        "explanation": "Step 1: \"00100\", groups: [\"1\"]"
      },
      {
        "input": "arr = [1], m = 1",
        "output": "1"
      },
      {
        "input": "arr = [2,1], m = 2",
        "output": "2"
      }
    ],
    "constraints": [
      "n == arr.length",
      "1 <= n <= 10^5",
      "1 <= arr[i] <= n",
      "All integers in arr are distinct.",
      "1 <= m <= arr.length"
    ]
  },
  {
    "questionId": 1564,
    "title": "Put Boxes Into the Warehouse I",
    "titleSlug": "put-boxes-into-the-warehouse-i",
    "content": "<p>You are given two arrays of positive integers, `boxes` and `warehouse`, representing the heights of some boxes of unit width and the heights of `n` rooms in a warehouse respectively. The warehouse's rooms are labelled from `0` to `n - 1` from left to right where `warehouse[i]` (0-indexed) is the height of the `ith` room.</p>\n<p>Boxes are put into the warehouse by the following rules:\nBoxes cannot be stacked.</p>\n<p>You can rearrange the insertion order of the boxes.</p>\n<p>Boxes can only be pushed into the warehouse from left to right only.</p>\n<p>If the height of some room in the warehouse is less than the height of a box, then that box and all other boxes behind it will be stopped before that room.</p>\n<p>Return the maximum number of boxes you can put into the warehouse.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def put_boxes_into_the_warehouse_i(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "boxes = [4,3,4,1], warehouse = [5,3,3,4,1]",
        "output": "3",
        "explanation": "We can first put the box of height 1 in room 4. Then we can put the box of height 3 in either of the 3 rooms 1, 2, or 3. Lastly, we can put one box of height 4 in room 0."
      },
      {
        "input": "boxes = [1,2,2,3,4], warehouse = [3,4,1,2]",
        "output": "3",
        "explanation": "Notice that it's not possible to put the box of height 4 into the warehouse since it cannot pass the first room of height 3."
      },
      {
        "input": "boxes = [1,2,3], warehouse = [1,2,3,4]",
        "output": "1",
        "explanation": "Since the first room in the warehouse is of height 1, we can only put boxes of height 1."
      },
      {
        "input": "boxes = [4,5,6], warehouse = [3,3,3,3,3]",
        "output": "0"
      }
    ],
    "constraints": [
      "n == warehouse.length",
      "1 <= boxes.length, warehouse.length <= 10^5",
      "1 <= boxes[i], warehouse[i] <= 10^9"
    ]
  },
  {
    "questionId": 1566,
    "title": "Detect Pattern of Length M Repeated K or More Times",
    "titleSlug": "detect-pattern-of-length-m-repeated-k-or-more-times",
    "content": "<p>Given an array of positive integers `arr`,  find a pattern of length `m` that is repeated `k` or more times.</p>\n<p>A pattern is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times consecutively without overlapping. A pattern is defined by its length and the number of repetitions.</p>\n<p>Return `true` if there exists a pattern of length `m` that is repeated `k` or more times, otherwise return `false`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def detect_pattern_of_length_m_repeated_k_or_more_times(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [1,2,4,4,4,4], m = 1, k = 3",
        "output": "true",
        "explanation": "The pattern (4) of length 1 is repeated 4 consecutive times. Notice that pattern can be repeated k or more times but not less."
      },
      {
        "input": "arr = [1,2,1,2,1,1,1,3], m = 2, k = 2",
        "output": "true",
        "explanation": "The pattern (1,2) of length 2 is repeated 2 consecutive times. Another valid pattern (2,1) is also repeated 2 times."
      },
      {
        "input": "arr = [1,2,1,2,1,3], m = 2, k = 3",
        "output": "false",
        "explanation": "The pattern (1,2) is of length 2 but is repeated only 2 times. There is no pattern of length 2 that is repeated 3 or more times."
      },
      {
        "input": "arr = [1,2,3,1,2], m = 2, k = 2",
        "output": "false",
        "explanation": "Notice that the pattern (1,2) exists twice but not consecutively, so it doesn't count."
      },
      {
        "input": "arr = [2,2,2,2], m = 2, k = 3",
        "output": "false",
        "explanation": "The only pattern of length 2 is (2,2) however it's repeated only twice. Notice that we do not count overlapping repetitions."
      }
    ],
    "constraints": [
      "2 <= arr.length <= 100",
      "1 <= arr[i] <= 100",
      "1 <= m <= 100",
      "2 <= k <= 100"
    ]
  },
  {
    "questionId": 1567,
    "title": "Maximum Length of Subarray With Positive Product",
    "titleSlug": "maximum-length-of-subarray-with-positive-product",
    "content": "<p>Given an array of integers `nums`, find the maximum length of a subarray where the product of all its elements is positive.</p>\n<p>A subarray of an array is a consecutive sequence of zero or more values taken out of that array.</p>\n<p>Return the maximum length of a subarray with positive product.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_length_of_subarray_with_positive_product(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,-2,-3,4]",
        "output": "4",
        "explanation": "The array nums already has a positive product of 24."
      },
      {
        "input": "nums = [0,1,-2,-3,-4]",
        "output": "3",
        "explanation": "The longest subarray with positive product is [1,-2,-3] which has a product of 6."
      },
      {
        "input": "nums = [-1,-2,-3,0,1]",
        "output": "2",
        "explanation": "The longest subarray with positive product is [-1,-2] or [-2,-3]."
      },
      {
        "input": "nums = [-1,2]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,5,-6,4,0,10]",
        "output": "4"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^9 <= nums[i] <= 10^9"
    ]
  },
  {
    "questionId": 1570,
    "title": "Dot Product of Two Sparse Vectors",
    "titleSlug": "dot-product-of-two-sparse-vectors",
    "content": "<p>Given two sparse vectors, compute their dot product.</p>\n<p>Implement class `SparseVector`:\n`SparseVector(nums)` Initializes the object with the vector `nums`\n`dotProduct(vec)` Compute the dot product between the instance of SparseVector and `vec`\nA sparse vector is a vector that has mostly zero values, you should store the sparse vector efficiently and compute the dot product between two SparseVector.</p>\n<p>Follow up: What if only one of the vectors is sparse?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def dot_product_of_two_sparse_vectors(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums1 = [1,0,0,2,3], nums2 = [0,3,0,4,0]",
        "output": "8",
        "explanation": "v1 = SparseVector(nums1) , v2 = SparseVector(nums2)"
      },
      {
        "input": "nums1 = [0,1,0,0,0], nums2 = [0,0,0,0,2]",
        "output": "0",
        "explanation": "v1 = SparseVector(nums1) , v2 = SparseVector(nums2)"
      },
      {
        "input": "nums1 = [0,1,0,0,2,0,0], nums2 = [1,0,0,0,3,0,4]",
        "output": "6"
      }
    ],
    "constraints": [
      "n == nums1.length == nums2.length",
      "1 <= n <= 10^5",
      "0 <= nums1[i], nums2[i] <= 100"
    ]
  },
  {
    "questionId": 1572,
    "title": "Matrix Diagonal Sum",
    "titleSlug": "matrix-diagonal-sum",
    "content": "<p>Given a square matrix `mat`, return the sum of the matrix diagonals.</p>\n<p>Only include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def matrix_diagonal_sum(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "mat = [[1,2,3],",
        "output": "25",
        "explanation": "Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25"
      },
      {
        "input": "mat = [[1,1,1,1],",
        "output": "8"
      },
      {
        "input": "mat = [[5]]",
        "output": "5"
      }
    ],
    "constraints": [
      "n == mat.length == mat[i].length",
      "1 <= n <= 100",
      "1 <= mat[i][j] <= 100"
    ]
  },
  {
    "questionId": 1573,
    "title": "Number of Ways to Split a String",
    "titleSlug": "number-of-ways-to-split-a-string",
    "content": "<p>Given a binary string `s` (a string consisting only of '0's and '1's), we can split `s` into 3 non-empty strings s1, s2, s3 (s1+ s2+ s3 = s).</p>\n<p>Return the number of ways `s` can be split such that the number of characters '1' is the same in s1, s2, and s3.</p>\n<p>Since the answer may be too large, return it modulo 10^9 + 7.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_ways_to_split_a_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"10101\"",
        "output": "4",
        "explanation": "There are four ways to split s in 3 parts where each part contain the same number of letters '1'."
      },
      {
        "input": "s = \"1001\"",
        "output": "0"
      },
      {
        "input": "s = \"0000\"",
        "output": "3",
        "explanation": "There are three ways to split s in 3 parts."
      },
      {
        "input": "s = \"100100010100110\"",
        "output": "12"
      }
    ],
    "constraints": [
      "3 <= s.length <= 10^5",
      "s[i] is '0' or '1'."
    ]
  },
  {
    "questionId": 1574,
    "title": "Shortest Subarray to be Removed to Make Array Sorted",
    "titleSlug": "shortest-subarray-to-be-removed-to-make-array-sorted",
    "content": "<p>Given an integer array `arr`, remove a subarray (can be empty) from `arr` such that the remaining elements in `arr` are non-decreasing.</p>\n<p>A subarray is a contiguous subsequence of the array.</p>\n<p>Return the length of the shortest subarray to remove.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def shortest_subarray_to_be_removed_to_make_array_sorted(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [1,2,3,10,4,2,3,5]",
        "output": "3",
        "explanation": "The shortest subarray we can remove is [10,4,2] of length 3. The remaining elements after that will be [1,2,3,3,5] which are sorted."
      },
      {
        "input": "arr = [5,4,3,2,1]",
        "output": "4",
        "explanation": "Since the array is strictly decreasing, we can only keep a single element. Therefore we need to remove a subarray of length 4, either [5,4,3,2] or [4,3,2,1]."
      },
      {
        "input": "arr = [1,2,3]",
        "output": "0",
        "explanation": "The array is already non-decreasing. We do not need to remove any elements."
      },
      {
        "input": "arr = [1]",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= arr.length <= 10^5",
      "0 <= arr[i] <= 10^9"
    ]
  },
  {
    "questionId": 1576,
    "title": "Replace All ?'s to Avoid Consecutive Repeating Characters",
    "titleSlug": "replace-all-s-to-avoid-consecutive-repeating-characters",
    "content": "<p>Given a string `s` containing only lower case English letters and the '?' character, convert all the '?' characters into lower case letters such that the final string does not contain any consecutive repeating characters. You cannot modify the non '?' characters.</p>\n<p>It is guaranteed that there are no consecutive repeating characters in the given string except for '?'.</p>\n<p>Return the final string after all the conversions (possibly zero) have been made. If there is more than one solution, return any of them. It can be shown that an answer is always possible with the given constraints.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def replace_all_s_to_avoid_consecutive_repeating_characters(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"?zs\"",
        "output": "\"azs\"",
        "explanation": "There are 25 solutions for this problem. From \"azs\" to \"yzs\", all are valid. Only \"z\" is an invalid modification as the string will consist of consecutive repeating characters in \"zzs\"."
      },
      {
        "input": "s = \"ubv?w\"",
        "output": "\"ubvaw\"",
        "explanation": "There are 24 solutions for this problem. Only \"v\" and \"w\" are invalid modifications as the strings will consist of consecutive repeating characters in \"ubvvw\" and \"ubvww\"."
      },
      {
        "input": "s = \"j?qg??b\"",
        "output": "\"jaqgacb\""
      },
      {
        "input": "s = \"??yw?ipkj?\"",
        "output": "\"acywaipkja\""
      }
    ],
    "constraints": [
      "1 <= s.length <= 100",
      "s contains only lower case English letters and '?'."
    ]
  },
  {
    "questionId": 1577,
    "title": "Number of Ways Where Square of Number Is Equal to Product of Two Numbers",
    "titleSlug": "number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers",
    "content": "<p>Given two arrays of integers `nums1` and `nums2`, return the number of triplets formed (type 1 and type 2) under the following rules:\nType 1: Triplet (i, j, k) if `nums1[i]2 == nums2[j] * nums2[k]` where `0 <= i < nums1.length` and `0 <= j < k < nums2.length`.</p>\n<p>Type 2: Triplet (i, j, k) if `nums2[i]2 == nums1[j] * nums1[k]` where `0 <= i < nums2.length` and `0 <= j < k < nums1.length`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_ways_where_square_of_number_is_equal_to_product_of_two_numbers(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums1 = [7,4], nums2 = [5,2,8,9]",
        "output": "1",
        "explanation": "Type 1: (1,1,2), nums1[1]^2 = nums2[1] * nums2[2]. (4^2 = 2 * 8)."
      },
      {
        "input": "nums1 = [1,1], nums2 = [1,1,1]",
        "output": "9",
        "explanation": "All Triplets are valid, because 1^2 = 1 * 1."
      },
      {
        "input": "nums1 = [7,7,8,3], nums2 = [1,2,9,7]",
        "output": "2",
        "explanation": "There are 2 valid triplets."
      },
      {
        "input": "nums1 = [4,7,9,11,23], nums2 = [3,5,1024,12,18]",
        "output": "0",
        "explanation": "There are no valid triplets."
      }
    ],
    "constraints": [
      "1 <= nums1.length, nums2.length <= 1000",
      "1 <= nums1[i], nums2[i] <= 10^5"
    ]
  },
  {
    "questionId": 1578,
    "title": "Minimum Deletion Cost to Avoid Repeating Letters",
    "titleSlug": "minimum-deletion-cost-to-avoid-repeating-letters",
    "content": "<p>Given a string `s` and an array of integers `cost` where `cost[i]` is the cost of deleting the `ith` character in `s`.</p>\n<p>Return the minimum cost of deletions such that there are no two identical letters next to each other.</p>\n<p>Notice that you will delete the chosen characters at the same time, in other words, after deleting a character, the costs of deleting other characters will not change.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_deletion_cost_to_avoid_repeating_letters(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"abaac\", cost = [1,2,3,4,5]",
        "output": "3",
        "explanation": "Delete the letter \"a\" with cost 3 to get \"abac\" (String without two identical letters next to each other)."
      },
      {
        "input": "s = \"abc\", cost = [1,2,3]",
        "output": "0",
        "explanation": "You don't need to delete any character because there are no identical letters next to each other."
      },
      {
        "input": "s = \"aabaa\", cost = [1,2,3,4,1]",
        "output": "2",
        "explanation": "Delete the first and the last character, getting the string (\"aba\")."
      }
    ],
    "constraints": [
      "s.length == cost.length",
      "1 <= s.length, cost.length <= 10^5",
      "1 <= cost[i] <= 10^4",
      "s contains only lowercase English letters."
    ]
  },
  {
    "questionId": 1580,
    "title": "Put Boxes Into the Warehouse II",
    "titleSlug": "put-boxes-into-the-warehouse-ii",
    "content": "<p>You are given two arrays of positive integers, `boxes` and `warehouse`, representing the heights of some boxes of unit width and the heights of `n` rooms in a warehouse respectively. The warehouse's rooms are labeled from `0` to `n - 1` from left to right where `warehouse[i]` (0-indexed) is the height of the `ith` room.</p>\n<p>Boxes are put into the warehouse by the following rules:\nBoxes cannot be stacked.</p>\n<p>You can rearrange the insertion order of the boxes.</p>\n<p>Boxes can be pushed into the warehouse from either side (left or right)\nIf the height of some room in the warehouse is less than the height of a box, then that box and all other boxes behind it will be stopped before that room.</p>\n<p>Return the maximum number of boxes you can put into the warehouse.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def put_boxes_into_the_warehouse_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "boxes = [1,2,2,3,4], warehouse = [3,4,1,2]",
        "output": "4",
        "explanation": "We can store the boxes in the following order:"
      },
      {
        "input": "boxes = [3,5,5,2], warehouse = [2,1,3,4,5]",
        "output": "3",
        "explanation": "It's not possible to put the two boxes of height 5 in the warehouse since there's only 1 room of height >= 5."
      },
      {
        "input": "boxes = [1,2,3], warehouse = [1,2,3,4]",
        "output": "3"
      },
      {
        "input": "boxes = [4,5,6], warehouse = [3,3,3,3,3]",
        "output": "0"
      }
    ],
    "constraints": [
      "n == warehouse.length",
      "1 <= boxes.length, warehouse.length <= 105",
      "1 <= boxes[i], warehouse[i] <= 109"
    ]
  },
  {
    "questionId": 1582,
    "title": "Special Positions in a Binary Matrix",
    "titleSlug": "special-positions-in-a-binary-matrix",
    "content": "<p>Given a `rows x cols` matrix `mat`, where `mat[i][j]` is either `0` or `1`, return the number of special positions in `mat`.</p>\n<p>A position `(i,j)` is called special if `mat[i][j] == 1` and all other elements in row `i` and column `j` are `0` (rows and columns are 0-indexed).</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def special_positions_in_a_binary_matrix(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "mat = [[1,0,0],",
        "output": "1",
        "explanation": "(1,2) is a special position because mat[1][2] == 1 and all other elements in row 1 and column 2 are 0."
      },
      {
        "input": "mat = [[1,0,0],",
        "output": "3",
        "explanation": "(0,0), (1,1) and (2,2) are special positions."
      },
      {
        "input": "mat = [[0,0,0,1],",
        "output": "2"
      },
      {
        "input": "mat = [[0,0,0,0,0],",
        "output": "3"
      }
    ],
    "constraints": [
      "rows == mat.length",
      "cols == mat[i].length",
      "1 <= rows, cols <= 100",
      "mat[i][j] is 0 or 1."
    ]
  },
  {
    "questionId": 1583,
    "title": "Count Unhappy Friends",
    "titleSlug": "count-unhappy-friends",
    "content": "<p>You are given a list of `preferences` for `n` friends, where `n` is always even.</p>\n<p>For each person `i`, `preferences[i]` contains a list of friends sorted in the order of preference. In other words, a friend earlier in the list is more preferred than a friend later in the list. Friends in each list are denoted by integers from `0` to `n-1`.</p>\n<p>All the friends are divided into pairs. The pairings are given in a list `pairs`, where `pairs[i] = [xi, yi]` denotes `xi` is paired with `yi` and `yi` is paired with `xi`.</p>\n<p>However, this pairing may cause some of the friends to be unhappy. A friend `x` is unhappy if `x` is paired with `y` and there exists a friend `u` who is paired with `v` but:\n`x` prefers `u` over `y`, and\n`u` prefers `x` over `v`.</p>\n<p>Return the number of unhappy friends.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_unhappy_friends(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]",
        "output": "2",
        "explanation": "Friend 1 is unhappy because:"
      },
      {
        "input": "n = 2, preferences = [[1], [0]], pairs = [[1, 0]]",
        "output": "0",
        "explanation": "Both friends 0 and 1 are happy."
      },
      {
        "input": "n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]]",
        "output": "4"
      }
    ],
    "constraints": [
      "2 <= n <= 500",
      "n is even.",
      "preferences.length == n",
      "preferences[i].length == n - 1",
      "0 <= preferences[i][j] <= n - 1",
      "preferences[i] does not contain i.",
      "All values in preferences[i] are unique.",
      "pairs.length == n/2",
      "pairs[i].length == 2",
      "xi != yi",
      "0 <= xi, yi <= n - 1",
      "Each person is contained in exactly one pair."
    ]
  },
  {
    "questionId": 1584,
    "title": "Min Cost to Connect All Points",
    "titleSlug": "min-cost-to-connect-all-points",
    "content": "<p>You are given an array `points` representing integer coordinates of some points on a 2D-plane, where `points[i] = [xi, yi]`.</p>\n<p>The cost of connecting two points `[xi, yi]` and `[xj, yj]` is the manhattan distance between them: `|xi - xj| + |yi - yj|`, where `|val|` denotes the absolute value of `val`.</p>\n<p>Return the minimum cost to make all points connected. All points are connected if there is exactly one simple path between any two points.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def min_cost_to_connect_all_points(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "points = [[0,0],[2,2],[3,10],[5,2],[7,0]]",
        "output": "20",
        "explanation": "We can connect the points as shown above to get the minimum cost of 20."
      },
      {
        "input": "points = [[3,12],[-2,5],[-4,1]]",
        "output": "18"
      },
      {
        "input": "points = [[0,0],[1,1],[1,0],[-1,1]]",
        "output": "4"
      },
      {
        "input": "points = [[-1000000,-1000000],[1000000,1000000]]",
        "output": "4000000"
      },
      {
        "input": "points = [[0,0]]",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= points.length <= 1000",
      "-106 <= xi, yi <= 106",
      "All pairs (xi, yi) are distinct."
    ]
  },
  {
    "questionId": 1586,
    "title": "Binary Search Tree Iterator II",
    "titleSlug": "binary-search-tree-iterator-ii",
    "content": "<p>Implement the `BSTIterator` class that represents an iterator over the in-order traversal of a binary search tree (BST):\n`BSTIterator(TreeNode root)` Initializes an object of the `BSTIterator` class. The `root` of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.</p>\n<p>`boolean hasNext()` Returns `true` if there exists a number in the traversal to the right of the pointer, otherwise returns `false`.</p>\n<p>`int next()` Moves the pointer to the right, then returns the number at the pointer.</p>\n<p>`boolean hasPrev()` Returns `true` if there exists a number in the traversal to the left of the pointer, otherwise returns `false`.</p>\n<p>`int prev()` Moves the pointer to the left, then returns the number at the pointer.</p>\n<p>Notice that by initializing the pointer to a non-existent smallest number, the first call to `next()` will return the smallest element in the BST.</p>\n<p>You may assume that `next()` and `prev()` calls will always be valid. That is, there will be at least a next/previous number in the in-order traversal when `next()`/`prev()` is called.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def binary_search_tree_iterator_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 105].",
      "0 <= Node.val <= 106",
      "At most 105 calls will be made to hasNext, next, hasPrev, and prev.",
      "Follow up: Could you solve the problem without precalculating the values of the tree?"
    ]
  },
  {
    "questionId": 1588,
    "title": "Sum of All Odd Length Subarrays",
    "titleSlug": "sum-of-all-odd-length-subarrays",
    "content": "<p>Given an array of positive integers `arr`, calculate the sum of all possible odd-length subarrays.</p>\n<p>A subarray is a contiguous subsequence of the array.</p>\n<p>Return the sum of all odd-length subarrays of `arr`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sum_of_all_odd_length_subarrays(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [1,4,2,5,3]",
        "output": "58",
        "explanation": "The odd-length subarrays of arr and their sums are:"
      },
      {
        "input": "arr = [1,2]",
        "output": "3",
        "explanation": "There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3."
      },
      {
        "input": "arr = [10,11,12]",
        "output": "66"
      }
    ],
    "constraints": [
      "1 <= arr.length <= 100",
      "1 <= arr[i] <= 1000"
    ]
  },
  {
    "questionId": 1589,
    "title": "Maximum Sum Obtained of Any Permutation",
    "titleSlug": "maximum-sum-obtained-of-any-permutation",
    "content": "<p>We have an array of integers, `nums`, and an array of `requests` where `requests[i] = [starti, endi]`. The `ith` request asks for the sum of `nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]`. Both `starti` and `endi` are 0-indexed.</p>\n<p>Return the maximum total sum of all requests among all permutations of `nums`.</p>\n<p>Since the answer may be too large, return it modulo `109 + 7`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_sum_obtained_of_any_permutation(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3,4,5], requests = [[1,3],[0,1]]",
        "output": "19",
        "explanation": "One permutation of nums is [2,1,3,4,5] with the following result:"
      },
      {
        "input": "nums = [1,2,3,4,5,6], requests = [[0,1]]",
        "output": "11",
        "explanation": "A permutation with the max total sum is [6,5,4,3,2,1] with request sums [11]."
      },
      {
        "input": "nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]",
        "output": "47",
        "explanation": "A permutation with the max total sum is [4,10,5,3,2,1] with request sums [19,18,10]."
      }
    ],
    "constraints": [
      "n == nums.length",
      "1 <= n <= 105",
      "0 <= nums[i] <= 105",
      "1 <= requests.length <= 105",
      "requests[i].length == 2",
      "0 <= starti <= endi < n"
    ]
  },
  {
    "questionId": 1590,
    "title": "Make Sum Divisible by P",
    "titleSlug": "make-sum-divisible-by-p",
    "content": "<p>Given an array of positive integers `nums`, remove the smallest subarray (possibly empty) such that the sum of the remaining elements is divisible by `p`. It is not allowed to remove the whole array.</p>\n<p>Return the length of the smallest subarray that you need to remove, or `-1` if it's impossible.</p>\n<p>A subarray is defined as a contiguous block of elements in the array.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def make_sum_divisible_by_p(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [3,1,4,2], p = 6",
        "output": "1",
        "explanation": "The sum of the elements in nums is 10, which is not divisible by 6. We can remove the subarray [4], and the sum of the remaining elements is 6, which is divisible by 6."
      },
      {
        "input": "nums = [6,3,5,2], p = 9",
        "output": "2",
        "explanation": "We cannot remove a single element to get a sum divisible by 9. The best way is to remove the subarray [5,2], leaving us with [6,3] with sum 9."
      },
      {
        "input": "nums = [1,2,3], p = 3",
        "output": "0",
        "explanation": "Here the sum is 6. which is already divisible by 3. Thus we do not need to remove anything."
      },
      {
        "input": "nums = [1,2,3], p = 7",
        "output": "-1",
        "explanation": "There is no way to remove a subarray in order to get a sum divisible by 7."
      },
      {
        "input": "nums = [1000000000,1000000000,1000000000], p = 3",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 105",
      "1 <= nums[i] <= 109",
      "1 <= p <= 109"
    ]
  },
  {
    "questionId": 1592,
    "title": "Rearrange Spaces Between Words",
    "titleSlug": "rearrange-spaces-between-words",
    "content": "<p>You are given a string `text` of words that are placed among some number of spaces. Each word consists of one or more lowercase English letters and are separated by at least one space. It's guaranteed that `text` contains at least one word.</p>\n<p>Rearrange the spaces so that there is an equal number of spaces between every pair of adjacent words and that number is maximized. If you cannot redistribute all the spaces equally, place the extra spaces at the end, meaning the returned string should be the same length as `text`.</p>\n<p>Return the string after rearranging the spaces.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def rearrange_spaces_between_words(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "text = \"  this   is  a sentence \"",
        "output": "\"this   is   a   sentence\"",
        "explanation": "There are a total of 9 spaces and 4 words. We can evenly divide the 9 spaces between the words: 9 / (4-1) = 3 spaces."
      },
      {
        "input": "text = \" practice   makes   perfect\"",
        "output": "\"practice   makes   perfect \"",
        "explanation": "There are a total of 7 spaces and 3 words. 7 / (3-1) = 3 spaces plus 1 extra space. We place this extra space at the end of the string."
      },
      {
        "input": "text = \"hello   world\"",
        "output": "\"hello   world\""
      },
      {
        "input": "text = \"  walks  udp package   into  bar a\"",
        "output": "\"walks  udp  package  into  bar  a \""
      },
      {
        "input": "text = \"a\"",
        "output": "\"a\""
      }
    ],
    "constraints": [
      "1 <= text.length <= 100",
      "text consists of lowercase English letters and ' '.",
      "text contains at least one word."
    ]
  },
  {
    "questionId": 1593,
    "title": "Split a String Into the Max Number of Unique Substrings",
    "titleSlug": "split-a-string-into-the-max-number-of-unique-substrings",
    "content": "<p>Given a string `s`, return the maximum number of unique substrings that the given string can be split into.</p>\n<p>You can split string `s` into any list of non-empty substrings, where the concatenation of the substrings forms the original string. However, you must split the substrings such that all of them are unique.</p>\n<p>A substring is a contiguous sequence of characters within a string.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def split_a_string_into_the_max_number_of_unique_substrings(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"ababccc\"",
        "output": "5",
        "explanation": "One way to split maximally is ['a', 'b', 'ab', 'c', 'cc']. Splitting like ['a', 'b', 'a', 'b', 'c', 'cc'] is not valid as you have 'a' and 'b' multiple times."
      },
      {
        "input": "s = \"aba\"",
        "output": "2",
        "explanation": "One way to split maximally is ['a', 'ba']."
      },
      {
        "input": "s = \"aa\"",
        "output": "1",
        "explanation": "It is impossible to split the string any further."
      }
    ],
    "constraints": [
      "1 <= s.length <= 16",
      "s contains only lower case English letters."
    ]
  },
  {
    "questionId": 1594,
    "title": "Maximum Non Negative Product in a Matrix",
    "titleSlug": "maximum-non-negative-product-in-a-matrix",
    "content": "<p>You are given a `rows x cols` matrix `grid`. Initially, you are located at the top-left corner `(0, 0)`, and in each step, you can only move right or down in the matrix.</p>\n<p>Among all possible paths starting from the top-left corner `(0, 0)` and ending in the bottom-right corner `(rows - 1, cols - 1)`, find the path with the maximum non-negative product. The product of a path is the product of all integers in the grid cells visited along the path.</p>\n<p>Return the maximum non-negative product modulo `109 + 7`. If the maximum product is negative return `-1`.</p>\n<p>Notice that the modulo is performed after getting the maximum product.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_non_negative_product_in_a_matrix(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "grid = [[-1,-2,-3],",
        "output": "-1",
        "explanation": "It's not possible to get non-negative product in the path from (0, 0) to (2, 2), so return -1."
      },
      {
        "input": "grid = [[1,-2,1],",
        "output": "8",
        "explanation": "Maximum non-negative product is in bold (1 * 1 * -2 * -4 * 1 = 8)."
      },
      {
        "input": "grid = [[1, 3],",
        "output": "0",
        "explanation": "Maximum non-negative product is in bold (1 * 0 * -4 = 0)."
      },
      {
        "input": "grid = [[ 1, 4,4,0],",
        "output": "2",
        "explanation": "Maximum non-negative product is in bold (1 * -2 * 1 * -1 * 1 * 1 = 2)."
      }
    ],
    "constraints": [
      "1 <= rows, cols <= 15",
      "-4 <= grid[i][j] <= 4"
    ]
  },
  {
    "questionId": 1598,
    "title": "Crawler Log Folder",
    "titleSlug": "crawler-log-folder",
    "content": "<p>The Leetcode file system keeps a log each time some user performs a change folder operation.</p>\n<p>The operations are described below:\n`\"../\"` : Move to the parent folder of the current folder. (If you are already in the main folder, remain in the same folder).</p>\n<p>`\"./\"` : Remain in the same folder.</p>\n<p>`\"x/\"` : Move to the child folder named `x` (This folder is guaranteed to always exist).</p>\n<p>You are given a list of strings `logs` where `logs[i]` is the operation performed by the user at the `ith` step.</p>\n<p>The file system starts in the main folder, then the operations in `logs` are performed.</p>\n<p>Return the minimum number of operations needed to go back to the main folder after the change folder operations.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def crawler_log_folder(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "logs = [\"d1/\",\"d2/\",\"../\",\"d21/\",\"./\"]",
        "output": "2",
        "explanation": "Use this change folder operation \"../\" 2 times and go back to the main folder."
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"./\",\"d3/\",\"../\",\"d31/\"]",
        "output": "3"
      },
      {
        "input": "logs = [\"d1/\",\"../\",\"../\",\"../\"]",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= logs.length <= 103",
      "2 <= logs[i].length <= 10",
      "logs[i] contains lowercase English letters, digits, '.', and '/'.",
      "logs[i] follows the format described in the statement.",
      "Folder names consist of lowercase English letters and digits."
    ]
  },
  {
    "questionId": 1599,
    "title": "Maximum Profit of Operating a Centennial Wheel",
    "titleSlug": "maximum-profit-of-operating-a-centennial-wheel",
    "content": "<p>You are the operator of a Centennial Wheel that has four gondolas, and each gondola has room for up to four people. You have the ability to rotate the gondolas counterclockwise, which costs you `runningCost` dollars.</p>\n<p>You are given an array `customers` of length `n` where `customers[i]` is the number of new customers arriving just before the `ith` rotation (0-indexed). This means you must rotate the wheel `i` times before the `customers[i]` customers arrive. You cannot make customers wait if there is room in the gondola. Each customer pays `boardingCost` dollars when they board on the gondola closest to the ground and will exit once that gondola reaches the ground again.</p>\n<p>You can stop the wheel at any time, including before serving all customers. If you decide to stop serving customers, all subsequent rotations are free in order to get all the customers down safely. Note that if there are currently more than four customers waiting at the wheel, only four will board the gondola, and the rest will wait for the next rotation.</p>\n<p>Return the minimum number of rotations you need to perform to maximize your profit. If there is no scenario where the profit is positive, return `-1`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_profit_of_operating_a_centennial_wheel(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "customers = [8,3], boardingCost = 5, runningCost = 6",
        "output": "3",
        "explanation": "The numbers written on the gondolas are the number of people currently there."
      },
      {
        "input": "customers = [10,9,6], boardingCost = 6, runningCost = 4",
        "output": "7",
        "explanation": "1. 10 customers arrive, 4 board and 6 wait for the next gondola, the wheel rotates. Current profit is 4 * $6 - 1 * $4 = $20."
      },
      {
        "input": "customers = [3,4,0,5,1], boardingCost = 1, runningCost = 92",
        "output": "-1",
        "explanation": "1. 3 customers arrive, 3 board and 0 wait, the wheel rotates. Current profit is 3 * $1 - 1 * $92 = -$89."
      },
      {
        "input": "customers = [10,10,6,4,7], boardingCost = 3, runningCost = 8",
        "output": "9",
        "explanation": "1. 10 customers arrive, 4 board and 6 wait, the wheel rotates. Current profit is 4 * $3 - 1 * $8 = $4."
      }
    ],
    "constraints": [
      "n == customers.length",
      "1 <= n <= 105",
      "0 <= customers[i] <= 50",
      "1 <= boardingCost, runningCost <= 100"
    ]
  },
  {
    "questionId": 1600,
    "title": "Throne Inheritance",
    "titleSlug": "throne-inheritance",
    "content": "<p>A kingdom consists of a king, his children, his grandchildren, and so on. Every once in a while, someone in the family dies or a child is born.</p>\n<p>The kingdom has a well-defined order of inheritance that consists of the king as the first member. Let's define the recursive function `Successor(x, curOrder)`, which given a person `x` and the inheritance order so far, returns who should be the next person after `x` in the order of inheritance.</p>\n<p>Successor(x, curOrder):\n    if x has no children or all of x's children are in curOrder:\n        if x is the king return null\n        else return Successor(x's parent, curOrder)\n    else return x's oldest child who's not in curOrder\nFor example, assume we have a kingdom that consists of the king, his children Alice and Bob (Alice is older than Bob), and finally Alice's son Jack.</p>\n<p>In the beginning, `curOrder` will be `[\"king\"]`.</p>\n<p>Calling `Successor(king, curOrder)` will return Alice, so we append to `curOrder` to get `[\"king\", \"Alice\"]`.</p>\n<p>Calling `Successor(Alice, curOrder)` will return Jack, so we append to `curOrder` to get `[\"king\", \"Alice\", \"Jack\"]`.</p>\n<p>Calling `Successor(Jack, curOrder)` will return Bob, so we append to `curOrder` to get `[\"king\", \"Alice\", \"Jack\", \"Bob\"]`.</p>\n<p>Calling `Successor(Bob, curOrder)` will return `null`. Thus the order of inheritance will be `[\"king\", \"Alice\", \"Jack\", \"Bob\"]`.</p>\n<p>Using the above function, we can always obtain a unique order of inheritance.</p>\n<p>Implement the `ThroneInheritance` class:\n`ThroneInheritance(string kingName)` Initializes an object of the `ThroneInheritance` class. The name of the king is given as part of the constructor.</p>\n<p>`void birth(string parentName, string childName)` Indicates that `parentName` gave birth to `childName`.</p>\n<p>`void death(string name)` Indicates the death of `name`. The death of the person doesn't affect the `Successor` function nor the current inheritance order. You can treat it as just marking the person as dead.</p>\n<p>`string[] getInheritanceOrder()` Returns a list representing the current order of inheritance excluding dead people.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def throne_inheritance(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= kingName.length, parentName.length, childName.length, name.length <= 15",
      "kingName, parentName, childName, and name consist of lowercase English letters only.",
      "All arguments childName and kingName are distinct.",
      "All name arguments of death will be passed to either the constructor or as childName to birth first.",
      "For each call to birth(parentName, childName), it is guaranteed that parentName is alive.",
      "At most 105 calls will be made to birth and death.",
      "At most 10 calls will be made to getInheritanceOrder."
    ]
  },
  {
    "questionId": 1602,
    "title": "Find Nearest Right Node in Binary Tree",
    "titleSlug": "find-nearest-right-node-in-binary-tree",
    "content": "<p>Given the `root` of a binary tree and a node `u` in the tree, return the nearest node on the same level that is to the right of `u`, or return `null` if `u` is the rightmost node in its level.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_nearest_right_node_in_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2,3,null,4,5,6], u = 4",
        "output": "5",
        "explanation": "The nearest node on the same level to the right of node 4 is node 5."
      },
      {
        "input": "root = [3,null,4,2], u = 2",
        "output": "null",
        "explanation": "There are no nodes to the right of 2."
      },
      {
        "input": "root = [1], u = 1",
        "output": "null"
      },
      {
        "input": "root = [3,4,2,null,null,null,1], u = 4",
        "output": "2"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 105].",
      "1 <= Node.val <= 105",
      "All values in the tree are distinct.",
      "u is a node in the binary tree rooted at root."
    ]
  },
  {
    "questionId": 1603,
    "title": "Design Parking System",
    "titleSlug": "design-parking-system",
    "content": "<p>Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.</p>\n<p>Implement the `ParkingSystem` class:\n`ParkingSystem(int big, int medium, int small)` Initializes object of the `ParkingSystem` class. The number of slots for each parking space are given as part of the constructor.</p>\n<p>`bool addCar(int carType)` Checks whether there is a parking space of `carType` for the car that wants to get into the parking lot. `carType` can be of three kinds: big, medium, or small, which are represented by `1`, `2`, and `3` respectively. A car can only park in a parking space of its `carType`. If there is no space available, return `false`, else park the car in that size space and return `true`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def design_parking_system(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "0 <= big, medium, small <= 1000",
      "carType is 1, 2, or 3",
      "At most 1000 calls will be made to addCar"
    ]
  },
  {
    "questionId": 1604,
    "title": "Alert Using Same Key-Card Three or More Times in a One Hour Period",
    "titleSlug": "alert-using-same-key-card-three-or-more-times-in-a-one-hour-period",
    "content": "<p>LeetCode company workers use key-cards to unlock office doors. Each time a worker uses their key-card, the security system saves the worker's name and the time when it was used. The system emits an alert if any worker uses the key-card three or more times in a one-hour period.</p>\n<p>You are given a list of strings `keyName` and `keyTime` where `[keyName[i], keyTime[i]]` corresponds to a person's name and the time when their key-card was used in a single day.</p>\n<p>Access times are given in the 24-hour time format \"HH:MM\", such as `\"23:51\"` and `\"09:49\"`.</p>\n<p>Return a list of unique worker names who received an alert for frequent keycard use. Sort the names in ascending order alphabetically.</p>\n<p>Notice that `\"10:00\"` - `\"11:00\"` is considered to be within a one-hour period, while `\"22:51\"` - `\"23:52\"` is not considered to be within a one-hour period.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def alert_using_same_key_card_three_or_more_times_in_a_one_hour_period(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "keyName = [\"daniel\",\"daniel\",\"daniel\",\"luis\",\"luis\",\"luis\",\"luis\"], keyTime = [\"10:00\",\"10:40\",\"11:00\",\"09:00\",\"11:00\",\"13:00\",\"15:00\"]",
        "output": "[\"daniel\"]",
        "explanation": "\"daniel\" used the keycard 3 times in a one-hour period (\"10:00\",\"10:40\", \"11:00\")."
      },
      {
        "input": "keyName = [\"alice\",\"alice\",\"alice\",\"bob\",\"bob\",\"bob\",\"bob\"], keyTime = [\"12:01\",\"12:00\",\"18:00\",\"21:00\",\"21:20\",\"21:30\",\"23:00\"]",
        "output": "[\"bob\"]",
        "explanation": "\"bob\" used the keycard 3 times in a one-hour period (\"21:00\",\"21:20\", \"21:30\")."
      },
      {
        "input": "keyName = [\"john\",\"john\",\"john\"], keyTime = [\"23:58\",\"23:59\",\"00:01\"]",
        "output": "[]"
      },
      {
        "input": "keyName = [\"leslie\",\"leslie\",\"leslie\",\"clare\",\"clare\",\"clare\",\"clare\"], keyTime = [\"13:00\",\"13:20\",\"14:00\",\"18:00\",\"18:51\",\"19:30\",\"19:49\"]",
        "output": "[\"clare\",\"leslie\"]"
      }
    ],
    "constraints": [
      "1 <= keyName.length, keyTime.length <= 105",
      "keyName.length == keyTime.length",
      "keyTime[i] is in the format \"HH:MM\".",
      "[keyName[i], keyTime[i]] is unique.",
      "1 <= keyName[i].length <= 10",
      "keyName[i] contains only lowercase English letters."
    ]
  },
  {
    "questionId": 1605,
    "title": "Find Valid Matrix Given Row and Column Sums",
    "titleSlug": "find-valid-matrix-given-row-and-column-sums",
    "content": "<p>You are given two arrays `rowSum` and `colSum` of non-negative integers where `rowSum[i]` is the sum of the elements in the `ith` row and `colSum[j]` is the sum of the elements of the `jth` column of a 2D matrix. In other words, you do not know the elements of the matrix, but you do know the sums of each row and column.</p>\n<p>Find any matrix of non-negative integers of size `rowSum.length x colSum.length` that satisfies the `rowSum` and `colSum` requirements.</p>\n<p>Return a 2D array representing any matrix that fulfills the requirements. It's guaranteed that at least one matrix that fulfills the requirements exists.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_valid_matrix_given_row_and_column_sums(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "rowSum = [3,8], colSum = [4,7]",
        "output": "[[3,0],",
        "explanation": "0th row: 3 + 0 = 3 == rowSum[0]"
      },
      {
        "input": "rowSum = [5,7,10], colSum = [8,6,8]",
        "output": "[[0,5,0],"
      },
      {
        "input": "rowSum = [14,9], colSum = [6,9,8]",
        "output": "[[0,9,5],"
      },
      {
        "input": "rowSum = [1,0], colSum = [1]",
        "output": "[[1],"
      },
      {
        "input": "rowSum = [0], colSum = [0]",
        "output": "[[0]]"
      }
    ],
    "constraints": [
      "1 <= rowSum.length, colSum.length <= 500",
      "0 <= rowSum[i], colSum[i] <= 108",
      "sum(rows) == sum(columns)"
    ]
  },
  {
    "questionId": 1608,
    "title": "Special Array With X Elements Greater Than or Equal X",
    "titleSlug": "special-array-with-x-elements-greater-than-or-equal-x",
    "content": "<p>You are given an array `nums` of non-negative integers. `nums` is considered special if there exists a number `x` such that there are exactly `x` numbers in `nums` that are greater than or equal to `x`.</p>\n<p>Notice that `x` does not have to be an element in `nums`.</p>\n<p>Return `x` if the array is special, otherwise, return `-1`. It can be proven that if `nums` is special, the value for `x` is unique.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def special_array_with_x_elements_greater_than_or_equal_x(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [3,5]",
        "output": "2",
        "explanation": "There are 2 values (3 and 5) that are greater than or equal to 2."
      },
      {
        "input": "nums = [0,0]",
        "output": "-1",
        "explanation": "No numbers fit the criteria for x."
      },
      {
        "input": "nums = [0,4,3,0,4]",
        "output": "3",
        "explanation": "There are 3 values that are greater than or equal to 3."
      },
      {
        "input": "nums = [3,6,7,7,0]",
        "output": "-1"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 100",
      "0 <= nums[i] <= 1000"
    ]
  },
  {
    "questionId": 1609,
    "title": "Even Odd Tree",
    "titleSlug": "even-odd-tree",
    "content": "<p>A binary tree is named Even-Odd if it meets the following conditions:\nThe root of the binary tree is at level index `0`, its children are at level index `1`, their children are at level index `2`, etc.</p>\n<p>For every even-indexed level, all nodes at the level have odd integer values in strictly increasing order (from left to right).</p>\n<p>For every odd-indexed level, all nodes at the level have even integer values in strictly decreasing order (from left to right).</p>\n<p>Given the `root` of a binary tree, return `true` if the binary tree is Even-Odd, otherwise return `false`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def even_odd_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,10,4,3,null,7,9,12,8,6,null,null,2]",
        "output": "true",
        "explanation": "The node values on each level are:"
      },
      {
        "input": "root = [5,4,2,3,3,7]",
        "output": "false",
        "explanation": "The node values on each level are:"
      },
      {
        "input": "root = [5,9,1,3,5,7]",
        "output": "false",
        "explanation": "Node values in the level 1 should be even integers."
      },
      {
        "input": "root = [1]",
        "output": "true"
      },
      {
        "input": "root = [11,8,6,1,3,9,11,30,20,18,16,12,10,4,2,17]",
        "output": "true"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 105].",
      "1 <= Node.val <= 106"
    ]
  },
  {
    "questionId": 1612,
    "title": "Check If Two Expression Trees are Equivalent",
    "titleSlug": "check-if-two-expression-trees-are-equivalent",
    "content": "<p>A binary expression tree is a kind of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has either zero or two children. Leaf nodes (nodes with 0 children) correspond to operands (variables), and internal nodes (nodes with two children) correspond to the operators. In this problem, we only consider the `'+'` operator (i.e. addition).</p>\n<p>You are given the roots of two binary expression trees, `root1` and `root2`. Return `true` if the two binary expression trees are equivalent. Otherwise, return `false`.</p>\n<p>Two binary expression trees are equivalent if they evaluate to the same value regardless of what the variables are set to.</p>\n<p>Follow up: What will you change in your solution if the tree also supports the `'-'` operator (i.e. subtraction)?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def check_if_two_expression_trees_are_equivalent(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root1 = [x], root2 = [x]",
        "output": "true"
      },
      {
        "input": "root1 = [+,a,+,null,null,b,c], root2 = [+,+,a,b,c]",
        "output": "true"
      },
      {
        "input": "root1 = [+,a,+,null,null,b,c], root2 = [+,+,a,b,d]",
        "output": "false"
      }
    ],
    "constraints": [
      "The number of nodes in both trees are equal, odd and, in the range [1, 4999].",
      "Node.val is '+' or a lower-case English letter.",
      "It's guaranteed that the tree given is a valid binary expression tree."
    ]
  },
  {
    "questionId": 1614,
    "title": "Maximum Nesting Depth of the Parentheses",
    "titleSlug": "maximum-nesting-depth-of-the-parentheses",
    "content": "<p>A string is a valid parentheses string (denoted VPS) if it meets one of the following:\nIt is an empty string `\"\"`, or a single character not equal to `\"(\"` or `\")\"`,\nIt can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are VPS's, or\nIt can be written as `(A)`, where `A` is a VPS.</p>\n<p>We can similarly define the nesting depth `depth(S)` of any VPS `S` as follows:\n`depth(\"\") = 0`\n`depth(C) = 0`, where `C` is a string with a single character not equal to `\"(\"` or `\")\"`.</p>\n<p>`depth(A + B) = max(depth(A), depth(B))`, where `A` and `B` are VPS's.</p>\n<p>`depth(\"(\" + A + \")\") = 1 + depth(A)`, where `A` is a VPS.</p>\n<p>For example, `\"\"`, `\"()()\"`, and `\"()(()())\"` are VPS's (with nesting depths 0, 1, and 2), and `\")(\"` and `\"(()\"` are not VPS's.</p>\n<p>Given a VPS represented as string `s`, return the nesting depth of `s`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_nesting_depth_of_the_parentheses(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"(1+(2*3)+((8)/4))+1\"",
        "output": "3",
        "explanation": "Digit 8 is inside of 3 nested parentheses in the string."
      },
      {
        "input": "s = \"(1)+((2))+(((3)))\"",
        "output": "3"
      },
      {
        "input": "s = \"1+(2*3)/(2-1)\"",
        "output": "1"
      },
      {
        "input": "s = \"1\"",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= s.length <= 100",
      "s consists of digits 0-9 and characters '+', '-', '*', '/', '(', and ')'.",
      "It is guaranteed that parentheses expression s is a VPS."
    ]
  },
  {
    "questionId": 1615,
    "title": "Maximal Network Rank",
    "titleSlug": "maximal-network-rank",
    "content": "<p>There is an infrastructure of `n` cities with some number of `roads` connecting these cities. Each `roads[i] = [ai, bi]` indicates that there is a bidirectional road between cities `ai` and `bi`.</p>\n<p>The network rank of two different cities is defined as the total number of directly connected roads to either city. If a road is directly connected to both cities, it is only counted once.</p>\n<p>The maximal network rank of the infrastructure is the maximum network rank of all pairs of different cities.</p>\n<p>Given the integer `n` and the array `roads`, return the maximal network rank of the entire infrastructure.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximal_network_rank(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 4, roads = [[0,1],[0,3],[1,2],[1,3]]",
        "output": "4",
        "explanation": "The network rank of cities 0 and 1 is 4 as there are 4 roads that are connected to either 0 or 1. The road between 0 and 1 is only counted once."
      },
      {
        "input": "n = 5, roads = [[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]]",
        "output": "5",
        "explanation": "There are 5 roads that are connected to cities 1 or 2."
      },
      {
        "input": "n = 8, roads = [[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]",
        "output": "5",
        "explanation": "The network rank of 2 and 5 is 5. Notice that all the cities do not have to be connected."
      }
    ],
    "constraints": [
      "2 <= n <= 100",
      "0 <= roads.length <= n * (n - 1) / 2",
      "roads[i].length == 2",
      "0 <= ai, bi <= n-1",
      "ai != bi",
      "Each pair of cities has at most one road connecting them."
    ]
  },
  {
    "questionId": 1616,
    "title": "Split Two Strings to Make Palindrome",
    "titleSlug": "split-two-strings-to-make-palindrome",
    "content": "<p>You are given two strings `a` and `b` of the same length. Choose an index and split both strings at the same index, splitting `a` into two strings: `aprefix` and `asuffix` where `a = aprefix + asuffix`, and splitting `b` into two strings: `bprefix` and `bsuffix` where `b = bprefix + bsuffix`. Check if `aprefix + bsuffix` or `bprefix + asuffix` forms a palindrome.</p>\n<p>When you split a string `s` into `sprefix` and `ssuffix`, either `ssuffix` or `sprefix` is allowed to be empty. For example, if `s = \"abc\"`, then `\"\" + \"abc\"`, `\"a\" + \"bc\"`, `\"ab\" + \"c\"` , and `\"abc\" + \"\"` are valid splits.</p>\n<p>Return `true` if it is possible to form a palindrome string, otherwise return `false`.</p>\n<p>Notice that `x + y` denotes the concatenation of strings `x` and `y`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def split_two_strings_to_make_palindrome(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "a = \"x\", b = \"y\"",
        "output": "true"
      },
      {
        "input": "a = \"abdef\", b = \"fecab\"",
        "output": "true"
      },
      {
        "input": "a = \"ulacfd\", b = \"jizalu\"",
        "output": "true"
      },
      {
        "input": "a = \"xbdef\", b = \"xecab\"",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= a.length, b.length <= 105",
      "a.length == b.length",
      "a and b consist of lowercase English letters"
    ]
  },
  {
    "questionId": 1618,
    "title": "Maximum Font to Fit a Sentence in a Screen",
    "titleSlug": "maximum-font-to-fit-a-sentence-in-a-screen",
    "content": "<p>You are given a string `text`. We want to display `text` on a screen of width `w` and height `h`. You can choose any font size from array `fonts`, which contains the available font sizes in ascending order.</p>\n<p>You can use the `FontInfo` interface to get the width and height of any character at any available font size.</p>\n<p>The `FontInfo` interface is defined as such:\ninterface FontInfo {\n  // Returns the width of character ch on the screen using font size fontSize.</p>\n<p>// O(1) per call\n  public int getWidth(int fontSize, char ch);\n  // Returns the height of any character on the screen using font size fontSize.</p>\n<p>// O(1) per call\n  public int getHeight(int fontSize);\n}\nThe calculated width of `text` for some `fontSize` is the sum of every `getWidth(fontSize, text[i])` call for each `0 <= i < text.length` (0-indexed). The calculated height of `text` for some `fontSize` is `getHeight(fontSize)`. Note that `text` is displayed on a single line.</p>\n<p>It is guaranteed that `FontInfo` will return the same value if you call `getHeight` or `getWidth` with the same parameters.</p>\n<p>It is also guaranteed that for any font size `fontSize` and any character `ch`:\n`getHeight(fontSize) <= getHeight(fontSize+1)`\n`getWidth(fontSize, ch) <= getWidth(fontSize+1, ch)`\nReturn the maximum font size you can use to display `text` on the screen. If `text` cannot fit on the display with any font size, return `-1`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_font_to_fit_a_sentence_in_a_screen(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "text = \"helloworld\", w = 80, h = 20, fonts = [6,8,10,12,14,16,18,24,36]",
        "output": "6"
      },
      {
        "input": "text = \"leetcode\", w = 1000, h = 50, fonts = [1,2,4]",
        "output": "4"
      },
      {
        "input": "text = \"easyquestion\", w = 100, h = 100, fonts = [10,15,20,25]",
        "output": "-1"
      }
    ],
    "constraints": [
      "1 <= text.length <= 50000",
      "text contains only lowercase English letters.",
      "1 <= w <= 107",
      "1 <= h <= 104",
      "1 <= fonts.length <= 105",
      "1 <= fonts[i] <= 105",
      "fonts is sorted in ascending order and does not contain duplicates."
    ]
  },
  {
    "questionId": 1619,
    "title": "Mean of Array After Removing Some Elements",
    "titleSlug": "mean-of-array-after-removing-some-elements",
    "content": "<p>Given an integer array `arr`, return the mean of the remaining integers after removing the smallest `5%` and the largest `5%` of the elements.</p>\n<p>Answers within `10-5` of the actual answer will be considered accepted.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def mean_of_array_after_removing_some_elements(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]",
        "output": "2.00000",
        "explanation": "After erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2."
      },
      {
        "input": "arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]",
        "output": "4.00000"
      },
      {
        "input": "arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]",
        "output": "4.77778"
      },
      {
        "input": "arr = [9,7,8,7,7,8,4,4,6,8,8,7,6,8,8,9,2,6,0,0,1,10,8,6,3,3,5,1,10,9,0,7,10,0,10,4,1,10,6,9,3,6,0,0,2,7,0,6,7,2,9,7,7,3,0,1,6,1,10,3]",
        "output": "5.27778"
      },
      {
        "input": "arr = [4,8,4,10,0,7,1,3,7,8,8,3,4,1,6,2,1,1,8,0,9,8,0,3,9,10,3,10,1,10,7,3,2,1,4,9,10,7,6,4,0,8,5,1,2,1,6,2,5,0,7,10,9,10,3,7,10,5,8,5,7,6,7,6,10,9,5,10,5,5,7,2,10,7,7,8,2,0,1,1]",
        "output": "5.29167"
      }
    ],
    "constraints": [
      "20 <= arr.length <= 1000",
      "arr.length is a multiple of 20.",
      "0 <= arr[i] <= 105"
    ]
  },
  {
    "questionId": 1620,
    "title": "Coordinate With Maximum Network Quality",
    "titleSlug": "coordinate-with-maximum-network-quality",
    "content": "<p>You are given an array of network towers `towers` and an integer `radius`, where `towers[i] = [xi, yi, qi]` denotes the `ith` network tower with location `(xi, yi)` and quality factor `qi`. All the coordinates are integral coordinates on the X-Y plane, and the distance between two coordinates is the Euclidean distance.</p>\n<p>The integer `radius` denotes the maximum distance in which the tower is reachable. The tower is reachable if the distance is less than or equal to `radius`. Outside that distance, the signal becomes garbled, and the tower is not reachable.</p>\n<p>The signal quality of the `ith` tower at a coordinate `(x, y)` is calculated with the formula `\u230aqi / (1 + d)\u230b`, where `d` is the distance between the tower and the coordinate. The network quality at a coordinate is the sum of the signal qualities from all the reachable towers.</p>\n<p>Return the integral coordinate where the network quality is maximum. If there are multiple coordinates with the same network quality, return the lexicographically minimum coordinate.</p>\n<p>Note:\nA coordinate `(x1, y1)` is lexicographically smaller than `(x2, y2)` if either `x1 < x2` or `x1 == x2` and `y1 < y2`.</p>\n<p>`\u230aval\u230b` is the greatest integer less than or equal to `val` (the floor function).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def coordinate_with_maximum_network_quality(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2",
        "output": "[2,1]",
        "explanation": "At coordinate (2, 1) the total quality is 13"
      },
      {
        "input": "towers = [[23,11,21]], radius = 9",
        "output": "[23,11]"
      },
      {
        "input": "towers = [[1,2,13],[2,1,7],[0,1,9]], radius = 2",
        "output": "[1,2]"
      },
      {
        "input": "towers = [[2,1,9],[0,1,9]], radius = 2",
        "output": "[0,1]",
        "explanation": "Both (0, 1) and (2, 1) are optimal in terms of quality but (0, 1) is lexicograpically minimal."
      }
    ],
    "constraints": [
      "1 <= towers.length <= 50",
      "towers[i].length == 3",
      "0 <= xi, yi, qi <= 50",
      "1 <= radius <= 50"
    ]
  },
  {
    "questionId": 1621,
    "title": "Number of Sets of K Non-Overlapping Line Segments",
    "titleSlug": "number-of-sets-of-k-non-overlapping-line-segments",
    "content": "<p>Given `n` points on a 1-D plane, where the `ith` point (from `0` to `n-1`) is at `x = i`, find the number of ways we can draw exactly `k` non-overlapping line segments such that each segment covers two or more points. The endpoints of each segment must have integral coordinates. The `k` line segments do not have to cover all `n` points, and they are allowed to share endpoints.</p>\n<p>Return the number of ways we can draw `k` non-overlapping line segments. Since this number can be huge, return it modulo `109 + 7`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_sets_of_k_non_overlapping_line_segments(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 4, k = 2",
        "output": "5",
        "explanation": "The two line segments are shown in red and blue."
      },
      {
        "input": "n = 3, k = 1",
        "output": "3",
        "explanation": "The 3 ways are {(0,1)}, {(0,2)}, {(1,2)}."
      },
      {
        "input": "n = 30, k = 7",
        "output": "796297179",
        "explanation": "The total number of possible ways to draw 7 line segments is 3796297200. Taking this number modulo 109 + 7 gives us 796297179."
      },
      {
        "input": "n = 5, k = 3",
        "output": "7"
      },
      {
        "input": "n = 3, k = 2",
        "output": "1"
      }
    ],
    "constraints": [
      "2 <= n <= 1000",
      "1 <= k <= n-1"
    ]
  },
  {
    "questionId": 1624,
    "title": "Largest Substring Between Two Equal Characters",
    "titleSlug": "largest-substring-between-two-equal-characters",
    "content": "<p>Given a string `s`, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return `-1`.</p>\n<p>A substring is a contiguous sequence of characters within a string.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def largest_substring_between_two_equal_characters(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"aa\"",
        "output": "0",
        "explanation": "The optimal substring here is an empty substring between the two `'a's`."
      },
      {
        "input": "s = \"abca\"",
        "output": "2",
        "explanation": "The optimal substring here is \"bc\"."
      },
      {
        "input": "s = \"cbzxy\"",
        "output": "-1",
        "explanation": "There are no characters that appear twice in s."
      },
      {
        "input": "s = \"cabbac\"",
        "output": "4",
        "explanation": "The optimal substring here is \"abba\". Other non-optimal substrings include \"bb\" and \"\"."
      }
    ],
    "constraints": [
      "1 <= s.length <= 300",
      "s contains only lowercase English letters."
    ]
  },
  {
    "questionId": 1625,
    "title": "Lexicographically Smallest String After Applying Operations",
    "titleSlug": "lexicographically-smallest-string-after-applying-operations",
    "content": "<p>You are given a string `s` of even length consisting of digits from `0` to `9`, and two integers `a` and `b`.</p>\n<p>You can apply either of the following two operations any number of times and in any order on `s`:\nAdd `a` to all odd indices of `s` (0-indexed). Digits post `9` are cycled back to `0`. For example, if `s = \"3456\"` and `a = 5`, `s` becomes `\"3951\"`.</p>\n<p>Rotate `s` to the right by `b` positions. For example, if `s = \"3456\"` and `b = 1`, `s` becomes `\"6345\"`.</p>\n<p>Return the lexicographically smallest string you can obtain by applying the above operations any number of times on `s`.</p>\n<p>A string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, string `a` has a letter that appears earlier in the alphabet than the corresponding letter in `b`. For example, `\"0158\"` is lexicographically smaller than `\"0190\"` because the first position they differ is at the third letter, and `'5'` comes before `'9'`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def lexicographically_smallest_string_after_applying_operations(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"5525\", a = 9, b = 2",
        "output": "\"2050\"",
        "explanation": "We can apply the following operations:"
      },
      {
        "input": "s = \"74\", a = 5, b = 1",
        "output": "\"24\"",
        "explanation": "We can apply the following operations:"
      },
      {
        "input": "s = \"0011\", a = 4, b = 2",
        "output": "\"0011\"",
        "explanation": "There are no sequence of operations that will give us a lexicographically smaller string than \"0011\"."
      },
      {
        "input": "s = \"43987654\", a = 7, b = 3",
        "output": "\"00553311\""
      }
    ],
    "constraints": [
      "2 <= s.length <= 100",
      "s.length is even.",
      "s consists of digits from 0 to 9 only.",
      "1 <= a <= 9",
      "1 <= b <= s.length - 1"
    ]
  },
  {
    "questionId": 1626,
    "title": "Best Team With No Conflicts",
    "titleSlug": "best-team-with-no-conflicts",
    "content": "<p>You are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. The score of the team is the sum of scores of all the players in the team.</p>\n<p>However, the basketball team is not allowed to have conflicts. A conflict exists if a younger player has a strictly higher score than an older player. A conflict does not occur between players of the same age.</p>\n<p>Given two lists, `scores` and `ages`, where each `scores[i]` and `ages[i]` represents the score and age of the `ith` player, respectively, return the highest overall score of all possible basketball teams.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def best_team_with_no_conflicts(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "scores = [1,3,5,10,15], ages = [1,2,3,4,5]",
        "output": "34",
        "explanation": "You can choose all the players."
      },
      {
        "input": "scores = [4,5,6,5], ages = [2,1,2,1]",
        "output": "16",
        "explanation": "It is best to choose the last 3 players. Notice that you are allowed to choose multiple people of the same age."
      },
      {
        "input": "scores = [1,2,3,5], ages = [8,9,10,1]",
        "output": "6",
        "explanation": "It is best to choose the first 3 players."
      }
    ],
    "constraints": [
      "1 <= scores.length, ages.length <= 1000",
      "scores.length == ages.length",
      "1 <= scores[i] <= 106",
      "1 <= ages[i] <= 1000"
    ]
  },
  {
    "questionId": 1628,
    "title": "Design an Expression Tree With Evaluate Function",
    "titleSlug": "design-an-expression-tree-with-evaluate-function",
    "content": "<p>Given the `postfix` tokens of an arithmetic expression, build and return the binary expression tree that represents this expression.</p>\n<p>Postfix notation is a notation for writing arithmetic expressions in which the operands (numbers) appear before their operators. For example, the postfix tokens of the expression `4*(5-(7+2))` are represented in the array `postfix = [\"4\",\"5\",\"7\",\"2\",\"+\",\"-\",\"*\"]`.</p>\n<p>The class `Node` is an interface you should use to implement the binary expression tree. The returned tree will be tested using the `evaluate` function, which is supposed to evaluate the tree's value. You should not remove the `Node` class; however, you can modify it as you wish, and you can define other classes to implement it if needed.</p>\n<p>A binary expression tree is a kind of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has either zero or two children. Leaf nodes (nodes with 0 children) correspond to operands (numbers), and internal nodes (nodes with two children) correspond to the operators `'+'` (addition), `'-'` (subtraction), `'*'` (multiplication), and `'/'` (division).</p>\n<p>It's guaranteed that no subtree will yield a value that exceeds `109` in absolute value, and all the operations are valid (i.e., no division by zero).</p>\n<p>Follow up: Could you design the expression tree such that it is more modular? For example, is your design able to support additional operators without making changes to your existing `evaluate` implementation?</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def design_an_expression_tree_with_evaluate_function(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = [\"3\",\"4\",\"+\",\"2\",\"*\",\"7\",\"/\"]",
        "output": "2",
        "explanation": "this expression evaluates to the above binary tree with expression (`(3+4)*2)/7) = 14/7 = 2.`"
      },
      {
        "input": "s = [\"4\",\"5\",\"7\",\"2\",\"+\",\"-\",\"*\"]",
        "output": "-16",
        "explanation": "this expression evaluates to the above binary tree with expression 4*(5-`(2+7)) = 4*(-4) = -16.`"
      },
      {
        "input": "s = [\"4\",\"2\",\"+\",\"3\",\"5\",\"1\",\"-\",\"*\",\"+\"]",
        "output": "18"
      },
      {
        "input": "s = [\"100\",\"200\",\"+\",\"2\",\"/\",\"5\",\"*\",\"7\",\"+\"]",
        "output": "757"
      }
    ],
    "constraints": [
      "1 <= s.length < 100",
      "s.length is odd.",
      "s consists of numbers and the characters '+', '-', '*', and '/'.",
      "If s[i] is a number, its integer representation is no more than 105.",
      "It is guaranteed that s is a valid expression.",
      "The absolute value of the result and intermediate values will not exceed 109.",
      "It is guaranteed that no expression will include division by zero."
    ]
  },
  {
    "questionId": 1629,
    "title": "Slowest Key",
    "titleSlug": "slowest-key",
    "content": "<p>A newly designed keypad was tested, where a tester pressed a sequence of `n` keys, one at a time.</p>\n<p>You are given a string `keysPressed` of length `n`, where `keysPressed[i]` was the `ith` key pressed in the testing sequence, and a sorted list `releaseTimes`, where `releaseTimes[i]` was the time the `ith` key was released. Both arrays are 0-indexed. The `0th` key was pressed at the time `0`, and every subsequent key was pressed at the exact time the previous key was released.</p>\n<p>The tester wants to know the key of the keypress that had the longest duration. The `ith` keypress had a duration of `releaseTimes[i] - releaseTimes[i - 1]`, and the `0th` keypress had a duration of `releaseTimes[0]`.</p>\n<p>Note that the same key could have been pressed multiple times during the test, and these multiple presses of the same key may not have had the same duration.</p>\n<p>Return the key of the keypress that had the longest duration. If there are multiple such keypresses, return the lexicographically largest key of the keypresses.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def slowest_key(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "releaseTimes = [9,29,49,50], keysPressed = \"cbcd\"",
        "output": "\"c\"",
        "explanation": "The keypresses were as follows:"
      },
      {
        "input": "releaseTimes = [12,23,36,46,62], keysPressed = \"spuda\"",
        "output": "\"a\"",
        "explanation": "The keypresses were as follows:"
      }
    ],
    "constraints": [
      "releaseTimes.length == n",
      "keysPressed.length == n",
      "2 <= n <= 1000",
      "1 <= releaseTimes[i] <= 109",
      "releaseTimes[i] < releaseTimes[i+1]",
      "keysPressed contains only lowercase English letters."
    ]
  },
  {
    "questionId": 1630,
    "title": "Arithmetic Subarrays",
    "titleSlug": "arithmetic-subarrays",
    "content": "<p>A sequence of numbers is called arithmetic if it consists of at least two elements, and the difference between every two consecutive elements is the same. More formally, a sequence `s` is arithmetic if and only if `s[i+1] - s[i] == s[1] - s[0] `for all valid `i`.</p>\n<p>For example, these are arithmetic sequences:\n1, 3, 5, 7, 9\n7, 7, 7, 7\n3, -1, -5, -9\nThe following sequence is not arithmetic:\n1, 1, 2, 5, 7\nYou are given an array of `n` integers, `nums`, and two arrays of `m` integers each, `l` and `r`, representing the `m` range queries, where the `ith` query is the range `[l[i], r[i]]`. All the arrays are 0-indexed.</p>\n<p>Return a list of `boolean` elements `answer`, where `answer[i]` is `true` if the subarray `nums[l[i]], nums[l[i]+1], ... , nums[r[i]]` can be rearranged to form an arithmetic sequence, and `false` otherwise.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def arithmetic_subarrays(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = `[4,6,5,9,3,7]`, l = `[0,0,2]`, r = `[2,3,5]`",
        "output": "`[true,false,true]`",
        "explanation": "In the 0th query, the subarray is [4,6,5]. This can be rearranged as [6,5,4], which is an arithmetic sequence."
      },
      {
        "input": "nums = [-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10], l = [0,1,6,4,8,7], r = [4,4,9,7,9,10]",
        "output": "[false,true,false,false,true,true]"
      }
    ],
    "constraints": [
      "n == nums.length",
      "m == l.length",
      "m == r.length",
      "2 <= n <= 500",
      "1 <= m <= 500",
      "0 <= l[i] < r[i] < n",
      "-105 <= nums[i] <= 105"
    ]
  },
  {
    "questionId": 1631,
    "title": "Path With Minimum Effort",
    "titleSlug": "path-with-minimum-effort",
    "content": "<p>You are a hiker preparing for an upcoming hike. You are given `heights`, a 2D array of size `rows x columns`, where `heights[row][col]` represents the height of cell `(row, col)`. You are situated in the top-left cell, `(0, 0)`, and you hope to travel to the bottom-right cell, `(rows-1, columns-1)` (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.</p>\n<p>A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.</p>\n<p>Return the minimum effort required to travel from the top-left cell to the bottom-right cell.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def path_with_minimum_effort(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "heights = [[1,2,2],[3,8,2],[5,3,5]]",
        "output": "2",
        "explanation": "The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells."
      },
      {
        "input": "heights = [[1,2,3],[3,8,4],[5,3,5]]",
        "output": "1",
        "explanation": "The route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than route [1,3,5,3,5]."
      },
      {
        "input": "heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]",
        "output": "0",
        "explanation": "This route does not require any effort."
      }
    ],
    "constraints": [
      "rows == heights.length",
      "columns == heights[i].length",
      "1 <= rows, columns <= 100",
      "1 <= heights[i][j] <= 106"
    ]
  },
  {
    "questionId": 1634,
    "title": "Add Two Polynomials Represented as Linked Lists",
    "titleSlug": "add-two-polynomials-represented-as-linked-lists",
    "content": "<p>A polynomial linked list is a special type of linked list where every node represents a term in a polynomial expression.</p>\n<p>Each node has three attributes:\n`coefficient`: an integer representing the number multiplier of the term. The coefficient of the term `9x4` is `9`.</p>\n<p>`power`: an integer representing the exponent. The power of the term `9x4` is `4`.</p>\n<p>`next`: a pointer to the next node in the list, or `null` if it is the last node of the list.</p>\n<p>For example, the polynomial `5x3 + 4x - 7` is represented by the polynomial linked list illustrated below:\nThe polynomial linked list must be in its standard form: the polynomial must be in strictly descending order by its `power` value. Also, terms with a `coefficient` of `0` are omitted.</p>\n<p>Given two polynomial linked list heads, `poly1` and `poly2`, add the polynomials together and return the head of the sum of the polynomials.</p>\n<p>`PolyNode` format:\nThe input/output format is as a list of `n` nodes, where each node is represented as its `[coefficient, power]`. For example, the polynomial `5x3 + 4x - 7` would be represented as: `[[5,3],[4,1],[-7,0]]`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def add_two_polynomials_represented_as_linked_lists(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "poly1 = [[1,1]], poly2 = [[1,0]]",
        "output": "[[1,1],[1,0]]",
        "explanation": "poly1 = x. poly2 = 1. The sum is x + 1."
      },
      {
        "input": "poly1 = [[2,2],[4,1],[3,0]], poly2 = [[3,2],[-4,1],[-1,0]]",
        "output": "[[5,2],[2,0]]",
        "explanation": "poly1 = 2x2 + 4x + 3. poly2 = 3x2 - 4x - 1. The sum is 5x2 + 2. Notice that we omit the \"0x\" term."
      },
      {
        "input": "poly1 = [[1,2]], poly2 = [[-1,2]]",
        "output": "[]",
        "explanation": "The sum is 0. We return an empty list."
      }
    ],
    "constraints": [
      "0 <= n <= 104",
      "-109 <= PolyNode.coefficient <= 109",
      "PolyNode.coefficient != 0",
      "0 <= PolyNode.power <= 109",
      "PolyNode.power > PolyNode.next.power"
    ]
  },
  {
    "questionId": 1636,
    "title": "Sort Array by Increasing Frequency",
    "titleSlug": "sort-array-by-increasing-frequency",
    "content": "<p>Given an array of integers `nums`, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.</p>\n<p>Return the sorted array.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sort_array_by_increasing_frequency(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,1,2,2,2,3]",
        "output": "[3,1,1,2,2,2]",
        "explanation": "'3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3."
      },
      {
        "input": "nums = [2,3,1,3,2]",
        "output": "[1,3,3,2,2]",
        "explanation": "'2' and '3' both have a frequency of 2, so they are sorted in decreasing order."
      },
      {
        "input": "nums = [-1,1,-6,4,5,-6,1,4,1]",
        "output": "[5,-1,4,4,-6,-6,1,1,1]"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 100",
      "-100 <= nums[i] <= 100"
    ]
  },
  {
    "questionId": 1637,
    "title": "Widest Vertical Area Between Two Points Containing No Points",
    "titleSlug": "widest-vertical-area-between-two-points-containing-no-points",
    "content": "<p>Given `n` `points` on a 2D plane where `points[i] = [xi, yi]`, Return the widest vertical area between two points such that no points are inside the area.</p>\n<p>A vertical area is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). The widest vertical area is the one with the maximum width.</p>\n<p>Note that points on the edge of a vertical area are not considered included in the area.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def widest_vertical_area_between_two_points_containing_no_points(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "points = [[8,7],[9,9],[7,4],[9,7]]",
        "output": "1",
        "explanation": "Both the red and the blue area are optimal."
      },
      {
        "input": "points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]",
        "output": "3"
      }
    ],
    "constraints": [
      "n == points.length",
      "2 <= n <= 105",
      "points[i].length == 2",
      "0 <= xi, yi <= 109"
    ]
  },
  {
    "questionId": 1638,
    "title": "Count Substrings That Differ by One Character",
    "titleSlug": "count-substrings-that-differ-by-one-character",
    "content": "<p>Given two strings `s` and `t`, find the number of ways you can choose a non-empty substring of `s` and replace a single character by a different character such that the resulting substring is a substring of `t`. In other words, find the number of substrings in `s` that differ from some substring in `t` by exactly one character.</p>\n<p>For example, the underlined substrings in `\"computer\"` and `\"computation\"` only differ by the `'e'`/`'a'`, so this is a valid way.</p>\n<p>Return the number of substrings that satisfy the condition above.</p>\n<p>A substring is a contiguous sequence of characters within a string.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_substrings_that_differ_by_one_character(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"aba\", t = \"baba\"",
        "output": "6",
        "explanation": "The following are the pairs of substrings from s and t that differ by exactly 1 character:"
      },
      {
        "input": "s = \"ab\", t = \"bb\"",
        "output": "3",
        "explanation": "The following are the pairs of substrings from s and t that differ by 1 character:"
      },
      {
        "input": "s = \"a\", t = \"a\"",
        "output": "0"
      },
      {
        "input": "s = \"abe\", t = \"bbc\"",
        "output": "10"
      }
    ],
    "constraints": [
      "1 <= s.length, t.length <= 100",
      "s and t consist of lowercase English letters only."
    ]
  },
  {
    "questionId": 1640,
    "title": "Check Array Formation Through Concatenation",
    "titleSlug": "check-array-formation-through-concatenation",
    "content": "<p>You are given an array of distinct integers `arr` and an array of integer arrays `pieces`, where the integers in `pieces` are distinct. Your goal is to form `arr` by concatenating the arrays in `pieces` in any order. However, you are not allowed to reorder the integers in each array `pieces[i]`.</p>\n<p>Return `true` if it is possible to form the array `arr` from `pieces`. Otherwise, return `false`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def check_array_formation_through_concatenation(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "arr = [85], pieces = [[85]]",
        "output": "true"
      },
      {
        "input": "arr = [15,88], pieces = [[88],[15]]",
        "output": "true",
        "explanation": "Concatenate `[15]` then `[88]`"
      },
      {
        "input": "arr = [49,18,16], pieces = [[16,18,49]]",
        "output": "false",
        "explanation": "Even though the numbers match, we cannot reorder pieces[0]."
      },
      {
        "input": "arr = [91,4,64,78], pieces = [[78],[4,64],[91]]",
        "output": "true",
        "explanation": "Concatenate `[91]` then `[4,64]` then `[78]`"
      },
      {
        "input": "arr = [1,3,5,7], pieces = [[2,4,6,8]]",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= pieces.length <= arr.length <= 100",
      "sum(pieces[i].length) == arr.length",
      "1 <= pieces[i].length <= arr.length",
      "1 <= arr[i], pieces[i][j] <= 100",
      "The integers in arr are distinct.",
      "The integers in pieces are distinct (i.e., If we flatten pieces in a 1D array, all the integers in this array are distinct)."
    ]
  },
  {
    "questionId": 1641,
    "title": "Count Sorted Vowel Strings",
    "titleSlug": "count-sorted-vowel-strings",
    "content": "<p>Given an integer `n`, return the number of strings of length `n` that consist only of vowels (`a`, `e`, `i`, `o`, `u`) and are lexicographically sorted.</p>\n<p>A string `s` is lexicographically sorted if for all valid `i`, `s[i]` is the same as or comes before `s[i+1]` in the alphabet.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_sorted_vowel_strings(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 1",
        "output": "5",
        "explanation": "The 5 sorted strings that consist of vowels only are `[\"a\",\"e\",\"i\",\"o\",\"u\"].`"
      },
      {
        "input": "n = 2",
        "output": "15",
        "explanation": "The 15 sorted strings that consist of vowels only are"
      },
      {
        "input": "n = 33",
        "output": "66045"
      }
    ],
    "constraints": [
      "1 <= n <= 50"
    ]
  },
  {
    "questionId": 1642,
    "title": "Furthest Building You Can Reach",
    "titleSlug": "furthest-building-you-can-reach",
    "content": "<p>You are given an integer array `heights` representing the heights of buildings, some `bricks`, and some `ladders`.</p>\n<p>You start your journey from building `0` and move to the next building by possibly using bricks or ladders.</p>\n<p>While moving from building `i` to building `i+1` (0-indexed),\nIf the current building's height is greater than or equal to the next building's height, you do not need a ladder or bricks.</p>\n<p>If the current building's height is less than the next building's height, you can either use one ladder or `(h[i+1] - h[i])` bricks.</p>\n<p>Return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def furthest_building_you_can_reach(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1",
        "output": "4",
        "explanation": "Starting at building 0, you can follow these steps:"
      },
      {
        "input": "heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2",
        "output": "7"
      },
      {
        "input": "heights = [14,3,19,3], bricks = 17, ladders = 0",
        "output": "3"
      }
    ],
    "constraints": [
      "1 <= heights.length <= 105",
      "1 <= heights[i] <= 106",
      "0 <= bricks <= 109",
      "0 <= ladders <= heights.length"
    ]
  },
  {
    "questionId": 1644,
    "title": "Lowest Common Ancestor of a Binary Tree II",
    "titleSlug": "lowest-common-ancestor-of-a-binary-tree-ii",
    "content": "<p>Given the `root` of a binary tree, return the lowest common ancestor (LCA) of two given nodes, `p` and `q`. If either node `p` or `q` does not exist in the tree, return `null`. All values of the nodes in the tree are unique.</p>\n<p>According to the definition of LCA on Wikipedia: \"The lowest common ancestor of two nodes `p` and `q` in a binary tree `T` is the lowest node that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself)\". A descendant of a node `x` is a node `y` that is on the path from node `x` to some leaf node.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def lowest_common_ancestor_of_a_binary_tree_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1",
        "output": "3",
        "explanation": "The LCA of nodes 5 and 1 is 3."
      },
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4",
        "output": "5",
        "explanation": "The LCA of nodes 5 and 4 is 5. A node can be a descendant of itself according to the definition of LCA."
      },
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 10",
        "output": "null",
        "explanation": "Node 10 does not exist in the tree, so return null."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 104].",
      "-109 <= Node.val <= 109",
      "All Node.val are unique.",
      "p != q",
      "Follow up: Can you find the LCA traversing the tree, without checking nodes existence?"
    ]
  },
  {
    "questionId": 1646,
    "title": "Get Maximum in Generated Array",
    "titleSlug": "get-maximum-in-generated-array",
    "content": "<p>You are given an integer `n`. An array `nums` of length `n + 1` is generated in the following way:\n`nums[0] = 0`\n`nums[1] = 1`\n`nums[2 * i] = nums[i]` when `2 <= 2 * i <= n`\n`nums[2 * i + 1] = nums[i] + nums[i + 1]` when `2 <= 2 * i + 1 <= n`\nReturn the maximum integer in the array `nums`\u200b\u200b\u200b.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def get_maximum_in_generated_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 7",
        "output": "3",
        "explanation": "According to the given rules:"
      },
      {
        "input": "n = 2",
        "output": "1",
        "explanation": "According to the given rules, the maximum between nums[0], nums[1], and nums[2] is 1."
      },
      {
        "input": "n = 3",
        "output": "2",
        "explanation": "According to the given rules, the maximum between nums[0], nums[1], nums[2], and nums[3] is 2."
      }
    ],
    "constraints": [
      "0 <= n <= 100"
    ]
  },
  {
    "questionId": 1647,
    "title": "Minimum Deletions to Make Character Frequencies Unique",
    "titleSlug": "minimum-deletions-to-make-character-frequencies-unique",
    "content": "<p>A string `s` is called good if there are no two different characters in `s` that have the same frequency.</p>\n<p>Given a string `s`, return the minimum number of characters you need to delete to make `s` good.</p>\n<p>The frequency of a character in a string is the number of times it appears in the string. For example, in the string `\"aab\"`, the frequency of `'a'` is `2`, while the frequency of `'b'` is `1`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_deletions_to_make_character_frequencies_unique(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"aab\"",
        "output": "0",
        "explanation": "`s` is already good."
      },
      {
        "input": "s = \"aaabbbcc\"",
        "output": "2",
        "explanation": "You can delete two 'b's resulting in the good string \"aaabcc\"."
      },
      {
        "input": "s = \"ceabaacb\"",
        "output": "2",
        "explanation": "You can delete both 'c's resulting in the good string \"eabaab\"."
      }
    ],
    "constraints": [
      "1 <= s.length <= 105",
      "s contains only lowercase English letters."
    ]
  },
  {
    "questionId": 1648,
    "title": "Sell Diminishing-Valued Colored Balls",
    "titleSlug": "sell-diminishing-valued-colored-balls",
    "content": "<p>You have an `inventory` of different colored balls, and there is a customer that wants `orders` balls of any color.</p>\n<p>The customer weirdly values the colored balls. Each colored ball's value is the number of balls of that color you currently have in your `inventory`. For example, if you own `6` yellow balls, the customer would pay `6` for the first yellow ball. After the transaction, there are only `5` yellow balls left, so the next yellow ball is then valued at `5` (i.e., the value of the balls decreases as you sell more to the customer).</p>\n<p>You are given an integer array, `inventory`, where `inventory[i]` represents the number of balls of the `ith` color that you initially own. You are also given an integer `orders`, which represents the total number of balls that the customer wants. You can sell the balls in any order.</p>\n<p>Return the maximum total value that you can attain after selling `orders` colored balls. As the answer may be too large, return it modulo `109 + 7`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sell_diminishing_valued_colored_balls(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "inventory = [2,5], orders = 4",
        "output": "14",
        "explanation": "Sell the 1st color 1 time (2) and the 2nd color 3 times (5 + 4 + 3)."
      },
      {
        "input": "inventory = [3,5], orders = 6",
        "output": "19",
        "explanation": "Sell the 1st color 2 times (3 + 2) and the 2nd color 4 times (5 + 4 + 3 + 2)."
      },
      {
        "input": "inventory = [2,8,4,10,6], orders = 20",
        "output": "110"
      },
      {
        "input": "inventory = [1000000000], orders = 1000000000",
        "output": "21",
        "explanation": "Sell the 1st color 1000000000 times for a total value of 500000000500000000. 500000000500000000 modulo 109 + 7 = 21."
      }
    ],
    "constraints": [
      "1 <= inventory.length <= 105",
      "1 <= inventory[i] <= 109",
      "1 <= orders <= min(sum(inventory[i]), 109)"
    ]
  },
  {
    "questionId": 1650,
    "title": "Lowest Common Ancestor of a Binary Tree III",
    "titleSlug": "lowest-common-ancestor-of-a-binary-tree-iii",
    "content": "<p>Given two nodes of a binary tree `p` and `q`, return their lowest common ancestor (LCA).</p>\n<p>Each node will have a reference to its parent node. The definition for `Node` is below:\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node parent;\n}\nAccording to the definition of LCA on Wikipedia: \"The lowest common ancestor of two nodes p and q in a tree T is the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself).\"</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def lowest_common_ancestor_of_a_binary_tree_iii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1",
        "output": "3",
        "explanation": "The LCA of nodes 5 and 1 is 3."
      },
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4",
        "output": "5",
        "explanation": "The LCA of nodes 5 and 4 is 5 since a node can be a descendant of itself according to the LCA definition."
      },
      {
        "input": "root = [1,2], p = 1, q = 2",
        "output": "1"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [2, 105].",
      "-109 <= Node.val <= 109",
      "All Node.val are unique.",
      "p != q",
      "p and q exist in the tree."
    ]
  },
  {
    "questionId": 1652,
    "title": "Defuse the Bomb",
    "titleSlug": "defuse-the-bomb",
    "content": "<p>You have a bomb to defuse, and your time is running out! Your informer will provide you with a circular array `code` of length of `n` and a key `k`.</p>\n<p>To decrypt the code, you must replace every number. All the numbers are replaced simultaneously.</p>\n<p>If `k > 0`, replace the `ith` number with the sum of the next `k` numbers.</p>\n<p>If `k < 0`, replace the `ith` number with the sum of the previous `k` numbers.</p>\n<p>If `k == 0`, replace the `ith` number with `0`.</p>\n<p>As `code` is circular, the next element of `code[n-1]` is `code[0]`, and the previous element of `code[0]` is `code[n-1]`.</p>\n<p>Given the circular array `code` and an integer key `k`, return the decrypted code to defuse the bomb!</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def defuse_the_bomb(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "code = [5,7,1,4], k = 3",
        "output": "[12,10,16,13]",
        "explanation": "Each number is replaced by the sum of the next 3 numbers. The decrypted code is [7+1+4, 1+4+5, 4+5+7, 5+7+1]. Notice that the numbers wrap around."
      },
      {
        "input": "code = [1,2,3,4], k = 0",
        "output": "[0,0,0,0]",
        "explanation": "When k is zero, the numbers are replaced by 0."
      },
      {
        "input": "code = [2,4,9,3], k = -2",
        "output": "[12,5,6,13]",
        "explanation": "The decrypted code is [3+9, 2+3, 4+2, 9+4]. Notice that the numbers wrap around again. If k is negative, the sum is of the previous numbers."
      }
    ],
    "constraints": [
      "n == code.length",
      "1 <= n <= 100",
      "1 <= code[i] <= 100",
      "-(n - 1) <= k <= n - 1"
    ]
  },
  {
    "questionId": 1653,
    "title": "Minimum Deletions to Make String Balanced",
    "titleSlug": "minimum-deletions-to-make-string-balanced",
    "content": "<p>You are given a string `s` consisting only of characters `'a'` and `'b'`\u200b\u200b\u200b\u200b.</p>\n<p>You can delete any number of characters in `s` to make `s` balanced. `s` is balanced if there is no pair of indices `(i,j)` such that `i < j` and `s[i] = 'b'` and `s[j]= 'a'`.</p>\n<p>Return the minimum number of deletions needed to make `s` balanced.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_deletions_to_make_string_balanced(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"aababbab\"",
        "output": "2",
        "explanation": "You can either:"
      },
      {
        "input": "s = \"bbaaaaabb\"",
        "output": "2",
        "explanation": "The only solution is to delete the first two characters."
      }
    ],
    "constraints": [
      "1 <= s.length <= 105",
      "s[i] is 'a' or 'b'\u200b\u200b."
    ]
  },
  {
    "questionId": 1654,
    "title": "Minimum Jumps to Reach Home",
    "titleSlug": "minimum-jumps-to-reach-home",
    "content": "<p>A certain bug's home is on the x-axis at position `x`. Help them get there from position `0`.</p>\n<p>The bug jumps according to the following rules:\nIt can jump exactly `a` positions forward (to the right).</p>\n<p>It can jump exactly `b` positions backward (to the left).</p>\n<p>It cannot jump backward twice in a row.</p>\n<p>It cannot jump to any `forbidden` positions.</p>\n<p>The bug may jump forward beyond its home, but it cannot jump to positions numbered with negative integers.</p>\n<p>Given an array of integers `forbidden`, where `forbidden[i]` means that the bug cannot jump to the position `forbidden[i]`, and integers `a`, `b`, and `x`, return the minimum number of jumps needed for the bug to reach its home. If there is no possible sequence of jumps that lands the bug on position `x`, return `-1.`</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_jumps_to_reach_home(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9",
        "output": "3",
        "explanation": "3 jumps forward (0 -> 3 -> 6 -> 9) will get the bug home."
      },
      {
        "input": "forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11",
        "output": "-1"
      },
      {
        "input": "forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7",
        "output": "2",
        "explanation": "One jump forward (0 -> 16) then one jump backward (16 -> 7) will get the bug home."
      }
    ],
    "constraints": [
      "1 <= forbidden.length <= 1000",
      "1 <= a, b, forbidden[i] <= 2000",
      "0 <= x <= 2000",
      "All the elements in forbidden are distinct.",
      "Position x is not forbidden."
    ]
  },
  {
    "questionId": 1656,
    "title": "Design an Ordered Stream",
    "titleSlug": "design-an-ordered-stream",
    "content": "<p>There is a stream of `n` `(idKey, value)` pairs arriving in an arbitrary order, where `idKey` is an integer between `1` and `n` and `value` is a string. No two pairs have the same `id`.</p>\n<p>Design a stream that returns the values in increasing order of their IDs by returning a chunk (list) of values after each insertion. The concatenation of all the chunks should result in a list of the sorted values.</p>\n<p>Implement the `OrderedStream` class:\n`OrderedStream(int n)` Constructs the stream to take `n` values.</p>\n<p>`String[] insert(int idKey, String value)` Inserts the pair `(idKey, value)` into the stream, then returns the largest possible chunk of currently inserted values that appear next in the order.</p>\n<p>Example:\nInput\n[\"OrderedStream\", \"insert\", \"insert\", \"insert\", \"insert\", \"insert\"]\n[[5], [3, \"ccccc\"], [1, \"aaaaa\"], [2, \"bbbbb\"], [5, \"eeeee\"], [4, \"ddddd\"]]\nOutput\n[null, [], [\"aaaaa\"], [\"bbbbb\", \"ccccc\"], [], [\"ddddd\", \"eeeee\"]]\nExplanation\n// Note that the values ordered by ID is [\"aaaaa\", \"bbbbb\", \"ccccc\", \"ddddd\", \"eeeee\"].</p>\n<p>OrderedStream os = new OrderedStream(5);\nos.insert(3, \"ccccc\"); // Inserts (3, \"ccccc\"), returns [].</p>\n<p>os.insert(1, \"aaaaa\"); // Inserts (1, \"aaaaa\"), returns [\"aaaaa\"].</p>\n<p>os.insert(2, \"bbbbb\"); // Inserts (2, \"bbbbb\"), returns [\"bbbbb\", \"ccccc\"].</p>\n<p>os.insert(5, \"eeeee\"); // Inserts (5, \"eeeee\"), returns [].</p>\n<p>os.insert(4, \"ddddd\"); // Inserts (4, \"ddddd\"), returns [\"ddddd\", \"eeeee\"].</p>\n<p>// Concatentating all the chunks returned:\n// [] + [\"aaaaa\"] + [\"bbbbb\", \"ccccc\"] + [] + [\"ddddd\", \"eeeee\"] = [\"aaaaa\", \"bbbbb\", \"ccccc\", \"ddddd\", \"eeeee\"]\n// The resulting order is the same as the order above.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def design_an_ordered_stream(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= n <= 1000",
      "1 <= id <= n",
      "value.length == 5",
      "value consists only of lowercase letters.",
      "Each call to insert will have a unique id.",
      "Exactly n calls will be made to insert."
    ]
  },
  {
    "questionId": 1657,
    "title": "Determine if Two Strings Are Close",
    "titleSlug": "determine-if-two-strings-are-close",
    "content": "<p>Two strings are considered close if you can attain one from the other using the following operations:\nOperation 1: Swap any two existing characters.</p>\n<p>For example, `abcde -> aecdb`\nOperation 2: Transform every occurrence of one existing character into another existing character, and do the same with the other character.</p>\n<p>For example, `aacabb -> bbcbaa` (all `a`'s turn into `b`'s, and all `b`'s turn into `a`'s)\nYou can use the operations on either string as many times as necessary.</p>\n<p>Given two strings, `word1` and `word2`, return `true` if `word1` and `word2` are close, and `false` otherwise.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def determine_if_two_strings_are_close(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "word1 = \"abc\", word2 = \"bca\"",
        "output": "true",
        "explanation": "You can attain word2 from word1 in 2 operations."
      },
      {
        "input": "word1 = \"a\", word2 = \"aa\"",
        "output": "false",
        "explanation": "It is impossible to attain word2 from word1, or vice versa, in any number of operations."
      },
      {
        "input": "word1 = \"cabbba\", word2 = \"abbccc\"",
        "output": "true",
        "explanation": "You can attain word2 from word1 in 3 operations."
      },
      {
        "input": "word1 = \"cabbba\", word2 = \"aabbss\"",
        "output": "false",
        "explanation": "It is impossible to attain word2 from word1, or vice versa, in any amount of operations."
      }
    ],
    "constraints": [
      "1 <= word1.length, word2.length <= 105",
      "word1 and word2 contain only lowercase English letters."
    ]
  },
  {
    "questionId": 1658,
    "title": "Minimum Operations to Reduce X to Zero",
    "titleSlug": "minimum-operations-to-reduce-x-to-zero",
    "content": "<p>You are given an integer array `nums` and an integer `x`. In one operation, you can either remove the leftmost or the rightmost element from the array `nums` and subtract its value from `x`. Note that this modifies the array for future operations.</p>\n<p>Return the minimum number of operations to reduce `x` to exactly `0` if it's possible, otherwise, return `-1`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_operations_to_reduce_x_to_zero(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,1,4,2,3], x = 5",
        "output": "2",
        "explanation": "The optimal solution is to remove the last two elements to reduce x to zero."
      },
      {
        "input": "nums = [5,6,7,8,9], x = 4",
        "output": "-1"
      },
      {
        "input": "nums = [3,2,20,1,1,3], x = 10",
        "output": "5",
        "explanation": "The optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 105",
      "1 <= nums[i] <= 104",
      "1 <= x <= 109"
    ]
  },
  {
    "questionId": 1660,
    "title": "Correct a Binary Tree",
    "titleSlug": "correct-a-binary-tree",
    "content": "<p>You have a binary tree with a small defect. There is exactly one invalid node where its right child incorrectly points to another node at the same depth but to the invalid node's right.</p>\n<p>Given the root of the binary tree with this defect, `root`, return the root of the binary tree after removing this invalid node and every node underneath it (minus the node it incorrectly points to).</p>\n<p>Custom testing:\nThe test input is read as 3 lines:\n`TreeNode root`\n`int fromNode` (not available to `correctBinaryTree`)\n`int toNode` (not available to `correctBinaryTree`)\nAfter the binary tree rooted at `root` is parsed, the `TreeNode` with value of `fromNode` will have its right child pointer pointing to the `TreeNode` with a value of `toNode`. Then, `root` is passed to `correctBinaryTree`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def correct_a_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [1,2,3], fromNode = 2, toNode = 3",
        "output": "[1,null,3]",
        "explanation": "The node with value 2 is invalid, so remove it."
      },
      {
        "input": "root = [8,3,1,7,null,9,4,2,null,null,null,5,6], fromNode = 7, toNode = 4",
        "output": "[8,3,1,null,null,9,4,null,null,5,6]",
        "explanation": "The node with value 7 is invalid, so remove it and the node underneath it, node 2."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [3, 104].",
      "-109 <= Node.val <= 109",
      "All Node.val are unique.",
      "fromNode != toNode",
      "fromNode and toNode will exist in the tree and will be on the same depth.",
      "toNode is to the right of fromNode.",
      "fromNode.right is null in the initial tree from the test data."
    ]
  },
  {
    "questionId": 1662,
    "title": "Check If Two String Arrays are Equivalent",
    "titleSlug": "check-if-two-string-arrays-are-equivalent",
    "content": "<p>Given two string arrays `word1` and `word2`, return `true` if the two arrays represent the same string, and `false` otherwise.</p>\n<p>A string is represented by an array if the array elements concatenated in order forms the string.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def check_if_two_string_arrays_are_equivalent(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "word1 = [\"ab\", \"c\"], word2 = [\"a\", \"bc\"]",
        "output": "true",
        "explanation": "word1 represents string \"ab\" + \"c\" -> \"abc\""
      },
      {
        "input": "word1 = [\"a\", \"cb\"], word2 = [\"ab\", \"c\"]",
        "output": "false"
      },
      {
        "input": "word1  = [\"abc\", \"d\", \"defg\"], word2 = [\"abcddefg\"]",
        "output": "true"
      }
    ],
    "constraints": [
      "1 <= word1.length, word2.length <= 103",
      "1 <= word1[i].length, word2[i].length <= 103",
      "1 <= sum(word1[i].length), sum(word2[i].length) <= 103",
      "word1[i] and word2[i] consist of lowercase letters."
    ]
  },
  {
    "questionId": 1663,
    "title": "Smallest String With A Given Numeric Value",
    "titleSlug": "smallest-string-with-a-given-numeric-value",
    "content": "<p>The numeric value of a lowercase character is defined as its position `(1-indexed)` in the alphabet, so the numeric value of `a` is `1`, the numeric value of `b` is `2`, the numeric value of `c` is `3`, and so on.</p>\n<p>The numeric value of a string consisting of lowercase characters is defined as the sum of its characters' numeric values. For example, the numeric value of the string `\"abe\"` is equal to `1 + 2 + 5 = 8`.</p>\n<p>You are given two integers `n` and `k`. Return the lexicographically smallest string with length equal to `n` and numeric value equal to `k`.</p>\n<p>Note that a string `x` is lexicographically smaller than string `y` if `x` comes before `y` in dictionary order, that is, either `x` is a prefix of `y`, or if `i` is the first position such that `x[i] != y[i]`, then `x[i]` comes before `y[i]` in alphabetic order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def smallest_string_with_a_given_numeric_value(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 3, k = 27",
        "output": "\"aay\"",
        "explanation": "The numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3."
      },
      {
        "input": "n = 5, k = 73",
        "output": "\"aaszz\""
      }
    ],
    "constraints": [
      "1 <= n <= 105",
      "n <= k <= 26 * n"
    ]
  },
  {
    "questionId": 1664,
    "title": "Ways to Make a Fair Array",
    "titleSlug": "ways-to-make-a-fair-array",
    "content": "<p>You are given an integer array `nums`. You can choose exactly one index (0-indexed) and remove the element. Notice that the index of the elements may change after the removal.</p>\n<p>For example, if `nums = [6,1,7,4,1]`:\nChoosing to remove index `1` results in `nums = [6,7,4,1]`.</p>\n<p>Choosing to remove index `2` results in `nums = [6,1,4,1]`.</p>\n<p>Choosing to remove index `4` results in `nums = [6,1,7,4]`.</p>\n<p>An array is fair if the sum of the odd-indexed values equals the sum of the even-indexed values.</p>\n<p>Return the number of indices that you could choose such that after the removal, `nums` is fair.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def ways_to_make_a_fair_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [2,1,6,4]",
        "output": "1",
        "explanation": "Remove index 0: [1,6,4] -> Even sum: 1 + 4 = 5. Odd sum: 6. Not fair."
      },
      {
        "input": "nums = [1,1,1]",
        "output": "3",
        "explanation": "You can remove any index and the remaining array is fair."
      },
      {
        "input": "nums = [1,2,3]",
        "output": "0",
        "explanation": "You cannot make a fair array after removing any index."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 105",
      "1 <= nums[i] <= 104"
    ]
  },
  {
    "questionId": 1666,
    "title": "Change the Root of a Binary Tree",
    "titleSlug": "change-the-root-of-a-binary-tree",
    "content": "<p>Given the `root` of a binary tree and a `leaf` node, reroot the tree so that the `leaf` is the new root.</p>\n<p>You can reroot the tree with the following steps for each node `cur` on the path starting from the `leaf` up to the `root`\u200b\u200b\u200b excluding the root:\nIf `cur` has a left child, then that child becomes `cur`'s right child.</p>\n<p>`cur`'s original parent becomes `cur`'s left child. Note that in this process the original parent's pointer to `cur` becomes `null`, making it have at most one child.</p>\n<p>Return the new root of the rerooted tree.</p>\n<p>Note: Ensure that your solution sets the `Node.parent` pointers correctly after rerooting or you will receive \"Wrong Answer\".</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def change_the_root_of_a_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4], leaf = 7",
        "output": "[7,2,null,5,4,3,6,null,null,null,1,null,null,0,8]"
      },
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4], leaf = 0",
        "output": "[0,1,null,3,8,5,null,null,null,6,2,null,null,7,4]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [2, 100].",
      "-109 <= Node.val <= 109",
      "All Node.val are unique.",
      "leaf exist in the tree."
    ]
  },
  {
    "questionId": 1668,
    "title": "Maximum Repeating Substring",
    "titleSlug": "maximum-repeating-substring",
    "content": "<p>For a string `sequence`, a string `word` is `k`-repeating if `word` concatenated `k` times is a substring of `sequence`. The `word`'s maximum `k`-repeating value is the highest value `k` where `word` is `k`-repeating in `sequence`. If `word` is not a substring of `sequence`, `word`'s maximum `k`-repeating value is `0`.</p>\n<p>Given strings `sequence` and `word`, return the maximum `k`-repeating value of `word` in `sequence`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_repeating_substring(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "sequence = \"ababc\", word = \"ab\"",
        "output": "2",
        "explanation": "\"abab\" is a substring in \"ababc\"."
      },
      {
        "input": "sequence = \"ababc\", word = \"ba\"",
        "output": "1",
        "explanation": "\"ba\" is a substring in \"ababc\". \"baba\" is not a substring in \"ababc\"."
      },
      {
        "input": "sequence = \"ababc\", word = \"ac\"",
        "output": "0",
        "explanation": "\"ac\" is not a substring in \"ababc\"."
      }
    ],
    "constraints": [
      "1 <= sequence.length <= 100",
      "1 <= word.length <= 100",
      "sequence and word contains only lowercase English letters."
    ]
  },
  {
    "questionId": 1669,
    "title": "Merge In Between Linked Lists",
    "titleSlug": "merge-in-between-linked-lists",
    "content": "<p>You are given two linked lists: `list1` and `list2` of sizes `n` and `m` respectively.</p>\n<p>Remove `list1`'s nodes from the `ath` node to the `bth` node, and put `list2` in their place.</p>\n<p>The blue edges and nodes in the following figure incidate the result:\nBuild the result list and return its head.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def merge_in_between_linked_lists(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]",
        "output": "[0,1,2,1000000,1000001,1000002,5]",
        "explanation": "We remove the nodes 3 and 4 and put the entire list2 in their place. The blue edges and nodes in the above figure indicate the result."
      },
      {
        "input": "list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004]",
        "output": "[0,1,1000000,1000001,1000002,1000003,1000004,6]",
        "explanation": "The blue edges and nodes in the above figure indicate the result."
      }
    ],
    "constraints": [
      "3 <= list1.length <= 104",
      "1 <= a <= b < list1.length - 1",
      "1 <= list2.length <= 104"
    ]
  },
  {
    "questionId": 1670,
    "title": "Design Front Middle Back Queue",
    "titleSlug": "design-front-middle-back-queue",
    "content": "<p>Design a queue that supports `push` and `pop` operations in the front, middle, and back.</p>\n<p>Implement the `FrontMiddleBack` class:\n`FrontMiddleBack()` Initializes the queue.</p>\n<p>`void pushFront(int val)` Adds `val` to the front of the queue.</p>\n<p>`void pushMiddle(int val)` Adds `val` to the middle of the queue.</p>\n<p>`void pushBack(int val)` Adds `val` to the back of the queue.</p>\n<p>`int popFront()` Removes the front element of the queue and returns it. If the queue is empty, return `-1`.</p>\n<p>`int popMiddle()` Removes the middle element of the queue and returns it. If the queue is empty, return `-1`.</p>\n<p>`int popBack()` Removes the back element of the queue and returns it. If the queue is empty, return `-1`.</p>\n<p>Notice that when there are two middle position choices, the operation is performed on the frontmost middle position choice. For example:\nPushing `6` into the middle of `[1, 2, 3, 4, 5]` results in `[1, 2, 6, 3, 4, 5]`.</p>\n<p>Popping the middle from `[1, 2, 3, 4, 5, 6]` returns `3` and results in `[1, 2, 4, 5, 6]`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def design_front_middle_back_queue(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "[\"FrontMiddleBackQueue\", \"pushFront\", \"pushBack\", \"pushMiddle\", \"pushMiddle\", \"popFront\", \"popMiddle\", \"popMiddle\", \"popBack\", \"popFront\"]",
        "output": "[null, null, null, null, null, 1, 3, 4, 2, -1]",
        "explanation": "FrontMiddleBackQueue q = new FrontMiddleBackQueue();"
      }
    ],
    "constraints": [
      "1 <= val <= 109",
      "At most 1000 calls will be made to pushFront, pushMiddle, pushBack, popFront, popMiddle, and popBack."
    ]
  },
  {
    "questionId": 1672,
    "title": "Richest Customer Wealth",
    "titleSlug": "richest-customer-wealth",
    "content": "<p>You are given an `m x n` integer grid `accounts` where `accounts[i][j]` is the amount of money the `i\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b` customer has in the `j\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200bth`\u200b\u200b\u200b\u200b bank. Return the wealth that the richest customer has.</p>\n<p>A customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def richest_customer_wealth(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "accounts = [[1,2,3],[3,2,1]]",
        "output": "6",
        "explanation": "`1st customer has wealth = 1 + 2 + 3 = 6"
      },
      {
        "input": "accounts = [[1,5],[7,3],[3,5]]",
        "output": "10",
        "explanation": "1st customer has wealth = 6"
      },
      {
        "input": "accounts = [[2,8,7],[7,1,3],[1,9,5]]",
        "output": "17"
      }
    ],
    "constraints": [
      "m == accounts.length",
      "n == accounts[i].length",
      "1 <= m, n <= 50",
      "1 <= accounts[i][j] <= 100"
    ]
  },
  {
    "questionId": 1673,
    "title": "Find the Most Competitive Subsequence",
    "titleSlug": "find-the-most-competitive-subsequence",
    "content": "<p>Given an integer array `nums` and a positive integer `k`, return the most competitive subsequence of `nums` of size `k`.</p>\n<p>An array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array.</p>\n<p>We define that a subsequence `a` is more competitive than a subsequence `b` (of the same length) if in the first position where `a` and `b` differ, subsequence `a` has a number less than the corresponding number in `b`. For example, `[1,3,4]` is more competitive than `[1,3,5]` because the first position they differ is at the final number, and `4` is less than `5`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_the_most_competitive_subsequence(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [3,5,2,6], k = 2",
        "output": "[2,6]",
        "explanation": "Among the set of every possible subsequence: {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]}, [2,6] is the most competitive."
      },
      {
        "input": "nums = [2,4,3,3,5,4,9,6], k = 4",
        "output": "[2,3,3,4]"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 105",
      "0 <= nums[i] <= 109",
      "1 <= k <= nums.length"
    ]
  },
  {
    "questionId": 1674,
    "title": "Minimum Moves to Make Array Complementary",
    "titleSlug": "minimum-moves-to-make-array-complementary",
    "content": "<p>You are given an integer array `nums` of even length `n` and an integer `limit`. In one move, you can replace any integer from `nums` with another integer between `1` and `limit`, inclusive.</p>\n<p>The array `nums` is complementary if for all indices `i` (0-indexed), `nums[i] + nums[n - 1 - i]` equals the same number. For example, the array `[1,2,3,4]` is complementary because for all indices `i`, `nums[i] + nums[n - 1 - i] = 5`.</p>\n<p>Return the minimum number of moves required to make `nums` complementary.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_moves_to_make_array_complementary(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,4,3], limit = 4",
        "output": "1",
        "explanation": "In 1 move, you can change nums to [1,2,2,3] (underlined elements are changed)."
      },
      {
        "input": "nums = [1,2,2,1], limit = 2",
        "output": "2",
        "explanation": "In 2 moves, you can change nums to [2,2,2,2]. You cannot change any number to 3 since 3 > limit."
      },
      {
        "input": "nums = [1,2,1,2], limit = 2",
        "output": "0",
        "explanation": "nums is already complementary."
      }
    ],
    "constraints": [
      "n == nums.length",
      "2 <= n <= 105",
      "1 <= nums[i] <= limit <= 105",
      "n is even."
    ]
  },
  {
    "questionId": 1676,
    "title": "Lowest Common Ancestor of a Binary Tree IV",
    "titleSlug": "lowest-common-ancestor-of-a-binary-tree-iv",
    "content": "<p>Given the `root` of a binary tree and an array of `TreeNode` objects `nodes`, return the lowest common ancestor (LCA) of all the nodes in `nodes`. All the nodes will exist in the tree, and all values of the tree's nodes are unique.</p>\n<p>Extending the definition of LCA on Wikipedia: \"The lowest common ancestor of `n` nodes `p1`, `p2`, ..., `pn` in a binary tree `T` is the lowest node that has every `pi` as a descendant (where we allow a node to be a descendant of itself) for every valid `i`\". A descendant of a node `x` is a node `y` that is on the path from node `x` to some leaf node.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def lowest_common_ancestor_of_a_binary_tree_iv(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [4,7]",
        "output": "2",
        "explanation": "The lowest common ancestor of nodes 4 and 7 is node 2."
      },
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [1]",
        "output": "1",
        "explanation": "The lowest common ancestor of a single node is the node itself."
      },
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [7,6,2,4]",
        "output": "5",
        "explanation": "The lowest common ancestor of the nodes 7, 6, 2, and 4 is node 5."
      },
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [0,1,2,3,4,5,6,7,8]",
        "output": "3",
        "explanation": "The lowest common ancestor of all the nodes is the root node."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 104].",
      "-109 <= Node.val <= 109",
      "All Node.val are unique.",
      "All nodes[i] will exist in the tree.",
      "All nodes[i] are distinct."
    ]
  },
  {
    "questionId": 1678,
    "title": "Goal Parser Interpretation",
    "titleSlug": "goal-parser-interpretation",
    "content": "<p>You own a Goal Parser that can interpret a string `command`. The `command` consists of an alphabet of `\"G\"`, `\"()\"` and/or `\"(al)\"` in some order. The Goal Parser will interpret `\"G\"` as the string `\"G\"`, `\"()\"` as the string `\"o\"`, and `\"(al)\"` as the string `\"al\"`. The interpreted strings are then concatenated in the original order.</p>\n<p>Given the string `command`, return the Goal Parser's interpretation of `command`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def goal_parser_interpretation(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "command = \"G()(al)\"",
        "output": "\"Goal\"",
        "explanation": "The Goal Parser interprets the command as follows:"
      },
      {
        "input": "command = \"G()()()()(al)\"",
        "output": "\"Gooooal\""
      },
      {
        "input": "command = \"(al)G(al)()()G\"",
        "output": "\"alGalooG\""
      }
    ],
    "constraints": [
      "1 <= command.length <= 100",
      "command consists of \"G\", \"()\", and/or \"(al)\" in some order."
    ]
  },
  {
    "questionId": 1679,
    "title": "Max Number of K-Sum Pairs",
    "titleSlug": "max-number-of-k-sum-pairs",
    "content": "<p>You are given an integer array `nums` and an integer `k`.</p>\n<p>In one operation, you can pick two numbers from the array whose sum equals `k` and remove them from the array.</p>\n<p>Return the maximum number of operations you can perform on the array.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def max_number_of_k_sum_pairs(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3,4], k = 5",
        "output": "2",
        "explanation": "Starting with nums = [1,2,3,4]:"
      },
      {
        "input": "nums = [3,1,3,4,3], k = 6",
        "output": "1",
        "explanation": "Starting with nums = [3,1,3,4,3]:"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 105",
      "1 <= nums[i] <= 109",
      "1 <= k <= 109"
    ]
  },
  {
    "questionId": 1680,
    "title": "Concatenation of Consecutive Binary Numbers",
    "titleSlug": "concatenation-of-consecutive-binary-numbers",
    "content": "<p>Given an integer `n`, return the decimal value of the binary string formed by concatenating the binary representations of `1` to `n` in order, modulo `109 + 7`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def concatenation_of_consecutive_binary_numbers(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 1",
        "output": "1",
        "explanation": "\"1\" in binary corresponds to the decimal value 1."
      },
      {
        "input": "n = 3",
        "output": "27",
        "explanation": "In binary, 1, 2, and 3 corresponds to \"1\", \"10\", and \"11\"."
      },
      {
        "input": "n = 12",
        "output": "505379714",
        "explanation": "The concatenation results in \"1101110010111011110001001101010111100\"."
      }
    ],
    "constraints": [
      "1 <= n <= 105"
    ]
  },
  {
    "questionId": 1682,
    "title": "Longest Palindromic Subsequence II",
    "titleSlug": "longest-palindromic-subsequence-ii",
    "content": "<p>A subsequence of a string `s` is considered a good palindromic subsequence if:\nIt is a subsequence of `s`.</p>\n<p>It is a palindrome (has the same value if reversed).</p>\n<p>It has an even length.</p>\n<p>No two consecutive characters are equal, except the two middle ones.</p>\n<p>For example, if `s = \"abcabcabb\"`, then `\"abba\"` is considered a good palindromic subsequence, while `\"bcb\"` (not even length) and `\"bbbb\"` (has equal consecutive characters) are not.</p>\n<p>Given a string `s`, return the length of the longest good palindromic subsequence in `s`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_palindromic_subsequence_ii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"bbabab\"",
        "output": "4",
        "explanation": "The longest good palindromic subsequence of s is \"baab\"."
      },
      {
        "input": "s = \"dcbccacdb\"",
        "output": "4",
        "explanation": "The longest good palindromic subsequence of s is \"dccd\"."
      }
    ],
    "constraints": [
      "1 <= s.length <= 250",
      "s consists of lowercase English letters."
    ]
  },
  {
    "questionId": 1684,
    "title": "Count the Number of Consistent Strings",
    "titleSlug": "count-the-number-of-consistent-strings",
    "content": "<p>You are given a string `allowed` consisting of distinct characters and an array of strings `words`. A string is consistent if all characters in the string appear in the string `allowed`.</p>\n<p>Return the number of consistent strings in the array `words`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_the_number_of_consistent_strings(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "allowed = \"ab\", words = [\"ad\",\"bd\",\"aaab\",\"baa\",\"badab\"]",
        "output": "2",
        "explanation": "Strings \"aaab\" and \"baa\" are consistent since they only contain characters 'a' and 'b'."
      },
      {
        "input": "allowed = \"abc\", words = [\"a\",\"b\",\"c\",\"ab\",\"ac\",\"bc\",\"abc\"]",
        "output": "7",
        "explanation": "All strings are consistent."
      },
      {
        "input": "allowed = \"cad\", words = [\"cc\",\"acd\",\"b\",\"ba\",\"bac\",\"bad\",\"ac\",\"d\"]",
        "output": "4",
        "explanation": "Strings \"cc\", \"acd\", \"ac\", and \"d\" are consistent."
      }
    ],
    "constraints": [
      "1 <= words.length <= 104",
      "1 <= allowed.length <= 26",
      "1 <= words[i].length <= 10",
      "The characters in allowed are distinct.",
      "words[i] and allowed contain only lowercase English letters."
    ]
  },
  {
    "questionId": 1685,
    "title": "Sum of Absolute Differences in a Sorted Array",
    "titleSlug": "sum-of-absolute-differences-in-a-sorted-array",
    "content": "<p>You are given an integer array `nums` sorted in non-decreasing order.</p>\n<p>Build and return an integer array `result` with the same length as `nums` such that `result[i]` is equal to the summation of absolute differences between `nums[i]` and all the other elements in the array.</p>\n<p>In other words, `result[i]` is equal to `sum(|nums[i]-nums[j]|)` where `0 <= j < nums.length` and `j != i` (0-indexed).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sum_of_absolute_differences_in_a_sorted_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [2,3,5]",
        "output": "[4,3,5]",
        "explanation": "Assuming the arrays are 0-indexed, then"
      },
      {
        "input": "nums = [1,4,6,8,10]",
        "output": "[24,15,13,15,21]"
      }
    ],
    "constraints": [
      "2 <= nums.length <= 105",
      "1 <= nums[i] <= nums[i + 1] <= 104"
    ]
  },
  {
    "questionId": 1686,
    "title": "Stone Game VI",
    "titleSlug": "stone-game-vi",
    "content": "<p>Alice and Bob take turns playing a game, with Alice starting first.</p>\n<p>There are `n` stones in a pile. On each player's turn, they can remove a stone from the pile and receive points based on the stone's value. Alice and Bob may value the stones differently.</p>\n<p>You are given two integer arrays of length `n`, `aliceValues` and `bobValues`. Each `aliceValues[i]` and `bobValues[i]` represents how Alice and Bob, respectively, value the `ith` stone.</p>\n<p>The winner is the person with the most points after all the stones are chosen. If both players have the same amount of points, the game results in a draw. Both players will play optimally. Both players know the other's values.</p>\n<p>Determine the result of the game, and:\nIf Alice wins, return `1`.</p>\n<p>If Bob wins, return `-1`.</p>\n<p>If the game results in a draw, return `0`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def stone_game_vi(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "aliceValues = [1,3], bobValues = [2,1]",
        "output": "1",
        "explanation": "If Alice takes stone 1 (0-indexed) first, Alice will receive 3 points."
      },
      {
        "input": "aliceValues = [1,2], bobValues = [3,1]",
        "output": "0",
        "explanation": "If Alice takes stone 0, and Bob takes stone 1, they will both have 1 point."
      },
      {
        "input": "aliceValues = [2,4,3], bobValues = [1,6,7]",
        "output": "-1",
        "explanation": "Regardless of how Alice plays, Bob will be able to have more points than Alice."
      }
    ],
    "constraints": [
      "n == aliceValues.length == bobValues.length",
      "1 <= n <= 105",
      "1 <= aliceValues[i], bobValues[i] <= 100"
    ]
  },
  {
    "questionId": 1688,
    "title": "Count of Matches in Tournament",
    "titleSlug": "count-of-matches-in-tournament",
    "content": "<p>You are given an integer `n`, the number of teams in a tournament that has strange rules:\nIf the current number of teams is even, each team gets paired with another team. A total of `n / 2` matches are played, and `n / 2` teams advance to the next round.</p>\n<p>If the current number of teams is odd, one team randomly advances in the tournament, and the rest gets paired. A total of `(n - 1) / 2` matches are played, and `(n - 1) / 2 + 1` teams advance to the next round.</p>\n<p>Return the number of matches played in the tournament until a winner is decided.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_of_matches_in_tournament(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 7",
        "output": "6",
        "explanation": "Details of the tournament:"
      },
      {
        "input": "n = 14",
        "output": "13",
        "explanation": "Details of the tournament:"
      }
    ],
    "constraints": [
      "1 <= n <= 200"
    ]
  },
  {
    "questionId": 1689,
    "title": "Partitioning Into Minimum Number Of Deci-Binary Numbers",
    "titleSlug": "partitioning-into-minimum-number-of-deci-binary-numbers",
    "content": "<p>A decimal number is called deci-binary if each of its digits is either `0` or `1` without any leading zeros. For example, `101` and `1100` are deci-binary, while `112` and `3001` are not.</p>\n<p>Given a string `n` that represents a positive decimal integer, return the minimum number of positive deci-binary numbers needed so that they sum up to `n`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def partitioning_into_minimum_number_of_deci_binary_numbers(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = \"32\"",
        "output": "3",
        "explanation": "10 + 11 + 11 = 32"
      },
      {
        "input": "n = \"82734\"",
        "output": "8"
      },
      {
        "input": "n = \"27346209830709182346\"",
        "output": "9"
      }
    ],
    "constraints": [
      "1 <= n.length <= 105",
      "n consists of only digits.",
      "n does not contain any leading zeros and represents a positive integer."
    ]
  },
  {
    "questionId": 1690,
    "title": "Stone Game VII",
    "titleSlug": "stone-game-vii",
    "content": "<p>Alice and Bob take turns playing a game, with Alice starting first.</p>\n<p>There are `n` stones arranged in a row. On each player's turn, they can remove either the leftmost stone or the rightmost stone from the row and receive points equal to the sum of the remaining stones' values in the row. The winner is the one with the higher score when there are no stones left to remove.</p>\n<p>Bob found that he will always lose this game (poor Bob, he always loses), so he decided to minimize the score's difference. Alice's goal is to maximize the difference in the score.</p>\n<p>Given an array of integers `stones` where `stones[i]` represents the value of the `ith` stone from the left, return the difference in Alice and Bob's score if they both play optimally.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def stone_game_vii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "stones = [5,3,1,4,2]",
        "output": "6",
        "explanation": "- Alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. Alice = 13, Bob = 0, stones = [5,3,1,4]."
      },
      {
        "input": "stones = [7,90,5,1,100,10,10,2]",
        "output": "122"
      }
    ],
    "constraints": [
      "n == stones.length",
      "2 <= n <= 1000",
      "1 <= stones[i] <= 1000"
    ]
  },
  {
    "questionId": 1694,
    "title": "Reformat Phone Number",
    "titleSlug": "reformat-phone-number",
    "content": "<p>You are given a phone number as a string `number`. `number` consists of digits, spaces `' '`, and/or dashes `'-'`.</p>\n<p>You would like to reformat the phone number in a certain manner. Firstly, remove all spaces and dashes. Then, group the digits from left to right into blocks of length 3 until there are 4 or fewer digits. The final digits are then grouped as follows:\n2 digits: A single block of length 2.</p>\n<p>3 digits: A single block of length 3.</p>\n<p>4 digits: Two blocks of length 2 each.</p>\n<p>The blocks are then joined by dashes. Notice that the reformatting process should never produce any blocks of length 1 and produce at most two blocks of length 2.</p>\n<p>Return the phone number after formatting.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def reformat_phone_number(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "number = \"1-23-45 6\"",
        "output": "\"123-456\"",
        "explanation": "The digits are \"123456\"."
      },
      {
        "input": "number = \"123 4-567\"",
        "output": "\"123-45-67\"",
        "explanation": "The digits are \"1234567\"."
      },
      {
        "input": "number = \"123 4-5678\"",
        "output": "\"123-456-78\"",
        "explanation": "The digits are \"12345678\"."
      },
      {
        "input": "number = \"12\"",
        "output": "\"12\""
      },
      {
        "input": "number = \"--17-5 229 35-39475 \"",
        "output": "\"175-229-353-94-75\""
      }
    ],
    "constraints": [
      "2 <= number.length <= 100",
      "number consists of digits and the characters '-' and ' '.",
      "There are at least two digits in number."
    ]
  },
  {
    "questionId": 1695,
    "title": "Maximum Erasure Value",
    "titleSlug": "maximum-erasure-value",
    "content": "<p>You are given an array of positive integers `nums` and want to erase a subarray containing unique elements. The score you get by erasing the subarray is equal to the sum of its elements.</p>\n<p>Return the maximum score you can get by erasing exactly one subarray.</p>\n<p>An array `b` is called to be a subarray of `a` if it forms a contiguous subsequence of `a`, that is, if it is equal to `a[l],a[l+1],...,a[r]` for some `(l,r)`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_erasure_value(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [4,2,4,5,6]",
        "output": "17",
        "explanation": "The optimal subarray here is [2,4,5,6]."
      },
      {
        "input": "nums = [5,2,1,2,5,2,1,2,5]",
        "output": "8",
        "explanation": "The optimal subarray here is [5,2,1] or [1,2,5]."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 105",
      "1 <= nums[i] <= 104"
    ]
  },
  {
    "questionId": 1696,
    "title": "Jump Game VI",
    "titleSlug": "jump-game-vi",
    "content": "<p>You are given a 0-indexed integer array `nums` and an integer `k`.</p>\n<p>You are initially standing at index `0`. In one move, you can jump at most `k` steps forward without going outside the boundaries of the array. That is, you can jump from index `i` to any index in the range `[i + 1, min(n - 1, i + k)]` inclusive.</p>\n<p>You want to reach the last index of the array (index `n - 1`). Your score is the sum of all `nums[j]` for each index `j` you visited in the array.</p>\n<p>Return the maximum score you can get.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def jump_game_vi(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,-1,-2,4,-7,3], k = 2",
        "output": "7",
        "explanation": "You can choose your jumps forming the subsequence [1,-1,4,3] (underlined above). The sum is 7."
      },
      {
        "input": "nums = [10,-5,-2,4,0,3], k = 3",
        "output": "17",
        "explanation": "You can choose your jumps forming the subsequence [10,4,3] (underlined above). The sum is 17."
      },
      {
        "input": "nums = [1,-5,-20,4,-1,3,-6,-3], k = 2",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= nums.length, k <= 105",
      "-104 <= nums[i] <= 104"
    ]
  },
  {
    "questionId": 1698,
    "title": "Number of Distinct Substrings in a String",
    "titleSlug": "number-of-distinct-substrings-in-a-string",
    "content": "<p>Given a string `s`, return the number of distinct substrings of `s`.</p>\n<p>A substring of a string is obtained by deleting any number of characters (possibly zero) from the front of the string and any number (possibly zero) from the back of the string.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_distinct_substrings_in_a_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"aabbaba\"",
        "output": "21",
        "explanation": "The set of distinct strings is [\"a\",\"b\",\"aa\",\"bb\",\"ab\",\"ba\",\"aab\",\"abb\",\"bab\",\"bba\",\"aba\",\"aabb\",\"abba\",\"bbab\",\"baba\",\"aabba\",\"abbab\",\"bbaba\",\"aabbab\",\"abbaba\",\"aabbaba\"]"
      },
      {
        "input": "s = \"abcdefg\"",
        "output": "28"
      }
    ],
    "constraints": [
      "1 <= s.length <= 500",
      "s consists of lowercase English letters.",
      "Follow up: Can you solve this problem in O(n) time complexity?"
    ]
  },
  {
    "questionId": 1700,
    "title": "Number of Students Unable to Eat Lunch",
    "titleSlug": "number-of-students-unable-to-eat-lunch",
    "content": "<p>The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers `0` and `1` respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.</p>\n<p>The number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a stack. At each step:\nIf the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue.</p>\n<p>Otherwise, they will leave it and go to the queue's end.</p>\n<p>This continues until none of the queue students want to take the top sandwich and are thus unable to eat.</p>\n<p>You are given two integer arrays `students` and `sandwiches` where `sandwiches[i]` is the type of the `i\u200b\u200b\u200b\u200b\u200b\u200bth` sandwich in the stack (`i = 0` is the top of the stack) and `students[j]` is the preference of the `j\u200b\u200b\u200b\u200b\u200b\u200bth` student in the initial queue (`j = 0` is the front of the queue). Return the number of students that are unable to eat.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_students_unable_to_eat_lunch(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "students = [1,1,0,0], sandwiches = [0,1,0,1]",
        "output": "0",
        "explanation": "- Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1]."
      },
      {
        "input": "students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]",
        "output": "3"
      }
    ],
    "constraints": [
      "1 <= students.length, sandwiches.length <= 100",
      "students.length == sandwiches.length",
      "sandwiches[i] is 0 or 1.",
      "students[i] is 0 or 1."
    ]
  },
  {
    "questionId": 1701,
    "title": "Average Waiting Time",
    "titleSlug": "average-waiting-time",
    "content": "<p>There is a restaurant with a single chef. You are given an array `customers`, where `customers[i] = [arrivali, timei]:`\n`arrivali` is the arrival time of the `ith` customer. The arrival times are sorted in non-decreasing order.</p>\n<p>`timei` is the time needed to prepare the order of the `ith` customer.</p>\n<p>When a customer arrives, he gives the chef his order, and the chef starts preparing it once he is idle. The customer waits till the chef finishes preparing his order. The chef does not prepare food for more than one customer at a time. The chef prepares food for customers in the order they were given in the input.</p>\n<p>Return the average waiting time of all customers. Solutions within `10-5` from the actual answer are considered accepted.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def average_waiting_time(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "customers = [[1,2],[2,5],[4,3]]",
        "output": "5.00000",
        "explanation": "1) The first customer arrives at time 1, the chef takes his order and starts preparing it immediately at time 1, and finishes at time 3, so the waiting time of the first customer is 3 - 1 = 2."
      },
      {
        "input": "customers = [[5,2],[5,4],[10,3],[20,1]]",
        "output": "3.25000",
        "explanation": "1) The first customer arrives at time 5, the chef takes his order and starts preparing it immediately at time 5, and finishes at time 7, so the waiting time of the first customer is 7 - 5 = 2."
      }
    ],
    "constraints": [
      "1 <= customers.length <= 105",
      "1 <= arrivali, timei <= 104",
      "arrivali <= arrivali+1"
    ]
  },
  {
    "questionId": 1702,
    "title": "Maximum Binary String After Change",
    "titleSlug": "maximum-binary-string-after-change",
    "content": "<p>You are given a binary string `binary` consisting of only `0`'s or `1`'s. You can apply each of the following operations any number of times:\nOperation 1: If the number contains the substring `\"00\"`, you can replace it with `\"10\"`.</p>\n<p>For example, `\"00010\" -> \"10010`\"\nOperation 2: If the number contains the substring `\"10\"`, you can replace it with `\"01\"`.</p>\n<p>For example, `\"00010\" -> \"00001\"`\nReturn the maximum binary string you can obtain after any number of operations. Binary string `x` is greater than binary string `y` if `x`'s decimal representation is greater than `y`'s decimal representation.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_binary_string_after_change(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "binary = \"000110\"",
        "output": "\"111011\"",
        "explanation": "A valid transformation sequence can be:"
      },
      {
        "input": "binary = \"01\"",
        "output": "\"01\"",
        "explanation": "\"01\" cannot be transformed any further."
      }
    ],
    "constraints": [
      "1 <= binary.length <= 105",
      "binary consist of '0' and '1'."
    ]
  },
  {
    "questionId": 1704,
    "title": "Determine if String Halves Are Alike",
    "titleSlug": "determine-if-string-halves-are-alike",
    "content": "<p>You are given a string `s` of even length. Split this string into two halves of equal lengths, and let `a` be the first half and `b` be the second half.</p>\n<p>Two strings are alike if they have the same number of vowels (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`, `'A'`, `'E'`, `'I'`, `'O'`, `'U'`). Notice that `s` contains uppercase and lowercase letters.</p>\n<p>Return `true` if `a` and `b` are alike. Otherwise, return `false`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def determine_if_string_halves_are_alike(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"book\"",
        "output": "true",
        "explanation": "a = \"bo\" and b = \"ok\". a has 1 vowel and b has 1 vowel. Therefore, they are alike."
      },
      {
        "input": "s = \"textbook\"",
        "output": "false",
        "explanation": "a = \"text\" and b = \"book\". a has 1 vowel whereas b has 2. Therefore, they are not alike."
      },
      {
        "input": "s = \"MerryChristmas\"",
        "output": "false"
      },
      {
        "input": "s = \"AbCdEfGh\"",
        "output": "true"
      }
    ],
    "constraints": [
      "2 <= s.length <= 1000",
      "s.length is even.",
      "s consists of uppercase and lowercase letters."
    ]
  },
  {
    "questionId": 1705,
    "title": "Maximum Number of Eaten Apples",
    "titleSlug": "maximum-number-of-eaten-apples",
    "content": "<p>There is a special kind of apple tree that grows apples every day for `n` days. On the `ith` day, the tree grows `apples[i]` apples that will rot after `days[i]` days, that is on day `i + days[i]` the apples will be rotten and cannot be eaten. On some days, the apple tree does not grow any apples, which are denoted by `apples[i] == 0` and `days[i] == 0`.</p>\n<p>You decided to eat at most one apple a day (to keep the doctors away). Note that you can keep eating after the first `n` days.</p>\n<p>Given two integer arrays `days` and `apples` of length `n`, return the maximum number of apples you can eat.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_number_of_eaten_apples(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "apples = [1,2,3,5,2], days = [3,2,1,4,2]",
        "output": "7",
        "explanation": "You can eat 7 apples:"
      },
      {
        "input": "apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]",
        "output": "5",
        "explanation": "You can eat 5 apples:"
      }
    ],
    "constraints": [
      "apples.length == n",
      "days.length == n",
      "1 <= n <= 2 * 104",
      "0 <= apples[i], days[i] <= 2 * 104",
      "days[i] = 0 if and only if apples[i] = 0."
    ]
  },
  {
    "questionId": 1706,
    "title": "Where Will the Ball Fall",
    "titleSlug": "where-will-the-ball-fall",
    "content": "<p>You have a 2-D `grid` of size `m x n` representing a box, and you have `n` balls. The box is open on the top and bottom sides.</p>\n<p>Each cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.</p>\n<p>A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as `1`.</p>\n<p>A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as `-1`.</p>\n<p>We drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball gets stuck if it hits a \"V\" shaped pattern between two boards or if a board redirects the ball into either wall of the box.</p>\n<p>Return an array `answer` of size `n` where `answer[i]` is the column that the ball falls out of at the bottom after dropping the ball from the `ith` column at the top, or `-1` if the ball gets stuck in the box.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def where_will_the_ball_fall(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]",
        "output": "[1,-1,-1,-1,-1]",
        "explanation": "This example is shown in the photo."
      },
      {
        "input": "grid = [[-1]]",
        "output": "[-1]",
        "explanation": "The ball gets stuck against the left wall."
      },
      {
        "input": "grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]",
        "output": "[0,1,2,3,4,-1]"
      }
    ],
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m, n <= 100",
      "grid[i][j] is 1 or -1."
    ]
  },
  {
    "questionId": 1708,
    "title": "Largest Subarray Length K",
    "titleSlug": "largest-subarray-length-k",
    "content": "<p>An array `A` is larger than some array `B` if for the first index `i` where `A[i] != B[i]`, `A[i] > B[i]`.</p>\n<p>For example, consider `0`-indexing:\n`[1,3,2,4] > [1,2,2,4]`, since at index `1`, `3 > 2`.</p>\n<p>`[1,4,4,4] < [2,1,1,1]`, since at index `0`, `1 < 2`.</p>\n<p>A subarray is a contiguous subsequence of the array.</p>\n<p>Given an integer array `nums` of distinct integers, return the largest subarray of `nums` of length `k`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def largest_subarray_length_k(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,4,5,2,3], k = 3",
        "output": "[5,2,3]",
        "explanation": "The subarrays of size 3 are: [1,4,5], [4,5,2], and [5,2,3]."
      },
      {
        "input": "nums = [1,4,5,2,3], k = 4",
        "output": "[4,5,2,3]",
        "explanation": "The subarrays of size 4 are: [1,4,5,2], and [4,5,2,3]."
      },
      {
        "input": "nums = [1,4,5,2,3], k = 1",
        "output": "[5]"
      }
    ],
    "constraints": [
      "1 <= k <= nums.length <= 105",
      "1 <= nums[i] <= 109",
      "All the integers of nums are unique.",
      "Follow up: What if the integers in nums are not distinct?"
    ]
  },
  {
    "questionId": 1710,
    "title": "Maximum Units on a Truck",
    "titleSlug": "maximum-units-on-a-truck",
    "content": "<p>You are assigned to put some amount of boxes onto one truck. You are given a 2D array `boxTypes`, where `boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]`:\n`numberOfBoxesi` is the number of boxes of type `i`.</p>\n<p>`numberOfUnitsPerBoxi` is the number of units in each box of the type `i`.</p>\n<p>You are also given an integer `truckSize`, which is the maximum number of boxes that can be put on the truck. You can choose any boxes to put on the truck as long as the number of boxes does not exceed `truckSize`.</p>\n<p>Return the maximum total number of units that can be put on the truck.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_units_on_a_truck(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4",
        "output": "8",
        "explanation": "There are:"
      },
      {
        "input": "boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10",
        "output": "91"
      }
    ],
    "constraints": [
      "1 <= boxTypes.length <= 1000",
      "1 <= numberOfBoxesi, numberOfUnitsPerBoxi <= 1000",
      "1 <= truckSize <= 106"
    ]
  },
  {
    "questionId": 1711,
    "title": "Count Good Meals",
    "titleSlug": "count-good-meals",
    "content": "<p>A good meal is a meal that contains exactly two different food items with a sum of deliciousness equal to a power of two.</p>\n<p>You can pick any two different foods to make a good meal.</p>\n<p>Given an array of integers `deliciousness` where `deliciousness[i]` is the deliciousness of the `i\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b`\u200b\u200b\u200b\u200b item of food, return the number of different good meals you can make from this list modulo `109 + 7`.</p>\n<p>Note that items with different indices are considered different even if they have the same deliciousness value.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_good_meals(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "deliciousness = [1,3,5,7,9]",
        "output": "4",
        "explanation": "The good meals are (1,3), (1,7), (3,5) and, (7,9)."
      },
      {
        "input": "deliciousness = [1,1,1,3,3,3,7]",
        "output": "15",
        "explanation": "The good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways."
      }
    ],
    "constraints": [
      "1 <= deliciousness.length <= 105",
      "0 <= deliciousness[i] <= 220"
    ]
  },
  {
    "questionId": 1712,
    "title": "Ways to Split Array Into Three Subarrays",
    "titleSlug": "ways-to-split-array-into-three-subarrays",
    "content": "<p>A split of an integer array is good if:\nThe array is split into three non-empty contiguous subarrays - named `left`, `mid`, `right` respectively from left to right.</p>\n<p>The sum of the elements in `left` is less than or equal to the sum of the elements in `mid`, and the sum of the elements in `mid` is less than or equal to the sum of the elements in `right`.</p>\n<p>Given `nums`, an array of non-negative integers, return the number of good ways to split `nums`. As the number may be too large, return it modulo `109 + 7`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def ways_to_split_array_into_three_subarrays(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,1,1]",
        "output": "1",
        "explanation": "The only good way to split nums is [1] [1] [1]."
      },
      {
        "input": "nums = [1,2,2,2,5,0]",
        "output": "3",
        "explanation": "There are three good ways of splitting nums:"
      },
      {
        "input": "nums = [3,2,1]",
        "output": "0",
        "explanation": "There is no good way to split nums."
      }
    ],
    "constraints": [
      "3 <= nums.length <= 105",
      "0 <= nums[i] <= 104"
    ]
  },
  {
    "questionId": 1716,
    "title": "Calculate Money in Leetcode Bank",
    "titleSlug": "calculate-money-in-leetcode-bank",
    "content": "<p>Hercy wants to save money for his first car. He puts money in the Leetcode bank every day.</p>\n<p>He starts by putting in `$1` on Monday, the first day. Every day from Tuesday to Sunday, he will put in `$1` more than the day before. On every subsequent Monday, he will put in `$1` more than the previous Monday. \nGiven `n`, return the total amount of money he will have in the Leetcode bank at the end of the `nth` day.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def calculate_money_in_leetcode_bank(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 4",
        "output": "10",
        "explanation": "After the 4th day, the total is 1 + 2 + 3 + 4 = 10."
      },
      {
        "input": "n = 10",
        "output": "37",
        "explanation": "After the 10th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Notice that on the 2nd Monday, Hercy only puts in $2."
      },
      {
        "input": "n = 20",
        "output": "96",
        "explanation": "After the 20th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96."
      }
    ],
    "constraints": [
      "1 <= n <= 1000"
    ]
  },
  {
    "questionId": 1717,
    "title": "Maximum Score From Removing Substrings",
    "titleSlug": "maximum-score-from-removing-substrings",
    "content": "<p>You are given a string `s` and two integers `x` and `y`. You can perform two types of operations any number of times.</p>\n<p>Remove substring `\"ab\"` and gain `x` points.</p>\n<p>For example, when removing `\"ab\"` from `\"cabxbae\"` it becomes `\"cxbae\"`.</p>\n<p>Remove substring `\"ba\"` and gain `y` points.</p>\n<p>For example, when removing `\"ba\"` from `\"cabxbae\"` it becomes `\"cabxe\"`.</p>\n<p>Return the maximum points you can gain after applying the above operations on `s`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_score_from_removing_substrings(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"cdbcbbaaabab\", x = 4, y = 5",
        "output": "19",
        "explanation": "- Remove the \"ba\" underlined in \"cdbcbbaaabab\". Now, s = \"cdbcbbaaab\" and 5 points are added to the score."
      },
      {
        "input": "s = \"aabbaaxybbaabb\", x = 5, y = 4",
        "output": "20"
      }
    ],
    "constraints": [
      "1 <= s.length <= 105",
      "1 <= x, y <= 104",
      "s consists of lowercase English letters."
    ]
  },
  {
    "questionId": 1718,
    "title": "Construct the Lexicographically Largest Valid Sequence",
    "titleSlug": "construct-the-lexicographically-largest-valid-sequence",
    "content": "<p>Given an integer `n`, find a sequence that satisfies all of the following:\nThe integer `1` occurs once in the sequence.</p>\n<p>Each integer between `2` and `n` occurs twice in the sequence.</p>\n<p>For every integer `i` between `2` and `n`, the distance between the two occurrences of `i` is exactly `i`.</p>\n<p>The distance between two numbers on the sequence, `a[i]` and `a[j]`, is the absolute difference of their indices, `|j - i|`.</p>\n<p>Return the lexicographically largest sequence. It is guaranteed that under the given constraints, there is always a solution. \nA sequence `a` is lexicographically larger than a sequence `b` (of the same length) if in the first position where `a` and `b` differ, sequence `a` has a number greater than the corresponding number in `b`. For example, `[0,1,9,0]` is lexicographically larger than `[0,1,5,6]` because the first position they differ is at the third number, and `9` is greater than `5`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def construct_the_lexicographically_largest_valid_sequence(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 3",
        "output": "[3,1,2,3,2]",
        "explanation": "[2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence."
      },
      {
        "input": "n = 5",
        "output": "[5,3,1,4,3,5,2,4,2]"
      }
    ],
    "constraints": [
      "1 <= n <= 20"
    ]
  },
  {
    "questionId": 1720,
    "title": "Decode XORed Array",
    "titleSlug": "decode-xored-array",
    "content": "<p>There is a hidden integer array `arr` that consists of `n` non-negative integers.</p>\n<p>It was encoded into another integer array `encoded` of length `n - 1`, such that `encoded[i] = arr[i] XOR arr[i + 1]`. For example, if `arr = [1,0,2,1]`, then `encoded = [1,2,3]`.</p>\n<p>You are given the `encoded` array. You are also given an integer `first`, that is the first element of `arr`, i.e. `arr[0]`.</p>\n<p>Return the original array `arr`. It can be proved that the answer exists and is unique.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def decode_xored_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "encoded = [1,2,3], first = 1",
        "output": "[1,0,2,1]",
        "explanation": "If arr = [1,0,2,1], then first = 1 and encoded = [1 XOR 0, 0 XOR 2, 2 XOR 1] = [1,2,3]"
      },
      {
        "input": "encoded = [6,2,7,3], first = 4",
        "output": "[4,2,0,7,4]"
      }
    ],
    "constraints": [
      "2 <= n <= 104",
      "encoded.length == n - 1",
      "0 <= encoded[i] <= 105",
      "0 <= first <= 105"
    ]
  },
  {
    "questionId": 1721,
    "title": "Swapping Nodes in a Linked List",
    "titleSlug": "swapping-nodes-in-a-linked-list",
    "content": "<p>You are given the `head` of a linked list, and an integer `k`.</p>\n<p>Return the head of the linked list after swapping the values of the `kth` node from the beginning and the `kth` node from the end (the list is 1-indexed).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def swapping_nodes_in_a_linked_list(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "head = [1,2,3,4,5], k = 2",
        "output": "[1,4,3,2,5]"
      },
      {
        "input": "head = [7,9,6,6,7,8,3,0,9,5], k = 5",
        "output": "[7,9,6,6,8,7,3,0,9,5]"
      },
      {
        "input": "head = [1], k = 1",
        "output": "[1]"
      },
      {
        "input": "head = [1,2], k = 1",
        "output": "[2,1]"
      },
      {
        "input": "head = [1,2,3], k = 2",
        "output": "[1,2,3]"
      }
    ],
    "constraints": [
      "The number of nodes in the list is n.",
      "1 <= k <= n <= 105",
      "0 <= Node.val <= 100"
    ]
  },
  {
    "questionId": 1722,
    "title": "Minimize Hamming Distance After Swap Operations",
    "titleSlug": "minimize-hamming-distance-after-swap-operations",
    "content": "<p>You are given two integer arrays, `source` and `target`, both of length `n`. You are also given an array `allowedSwaps` where each `allowedSwaps[i] = [ai, bi]` indicates that you are allowed to swap the elements at index `ai` and index `bi` (0-indexed) of array `source`. Note that you can swap elements at a specific pair of indices multiple times and in any order.</p>\n<p>The Hamming distance of two arrays of the same length, `source` and `target`, is the number of positions where the elements are different. Formally, it is the number of indices `i` for `0 <= i <= n-1` where `source[i] != target[i]` (0-indexed).</p>\n<p>Return the minimum Hamming distance of `source` and `target` after performing any amount of swap operations on array `source`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimize_hamming_distance_after_swap_operations(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "source = [1,2,3,4], target = [2,1,4,5], allowedSwaps = [[0,1],[2,3]]",
        "output": "1",
        "explanation": "source can be transformed the following way:"
      },
      {
        "input": "source = [1,2,3,4], target = [1,3,2,4], allowedSwaps = []",
        "output": "2",
        "explanation": "There are no allowed swaps."
      },
      {
        "input": "source = [5,1,2,4,3], target = [1,5,4,2,3], allowedSwaps = [[0,4],[4,2],[1,3],[1,4]]",
        "output": "0"
      }
    ],
    "constraints": [
      "n == source.length == target.length",
      "1 <= n <= 105",
      "1 <= source[i], target[i] <= 105",
      "0 <= allowedSwaps.length <= 105",
      "allowedSwaps[i].length == 2",
      "0 <= ai, bi <= n - 1",
      "ai != bi"
    ]
  },
  {
    "questionId": 1725,
    "title": "Number Of Rectangles That Can Form The Largest Square",
    "titleSlug": "number-of-rectangles-that-can-form-the-largest-square",
    "content": "<p>You are given an array `rectangles` where `rectangles[i] = [li, wi]` represents the `ith` rectangle of length `li` and width `wi`.</p>\n<p>You can cut the `ith` rectangle to form a square with a side length of `k` if both `k <= li` and `k <= wi`. For example, if you have a rectangle `[4,6]`, you can cut it to get a square with a side length of at most `4`.</p>\n<p>Let `maxLen` be the side length of the largest square you can obtain from any of the given rectangles.</p>\n<p>Return the number of rectangles that can make a square with a side length of `maxLen`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_rectangles_that_can_form_the_largest_square(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "rectangles = [[5,8],[3,9],[5,12],[16,5]]",
        "output": "3",
        "explanation": "The largest squares you can get from each rectangle are of lengths [5,3,5,5]."
      },
      {
        "input": "rectangles = [[2,3],[3,7],[4,3],[3,7]]",
        "output": "3"
      }
    ],
    "constraints": [
      "1 <= rectangles.length <= 1000",
      "rectangles[i].length == 2",
      "1 <= li, wi <= 109",
      "li != wi"
    ]
  },
  {
    "questionId": 1726,
    "title": "Tuple with Same Product",
    "titleSlug": "tuple-with-same-product",
    "content": "<p>Given an array `nums` of distinct positive integers, return the number of tuples `(a, b, c, d)` such that `a * b = c * d` where `a`, `b`, `c`, and `d` are elements of `nums`, and `a != b != c != d`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def tuple_with_same_product(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [2,3,4,6]",
        "output": "8",
        "explanation": "There are 8 valid tuples:"
      },
      {
        "input": "nums = [1,2,4,5,10]",
        "output": "16",
        "explanation": "There are 16 valids tuples:"
      },
      {
        "input": "nums = [2,3,4,6,8,12]",
        "output": "40"
      },
      {
        "input": "nums = [2,3,5,7]",
        "output": "0"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 1000",
      "1 <= nums[i] <= 104",
      "All elements in nums are distinct."
    ]
  },
  {
    "questionId": 1727,
    "title": "Largest Submatrix With Rearrangements",
    "titleSlug": "largest-submatrix-with-rearrangements",
    "content": "<p>You are given a binary matrix `matrix` of size `m x n`, and you are allowed to rearrange the columns of the `matrix` in any order.</p>\n<p>Return the area of the largest submatrix within `matrix` where every element of the submatrix is `1` after reordering the columns optimally.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def largest_submatrix_with_rearrangements(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "matrix = [[0,0,1],[1,1,1],[1,0,1]]",
        "output": "4",
        "explanation": "You can rearrange the columns as shown above."
      },
      {
        "input": "matrix = [[1,0,1,0,1]]",
        "output": "3",
        "explanation": "You can rearrange the columns as shown above."
      },
      {
        "input": "matrix = [[1,1,0],[1,0,1]]",
        "output": "2",
        "explanation": "Notice that you must rearrange entire columns, and there is no way to make a submatrix of 1s larger than an area of 2."
      },
      {
        "input": "matrix = [[0,0],[0,0]]",
        "output": "0",
        "explanation": "As there are no 1s, no submatrix of 1s can be formed and the area is 0."
      }
    ],
    "constraints": [
      "m == matrix.length",
      "n == matrix[i].length",
      "1 <= m * n <= 105",
      "matrix[i][j] is 0 or 1."
    ]
  },
  {
    "questionId": 1730,
    "title": "Shortest Path to Get Food",
    "titleSlug": "shortest-path-to-get-food",
    "content": "<p>You are starving and you want to eat food as quickly as possible. You want to find the shortest path to arrive at any food cell.</p>\n<p>You are given an `m x n` character matrix, `grid`, of these different types of cells:\n`'*'` is your location. There is exactly one `'*'` cell.</p>\n<p>`'#'` is a food cell. There may be multiple food cells.</p>\n<p>`'O'` is free space, and you can travel through these cells.</p>\n<p>`'X'` is an obstacle, and you cannot travel through these cells.</p>\n<p>You can travel to any adjacent cell north, east, south, or west of your current location if there is not an obstacle.</p>\n<p>Return the length of the shortest path for you to reach any food cell. If there is no path for you to reach food, return `-1`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def shortest_path_to_get_food(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "grid = [[\"X\",\"X\",\"X\",\"X\",\"X\",\"X\"],[\"X\",\"*\",\"O\",\"O\",\"O\",\"X\"],[\"X\",\"O\",\"O\",\"#\",\"O\",\"X\"],[\"X\",\"X\",\"X\",\"X\",\"X\",\"X\"]]",
        "output": "3",
        "explanation": "It takes 3 steps to reach the food."
      },
      {
        "input": "grid = [[\"X\",\"X\",\"X\",\"X\",\"X\"],[\"X\",\"*\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"#\",\"X\"],[\"X\",\"X\",\"X\",\"X\",\"X\"]]",
        "output": "-1",
        "explanation": "It is not possible to reach the food."
      },
      {
        "input": "grid = [[\"X\",\"X\",\"X\",\"X\",\"X\",\"X\",\"X\",\"X\"],[\"X\",\"*\",\"O\",\"X\",\"O\",\"#\",\"O\",\"X\"],[\"X\",\"O\",\"O\",\"X\",\"O\",\"O\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"O\",\"O\",\"#\",\"O\",\"X\"],[\"X\",\"X\",\"X\",\"X\",\"X\",\"X\",\"X\",\"X\"]]",
        "output": "6",
        "explanation": "There can be multiple food cells. It only takes 6 steps to reach the bottom food."
      },
      {
        "input": "grid = [[\"O\",\"*\"],[\"#\",\"O\"]]",
        "output": "2"
      },
      {
        "input": "grid = [[\"X\",\"*\"],[\"#\",\"X\"]]",
        "output": "-1"
      }
    ],
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m, n <= 200",
      "grid[row][col] is '*', 'X', 'O', or '#'.",
      "The grid contains exactly one '*'."
    ]
  },
  {
    "questionId": 1732,
    "title": "Find the Highest Altitude",
    "titleSlug": "find-the-highest-altitude",
    "content": "<p>There is a biker going on a road trip. The road trip consists of `n + 1` points at different altitudes. The biker starts his trip on point `0` with altitude equal `0`.</p>\n<p>You are given an integer array `gain` of length `n` where `gain[i]` is the net gain in altitude between points `i`\u200b\u200b\u200b\u200b\u200b\u200b and `i + 1` for all (`0 <= i < n)`. Return the highest altitude of a point.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_the_highest_altitude(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "gain = [-5,1,5,0,-7]",
        "output": "1",
        "explanation": "The altitudes are [0,-5,-4,1,1,-6]. The highest is 1."
      },
      {
        "input": "gain = [-4,-3,-2,-1,4,3,2]",
        "output": "0",
        "explanation": "The altitudes are [0,-4,-7,-9,-10,-6,-3,-1]. The highest is 0."
      }
    ],
    "constraints": [
      "n == gain.length",
      "1 <= n <= 100",
      "-100 <= gain[i] <= 100"
    ]
  },
  {
    "questionId": 1733,
    "title": "Minimum Number of People to Teach",
    "titleSlug": "minimum-number-of-people-to-teach",
    "content": "<p>On a social network consisting of `m` users and some friendships between users, two users can communicate with each other if they know a common language.</p>\n<p>You are given an integer `n`, an array `languages`, and an array `friendships` where:\nThere are `n` languages numbered `1` through `n`,\n`languages[i]` is the set of languages the `i\u200b\u200b\u200b\u200b\u200b\u200bth`\u200b\u200b\u200b\u200b user knows, and\n`friendships[i] = [u\u200b\u200b\u200b\u200b\u200b\u200bi\u200b\u200b\u200b, v\u200b\u200b\u200b\u200b\u200b\u200bi]` denotes a friendship between the users `u\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200bi`\u200b\u200b\u200b\u200b\u200b and `vi`.</p>\n<p>You can choose one language and teach it to some users so that all friends can communicate with each other. Return the minimum number of users you need to teach.</p>\n<p>Note that friendships are not transitive, meaning if `x` is a friend of `y` and `y` is a friend of `z`, this doesn't guarantee that `x` is a friend of `z`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_number_of_people_to_teach(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]]",
        "output": "1",
        "explanation": "You can either teach user 1 the second language or user 2 the first language."
      },
      {
        "input": "n = 3, languages = [[2],[1,3],[1,2],[3]], friendships = [[1,4],[1,2],[3,4],[2,3]]",
        "output": "2",
        "explanation": "Teach the third language to users 1 and 3, yielding two users to teach."
      }
    ],
    "constraints": [
      "2 <= n <= 500",
      "languages.length == m",
      "1 <= m <= 500",
      "1 <= languages[i].length <= n",
      "1 <= languages[i][j] <= n",
      "1 <= u\u200b\u200b\u200b\u200b\u200b\u200bi < v\u200b\u200b\u200b\u200b\u200b\u200bi <= languages.length",
      "1 <= friendships.length <= 500",
      "All tuples (u\u200b\u200b\u200b\u200b\u200bi, v\u200b\u200b\u200b\u200b\u200b\u200bi) are unique",
      "languages[i] contains only unique values"
    ]
  },
  {
    "questionId": 1734,
    "title": "Decode XORed Permutation",
    "titleSlug": "decode-xored-permutation",
    "content": "<p>There is an integer array `perm` that is a permutation of the first `n` positive integers, where `n` is always odd.</p>\n<p>It was encoded into another integer array `encoded` of length `n - 1`, such that `encoded[i] = perm[i] XOR perm[i + 1]`. For example, if `perm = [1,3,2]`, then `encoded = [2,1]`.</p>\n<p>Given the `encoded` array, return the original array `perm`. It is guaranteed that the answer exists and is unique.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def decode_xored_permutation(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "encoded = [3,1]",
        "output": "[1,2,3]",
        "explanation": "If perm = [1,2,3], then encoded = [1 XOR 2,2 XOR 3] = [3,1]"
      },
      {
        "input": "encoded = [6,5,4,6]",
        "output": "[2,4,1,5,3]"
      }
    ],
    "constraints": [
      "3 <= n < 105",
      "n is odd.",
      "encoded.length == n - 1"
    ]
  },
  {
    "questionId": 1736,
    "title": "Latest Time by Replacing Hidden Digits",
    "titleSlug": "latest-time-by-replacing-hidden-digits",
    "content": "<p>You are given a string `time` in the form of ` hh:mm`, where some of the digits in the string are hidden (represented by `?`).</p>\n<p>The valid times are those inclusively between `00:00` and `23:59`.</p>\n<p>Return the latest valid time you can get from `time` by replacing the hidden digits.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def latest_time_by_replacing_hidden_digits(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "time = \"2?:?0\"",
        "output": "\"23:50\"",
        "explanation": "The latest hour beginning with the digit '2' is 23 and the latest minute ending with the digit '0' is 50."
      },
      {
        "input": "time = \"0?:3?\"",
        "output": "\"09:39\""
      },
      {
        "input": "time = \"1?:22\"",
        "output": "\"19:22\""
      }
    ],
    "constraints": [
      "time is in the format hh:mm.",
      "It is guaranteed that you can produce a valid time from the given string."
    ]
  },
  {
    "questionId": 1737,
    "title": "Change Minimum Characters to Satisfy One of Three Conditions",
    "titleSlug": "change-minimum-characters-to-satisfy-one-of-three-conditions",
    "content": "<p>You are given two strings `a` and `b` that consist of lowercase letters. In one operation, you can change any character in `a` or `b` to any lowercase letter.</p>\n<p>Your goal is to satisfy one of the following three conditions:\nEvery letter in `a` is strictly less than every letter in `b` in the alphabet.</p>\n<p>Every letter in `b` is strictly less than every letter in `a` in the alphabet.</p>\n<p>Both `a` and `b` consist of only one distinct letter.</p>\n<p>Return the minimum number of operations needed to achieve your goal.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def change_minimum_characters_to_satisfy_one_of_three_conditions(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "a = \"aba\", b = \"caa\"",
        "output": "2",
        "explanation": "Consider the best way to make each condition true:"
      },
      {
        "input": "a = \"dabadd\", b = \"cda\"",
        "output": "3",
        "explanation": "The best way is to make condition 1 true by changing b to \"eee\"."
      }
    ],
    "constraints": [
      "1 <= a.length, b.length <= 105",
      "a and b consist only of lowercase letters."
    ]
  },
  {
    "questionId": 1738,
    "title": "Find Kth Largest XOR Coordinate Value",
    "titleSlug": "find-kth-largest-xor-coordinate-value",
    "content": "<p>You are given a 2D `matrix` of size `m x n`, consisting of non-negative integers. You are also given an integer `k`.</p>\n<p>The value of coordinate `(a, b)` of the matrix is the XOR of all `matrix[i][j]` where `0 <= i <= a < m` and `0 <= j <= b < n` (0-indexed).</p>\n<p>Find the `kth` largest value (1-indexed) of all the coordinates of `matrix`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_kth_largest_xor_coordinate_value(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "matrix = [[5,2],[1,6]], k = 1",
        "output": "7",
        "explanation": "The value of coordinate (0,1) is 5 XOR 2 = 7, which is the largest value."
      },
      {
        "input": "matrix = [[5,2],[1,6]], k = 2",
        "output": "5",
        "explanation": "The value of coordinate (0,0) is 5 = 5, which is the 2nd largest value."
      },
      {
        "input": "matrix = [[5,2],[1,6]], k = 3",
        "output": "4",
        "explanation": "The value of coordinate (1,0) is 5 XOR 1 = 4, which is the 3rd largest value."
      },
      {
        "input": "matrix = [[5,2],[1,6]], k = 4",
        "output": "0",
        "explanation": "The value of coordinate (1,1) is 5 XOR 2 XOR 1 XOR 6 = 0, which is the 4th largest value."
      }
    ],
    "constraints": [
      "m == matrix.length",
      "n == matrix[i].length",
      "1 <= m, n <= 1000",
      "0 <= matrix[i][j] <= 106",
      "1 <= k <= m * n"
    ]
  },
  {
    "questionId": 1740,
    "title": "Find Distance in a Binary Tree",
    "titleSlug": "find-distance-in-a-binary-tree",
    "content": "<p>Given the root of a binary tree and two integers `p` and `q`, return the distance between the nodes of value `p` and value `q` in the tree.</p>\n<p>The distance between two nodes is the number of edges on the path from one to the other.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_distance_in_a_binary_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 0",
        "output": "3",
        "explanation": "There are 3 edges between 5 and 0: 5-3-1-0."
      },
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 7",
        "output": "2",
        "explanation": "There are 2 edges between 5 and 7: 5-2-7."
      },
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 5",
        "output": "0",
        "explanation": "The distance between a node and itself is 0."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 104].",
      "0 <= Node.val <= 109",
      "All Node.val are unique.",
      "p and q are values in the tree."
    ]
  },
  {
    "questionId": 1742,
    "title": "Maximum Number of Balls in a Box",
    "titleSlug": "maximum-number-of-balls-in-a-box",
    "content": "<p>You are working in a ball factory where you have `n` balls numbered from `lowLimit` up to `highLimit` inclusive (i.e., `n == highLimit - lowLimit + 1`), and an infinite number of boxes numbered from `1` to `infinity`.</p>\n<p>Your job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. For example, the ball number `321` will be put in the box number `3 + 2 + 1 = 6` and the ball number `10` will be put in the box number `1 + 0 = 1`.</p>\n<p>Given two integers `lowLimit` and `highLimit`, return the number of balls in the box with the most balls.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_number_of_balls_in_a_box(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "lowLimit = 1, highLimit = 10",
        "output": "2",
        "explanation": "Box Number:  1 2 3 4 5 6 7 8 9 10 11 ..."
      },
      {
        "input": "lowLimit = 5, highLimit = 15",
        "output": "2",
        "explanation": "Box Number:  1 2 3 4 5 6 7 8 9 10 11 ..."
      },
      {
        "input": "lowLimit = 19, highLimit = 28",
        "output": "2",
        "explanation": "Box Number:  1 2 3 4 5 6 7 8 9 10 11 12 ..."
      }
    ],
    "constraints": [
      "1 <= lowLimit <= highLimit <= 105"
    ]
  },
  {
    "questionId": 1743,
    "title": "Restore the Array From Adjacent Pairs",
    "titleSlug": "restore-the-array-from-adjacent-pairs",
    "content": "<p>There is an integer array `nums` that consists of `n` unique elements, but you have forgotten it. However, you do remember every pair of adjacent elements in `nums`.</p>\n<p>You are given a 2D integer array `adjacentPairs` of size `n - 1` where each `adjacentPairs[i] = [ui, vi]` indicates that the elements `ui` and `vi` are adjacent in `nums`.</p>\n<p>It is guaranteed that every adjacent pair of elements `nums[i]` and `nums[i+1]` will exist in `adjacentPairs`, either as `[nums[i], nums[i+1]]` or `[nums[i+1], nums[i]]`. The pairs can appear in any order.</p>\n<p>Return the original array `nums`. If there are multiple solutions, return any of them.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def restore_the_array_from_adjacent_pairs(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "adjacentPairs = [[2,1],[3,4],[3,2]]",
        "output": "[1,2,3,4]",
        "explanation": "This array has all its adjacent pairs in adjacentPairs."
      },
      {
        "input": "adjacentPairs = [[4,-2],[1,4],[-3,1]]",
        "output": "[-2,4,1,-3]",
        "explanation": "There can be negative numbers."
      },
      {
        "input": "adjacentPairs = [[100000,-100000]]",
        "output": "[100000,-100000]"
      }
    ],
    "constraints": [
      "nums.length == n",
      "adjacentPairs.length == n - 1",
      "adjacentPairs[i].length == 2",
      "2 <= n <= 105",
      "-105 <= nums[i], ui, vi <= 105",
      "There exists some nums that has adjacentPairs as its pairs."
    ]
  },
  {
    "questionId": 1744,
    "title": "Can You Eat Your Favorite Candy on Your Favorite Day?",
    "titleSlug": "can-you-eat-your-favorite-candy-on-your-favorite-day",
    "content": "<p>You are given a (0-indexed) array of positive integers `candiesCount` where `candiesCount[i]` represents the number of candies of the `ith` type you have. You are also given a 2D array `queries` where `queries[i] = [favoriteTypei, favoriteDayi, dailyCapi]`.</p>\n<p>You play a game with the following rules:\nYou start eating candies on day `0`.</p>\n<p>You cannot eat any candy of type `i` unless you have eaten all candies of type `i - 1`.</p>\n<p>You must eat at least one candy per day until you have eaten all the candies.</p>\n<p>Construct a boolean array `answer` such that `answer.length == queries.length` and `answer[i]` is `true` if you can eat a candy of type `favoriteTypei` on day `favoriteDayi` without eating more than `dailyCapi` candies on any day, and `false` otherwise. Note that you can eat different types of candy on the same day, provided that you follow rule 2.</p>\n<p>Return the constructed array `answer`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def can_you_eat_your_favorite_candy_on_your_favorite_day(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "candiesCount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]]",
        "output": "[true,false,true]",
        "explanation": "1- If you eat 2 candies (type 0) on day 0 and 2 candies (type 0) on day 1, you will eat a candy of type 0 on day 2."
      },
      {
        "input": "candiesCount = [5,2,6,4,1], queries = [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]",
        "output": "[false,true,true,false,false]"
      }
    ],
    "constraints": [
      "1 <= candiesCount.length <= 105",
      "1 <= candiesCount[i] <= 105",
      "1 <= queries.length <= 105",
      "queries[i].length == 3",
      "0 <= favoriteTypei < candiesCount.length",
      "0 <= favoriteDayi <= 109",
      "1 <= dailyCapi <= 109"
    ]
  },
  {
    "questionId": 1746,
    "title": "Maximum Subarray Sum After One Operation",
    "titleSlug": "maximum-subarray-sum-after-one-operation",
    "content": "<p>You are given an integer array `nums`. You must perform exactly one operation where you can replace one element `nums[i]` with `nums[i] * nums[i]`. \nReturn the maximum possible subarray sum after exactly one operation. The subarray must be non-empty.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_subarray_sum_after_one_operation(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [2,-1,-4,-3]",
        "output": "17",
        "explanation": "You can perform the operation on index 2 (0-indexed) to make nums = [2,-1,16,-3]. Now, the maximum subarray sum is 2 + -1 + 16 = 17."
      },
      {
        "input": "nums = [1,-1,1,1,-1,-1,1]",
        "output": "4",
        "explanation": "You can perform the operation on index 1 (0-indexed) to make nums = [1,1,1,1,-1,-1,1]. Now, the maximum subarray sum is 1 + 1 + 1 + 1 = 4."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 105",
      "-104 <= nums[i] <= 104"
    ]
  },
  {
    "questionId": 1748,
    "title": "Sum of Unique Elements",
    "titleSlug": "sum-of-unique-elements",
    "content": "<p>You are given an integer array `nums`. The unique elements of an array are the elements that appear exactly once in the array.</p>\n<p>Return the sum of all the unique elements of `nums`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sum_of_unique_elements(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3,2]",
        "output": "4",
        "explanation": "The unique elements are [1,3], and the sum is 4."
      },
      {
        "input": "nums = [1,1,1,1,1]",
        "output": "0",
        "explanation": "There are no unique elements, and the sum is 0."
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "15",
        "explanation": "The unique elements are [1,2,3,4,5], and the sum is 15."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 100",
      "1 <= nums[i] <= 100"
    ]
  },
  {
    "questionId": 1749,
    "title": "Maximum Absolute Sum of Any Subarray",
    "titleSlug": "maximum-absolute-sum-of-any-subarray",
    "content": "<p>You are given an integer array `nums`. The absolute sum of a subarray `[numsl, numsl+1, ..., numsr-1, numsr]` is `abs(numsl + numsl+1 + ... + numsr-1 + numsr)`.</p>\n<p>Return the maximum absolute sum of any (possibly empty) subarray of `nums`.</p>\n<p>Note that `abs(x)` is defined as follows:\nIf `x` is a negative integer, then `abs(x) = -x`.</p>\n<p>If `x` is a non-negative integer, then `abs(x) = x`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_absolute_sum_of_any_subarray(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,-3,2,3,-4]",
        "output": "5",
        "explanation": "The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5."
      },
      {
        "input": "nums = [2,-5,1,-4,3,-2]",
        "output": "8",
        "explanation": "The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 105",
      "-104 <= nums[i] <= 104"
    ]
  },
  {
    "questionId": 1750,
    "title": "Minimum Length of String After Deleting Similar Ends",
    "titleSlug": "minimum-length-of-string-after-deleting-similar-ends",
    "content": "<p>Given a string `s` consisting only of characters `'a'`, `'b'`, and `'c'`. You are asked to apply the following algorithm on the string any number of times:\nPick a non-empty prefix from the string `s` where all the characters in the prefix are equal.</p>\n<p>Pick a non-empty suffix from the string `s` where all the characters in this suffix are equal.</p>\n<p>The prefix and the suffix should not intersect at any index.</p>\n<p>The characters from the prefix and suffix must be the same.</p>\n<p>Delete both the prefix and the suffix.</p>\n<p>Return the minimum length of `s` after performing the above operation any number of times (possibly zero times).</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_length_of_string_after_deleting_similar_ends(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"ca\"",
        "output": "2",
        "explanation": "You can't remove any characters, so the string stays as is."
      },
      {
        "input": "s = \"cabaabac\"",
        "output": "0",
        "explanation": "An optimal sequence of operations is:"
      },
      {
        "input": "s = \"aabccabba\"",
        "output": "3",
        "explanation": "An optimal sequence of operations is:"
      }
    ],
    "constraints": [
      "1 <= s.length <= 105",
      "s only consists of characters 'a', 'b', and 'c'."
    ]
  },
  {
    "questionId": 1752,
    "title": "Check if Array Is Sorted and Rotated",
    "titleSlug": "check-if-array-is-sorted-and-rotated",
    "content": "<p>Given an array `nums`, return `true` if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return `false`.</p>\n<p>There may be duplicates in the original array.</p>\n<p>Note: An array `A` rotated by `x` positions results in an array `B` of the same length such that `A[i] == B[(i+x) % A.length]`, where `%` is the modulo operation.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def check_if_array_is_sorted_and_rotated(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [3,4,5,1,2]",
        "output": "true",
        "explanation": "[1,2,3,4,5] is the original sorted array."
      },
      {
        "input": "nums = [2,1,3,4]",
        "output": "false",
        "explanation": "There is no sorted array once rotated that can make nums."
      },
      {
        "input": "nums = [1,2,3]",
        "output": "true",
        "explanation": "[1,2,3] is the original sorted array."
      },
      {
        "input": "nums = [1,1,1]",
        "output": "true",
        "explanation": "[1,1,1] is the original sorted array."
      },
      {
        "input": "nums = [2,1]",
        "output": "true",
        "explanation": "[1,2] is the original sorted array."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 100",
      "1 <= nums[i] <= 100"
    ]
  },
  {
    "questionId": 1753,
    "title": "Maximum Score From Removing Stones",
    "titleSlug": "maximum-score-from-removing-stones",
    "content": "<p>You are playing a solitaire game with three piles of stones of sizes `a`\u200b\u200b\u200b\u200b\u200b\u200b, `b`,\u200b\u200b\u200b\u200b\u200b\u200b and `c`\u200b\u200b\u200b\u200b\u200b\u200b respectively. Each turn you choose two different non-empty piles, take one stone from each, and add `1` point to your score. The game stops when there are fewer than two non-empty piles (meaning there are no more available moves).</p>\n<p>Given three integers `a`\u200b\u200b\u200b\u200b\u200b, `b`,\u200b\u200b\u200b\u200b\u200b and `c`\u200b\u200b\u200b\u200b\u200b, return the maximum score you can get.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_score_from_removing_stones(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "a = 2, b = 4, c = 6",
        "output": "6",
        "explanation": "The starting state is (2, 4, 6). One optimal set of moves is:"
      },
      {
        "input": "a = 4, b = 4, c = 6",
        "output": "7",
        "explanation": "The starting state is (4, 4, 6). One optimal set of moves is:"
      },
      {
        "input": "a = 1, b = 8, c = 8",
        "output": "8",
        "explanation": "One optimal set of moves is to take from the 2nd and 3rd piles for 8 turns until they are empty."
      }
    ],
    "constraints": [
      "1 <= a, b, c <= 105"
    ]
  },
  {
    "questionId": 1754,
    "title": "Largest Merge Of Two Strings",
    "titleSlug": "largest-merge-of-two-strings",
    "content": "<p>You are given two strings `word1` and `word2`. You want to construct a string `merge` in the following way: while either `word1` or `word2` are non-empty, choose one of the following options:\nIf `word1` is non-empty, append the first character in `word1` to `merge` and delete it from `word1`.</p>\n<p>For example, if `word1 = \"abc\" `and `merge = \"dv\"`, then after choosing this operation, `word1 = \"bc\"` and `merge = \"dva\"`.</p>\n<p>If `word2` is non-empty, append the first character in `word2` to `merge` and delete it from `word2`.</p>\n<p>For example, if `word2 = \"abc\" `and `merge = \"\"`, then after choosing this operation, `word2 = \"bc\"` and `merge = \"a\"`.</p>\n<p>Return the lexicographically largest `merge` you can construct.</p>\n<p>A string `a` is lexicographically larger than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly larger than the corresponding character in `b`. For example, `\"abcd\"` is lexicographically larger than `\"abcc\"` because the first position they differ is at the fourth character, and `d` is greater than `c`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def largest_merge_of_two_strings(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "word1 = \"cabaa\", word2 = \"bcaaa\"",
        "output": "\"cbcabaaaaa\"",
        "explanation": "One way to get the lexicographically largest merge is:"
      },
      {
        "input": "word1 = \"abcabc\", word2 = \"abdcaba\"",
        "output": "\"abdcabcabcaba\""
      }
    ],
    "constraints": [
      "1 <= word1.length, word2.length <= 3000",
      "word1 and word2 consist only of lowercase English letters."
    ]
  },
  {
    "questionId": 1756,
    "title": "Design Most Recently Used Queue",
    "titleSlug": "design-most-recently-used-queue",
    "content": "<p>Design a queue-like data structure that moves the most recently used element to the end of the queue.</p>\n<p>Implement the `MRUQueue` class:\n`MRUQueue(int n)` constructs the `MRUQueue` with `n` elements: `[1,2,3,...,n]`.</p>\n<p>`fetch(int k)` moves the `kth` element (1-indexed) to the end of the queue and returns it.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def design_most_recently_used_queue(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "[\"MRUQueue\", \"fetch\", \"fetch\", \"fetch\", \"fetch\"]",
        "output": "[null, 3, 6, 2, 2]",
        "explanation": "MRUQueue mRUQueue = new MRUQueue(8); // Initializes the queue to [1,2,3,4,5,6,7,8]."
      }
    ],
    "constraints": [
      "1 <= n <= 2000",
      "1 <= k <= n",
      "At most 2000 calls will be made to fetch.",
      "Follow up: Finding an O(n) algorithm per fetch is a bit easy. Can you find an algorithm with a better complexity for each fetch call?"
    ]
  },
  {
    "questionId": 1758,
    "title": "Minimum Changes To Make Alternating Binary String",
    "titleSlug": "minimum-changes-to-make-alternating-binary-string",
    "content": "<p>You are given a string `s` consisting only of the characters `'0'` and `'1'`. In one operation, you can change any `'0'` to `'1'` or vice versa.</p>\n<p>The string is called alternating if no two adjacent characters are equal. For example, the string `\"010\"` is alternating, while the string `\"0100\"` is not.</p>\n<p>Return the minimum number of operations needed to make `s` alternating.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_changes_to_make_alternating_binary_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"0100\"",
        "output": "1",
        "explanation": "If you change the last character to '1', s will be \"0101\", which is alternating."
      },
      {
        "input": "s = \"10\"",
        "output": "0",
        "explanation": "s is already alternating."
      },
      {
        "input": "s = \"1111\"",
        "output": "2",
        "explanation": "You need two operations to reach \"0101\" or \"1010\"."
      }
    ],
    "constraints": [
      "1 <= s.length <= 104",
      "s[i] is either '0' or '1'."
    ]
  },
  {
    "questionId": 1759,
    "title": "Count Number of Homogenous Substrings",
    "titleSlug": "count-number-of-homogenous-substrings",
    "content": "<p>Given a string `s`, return the number of homogenous substrings of `s`. Since the answer may be too large, return it modulo `109 + 7`.</p>\n<p>A string is homogenous if all the characters of the string are the same.</p>\n<p>A substring is a contiguous sequence of characters within a string.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_number_of_homogenous_substrings(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"abbcccaa\"",
        "output": "13",
        "explanation": "The homogenous substrings are listed as below:"
      },
      {
        "input": "s = \"xy\"",
        "output": "2",
        "explanation": "The homogenous substrings are \"x\" and \"y\"."
      },
      {
        "input": "s = \"zzzzz\"",
        "output": "15"
      }
    ],
    "constraints": [
      "1 <= s.length <= 105",
      "s consists of lowercase letters."
    ]
  },
  {
    "questionId": 1760,
    "title": "Minimum Limit of Balls in a Bag",
    "titleSlug": "minimum-limit-of-balls-in-a-bag",
    "content": "<p>You are given an integer array `nums` where the `ith` bag contains `nums[i]` balls. You are also given an integer `maxOperations`.</p>\n<p>You can perform the following operation at most `maxOperations` times:\nTake any bag of balls and divide it into two new bags with a positive number of balls.</p>\n<p>For example, a bag of `5` balls can become two new bags of `1` and `4` balls, or two new bags of `2` and `3` balls.</p>\n<p>Your penalty is the maximum number of balls in a bag. You want to minimize your penalty after the operations.</p>\n<p>Return the minimum possible penalty after performing the operations.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_limit_of_balls_in_a_bag(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [9], maxOperations = 2",
        "output": "3",
        "explanation": "- Divide the bag with 9 balls into two bags of sizes 6 and 3. [9] -> [6,3]."
      },
      {
        "input": "nums = [2,4,8,2], maxOperations = 4",
        "output": "2",
        "explanation": "- Divide the bag with 8 balls into two bags of sizes 4 and 4. [2,4,8,2] -> [2,4,4,4,2]."
      },
      {
        "input": "nums = [7,17], maxOperations = 2",
        "output": "7"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 105",
      "1 <= maxOperations, nums[i] <= 109"
    ]
  },
  {
    "questionId": 1762,
    "title": "Buildings With an Ocean View",
    "titleSlug": "buildings-with-an-ocean-view",
    "content": "<p>There are `n` buildings in a line. You are given an integer array `heights` of size `n` that represents the heights of the buildings in the line.</p>\n<p>The ocean is to the right of the buildings. A building has an ocean view if the building can see the ocean without obstructions. Formally, a building has an ocean view if all the buildings to its right have a smaller height.</p>\n<p>Return a list of indices (0-indexed) of buildings that have an ocean view, sorted in increasing order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def buildings_with_an_ocean_view(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "heights = [4,2,3,1]",
        "output": "[0,2,3]",
        "explanation": "Building 1 (0-indexed) does not have an ocean view because building 2 is taller."
      },
      {
        "input": "heights = [4,3,2,1]",
        "output": "[0,1,2,3]",
        "explanation": "All the buildings have an ocean view."
      },
      {
        "input": "heights = [1,3,2,4]",
        "output": "[3]",
        "explanation": "Only building 3 has an ocean view."
      },
      {
        "input": "heights = [2,2,2,2]",
        "output": "[3]",
        "explanation": "Buildings cannot see the ocean if there are buildings of the same height to its right."
      }
    ],
    "constraints": [
      "1 <= heights.length <= 105",
      "1 <= heights[i] <= 109"
    ]
  },
  {
    "questionId": 1763,
    "title": "Longest Nice Substring",
    "titleSlug": "longest-nice-substring",
    "content": "<p>A string `s` is nice if, for every letter of the alphabet that `s` contains, it appears both in uppercase and lowercase. For example, `\"abABB\"` is nice because `'A'` and `'a'` appear, and `'B'` and `'b'` appear. However, `\"abA\"` is not because `'b'` appears, but `'B'` does not.</p>\n<p>Given a string `s`, return the longest substring of `s` that is nice. If there are multiple, return the substring of the earliest occurrence. If there are none, return an empty string.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longest_nice_substring(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"YazaAay\"",
        "output": "\"aAa\"",
        "explanation": "\"aAa\" is a nice string because 'A/a' is the only letter of the alphabet in s, and both 'A' and 'a' appear."
      },
      {
        "input": "s = \"Bb\"",
        "output": "\"Bb\"",
        "explanation": "\"Bb\" is a nice string because both 'B' and 'b' appear. The whole string is a substring."
      },
      {
        "input": "s = \"c\"",
        "output": "\"\"",
        "explanation": "There are no nice substrings."
      },
      {
        "input": "s = \"dDzeE\"",
        "output": "\"dD\"",
        "explanation": "Both \"dD\" and \"eE\" are the longest nice substrings."
      }
    ],
    "constraints": [
      "1 <= s.length <= 100",
      "s consists of uppercase and lowercase English letters."
    ]
  },
  {
    "questionId": 1764,
    "title": "Form Array by Concatenating Subarrays of Another Array",
    "titleSlug": "form-array-by-concatenating-subarrays-of-another-array",
    "content": "<p>You are given a 2D integer array `groups` of length `n`. You are also given an integer array `nums`.</p>\n<p>You are asked if you can choose `n` disjoint subarrays from the array `nums` such that the `ith` subarray is equal to `groups[i]` (0-indexed), and if `i > 0`, the `(i-1)th` subarray appears before the `ith` subarray in `nums` (i.e. the subarrays must be in the same order as `groups`).</p>\n<p>Return `true` if you can do this task, and `false` otherwise.</p>\n<p>Note that the subarrays are disjoint if and only if there is no index `k` such that `nums[k]` belongs to more than one subarray. A subarray is a contiguous sequence of elements within an array.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def form_array_by_concatenating_subarrays_of_another_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0]",
        "output": "true",
        "explanation": "You can choose the 0th subarray as [1,-1,0,1,-1,-1,3,-2,0] and the 1st one as [1,-1,0,1,-1,-1,3,-2,0]."
      },
      {
        "input": "groups = [[10,-2],[1,2,3,4]], nums = [1,2,3,4,10,-2]",
        "output": "false",
        "explanation": "Note that choosing the subarrays [1,2,3,4,10,-2] and [1,2,3,4,10,-2] is incorrect because they are not in the same order as in groups."
      },
      {
        "input": "groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7]",
        "output": "false",
        "explanation": "Note that choosing the subarrays [7,7,1,2,3,4,7,7] and [7,7,1,2,3,4,7,7] is invalid because they are not disjoint."
      }
    ],
    "constraints": [
      "groups.length == n",
      "1 <= n <= 103",
      "1 <= groups[i].length, sum(groups[i].length) <= 103",
      "1 <= nums.length <= 103",
      "-107 <= groups[i][j], nums[k] <= 107"
    ]
  },
  {
    "questionId": 1765,
    "title": "Map of Highest Peak",
    "titleSlug": "map-of-highest-peak",
    "content": "<p>You are given an integer matrix `isWater` of size `m x n` that represents a map of land and water cells.</p>\n<p>If `isWater[i][j] == 0`, cell `(i, j)` is a land cell.</p>\n<p>If `isWater[i][j] == 1`, cell `(i, j)` is a water cell.</p>\n<p>You must assign each cell a height in a way that follows these rules:\nThe height of each cell must be non-negative.</p>\n<p>If the cell is a water cell, its height must be `0`.</p>\n<p>Any two adjacent cells must have an absolute height difference of at most `1`. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).</p>\n<p>Find an assignment of heights such that the maximum height in the matrix is maximized.</p>\n<p>Return an integer matrix `height` of size `m x n` where `height[i][j]` is cell `(i, j)`'s height. If there are multiple solutions, return any of them.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def map_of_highest_peak(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "isWater = [[0,1],[0,0]]",
        "output": "[[1,0],[2,1]]",
        "explanation": "The image shows the assigned heights of each cell."
      },
      {
        "input": "isWater = [[0,0,1],[1,0,0],[0,0,0]]",
        "output": "[[1,1,0],[0,1,1],[1,2,2]]",
        "explanation": "A height of 2 is the maximum possible height of any assignment."
      }
    ],
    "constraints": [
      "m == isWater.length",
      "n == isWater[i].length",
      "1 <= m, n <= 1000",
      "isWater[i][j] is 0 or 1.",
      "There is at least one water cell."
    ]
  },
  {
    "questionId": 1768,
    "title": "Merge Strings Alternately",
    "titleSlug": "merge-strings-alternately",
    "content": "<p>You are given two strings `word1` and `word2`. Merge the strings by adding letters in alternating order, starting with `word1`. If a string is longer than the other, append the additional letters onto the end of the merged string.</p>\n<p>Return the merged string.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def merge_strings_alternately(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "word1 = \"abc\", word2 = \"pqr\"",
        "output": "\"apbqcr\"",
        "explanation": "The merged string will be merged as so:"
      },
      {
        "input": "word1 = \"ab\", word2 = \"pqrs\"",
        "output": "\"apbqrs\"",
        "explanation": "Notice that as word2 is longer, \"rs\" is appended to the end."
      },
      {
        "input": "word1 = \"abcd\", word2 = \"pq\"",
        "output": "\"apbqcd\"",
        "explanation": "Notice that as word1 is longer, \"cd\" is appended to the end."
      }
    ],
    "constraints": [
      "1 <= word1.length, word2.length <= 100",
      "word1 and word2 consist of lowercase English letters."
    ]
  },
  {
    "questionId": 1769,
    "title": "Minimum Number of Operations to Move All Balls to Each Box",
    "titleSlug": "minimum-number-of-operations-to-move-all-balls-to-each-box",
    "content": "<p>You have `n` boxes. You are given a binary string `boxes` of length `n`, where `boxes[i]` is `'0'` if the `ith` box is empty, and `'1'` if it contains one ball.</p>\n<p>In one operation, you can move one ball from a box to an adjacent box. Box `i` is adjacent to box `j` if `abs(i - j) == 1`. Note that after doing so, there may be more than one ball in some boxes.</p>\n<p>Return an array `answer` of size `n`, where `answer[i]` is the minimum number of operations needed to move all the balls to the `ith` box.</p>\n<p>Each `answer[i]` is calculated considering the initial state of the boxes.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_number_of_operations_to_move_all_balls_to_each_box(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "boxes = \"110\"",
        "output": "[1,1,3]",
        "explanation": "The answer for each box is as follows:"
      },
      {
        "input": "boxes = \"001011\"",
        "output": "[11,8,5,4,3,4]"
      }
    ],
    "constraints": [
      "n == boxes.length",
      "1 <= n <= 2000",
      "boxes[i] is either '0' or '1'."
    ]
  },
  {
    "questionId": 1770,
    "title": "Maximum Score from Performing Multiplication Operations",
    "titleSlug": "maximum-score-from-performing-multiplication-operations",
    "content": "<p>You are given two integer arrays `nums` and `multipliers` of size `n` and `m` respectively, where `n >= m`. The arrays are 1-indexed.</p>\n<p>You begin with a score of `0`. You want to perform exactly `m` operations. On the `ith` operation (1-indexed), you will:\nChoose one integer `x` from either the start or the end of the array `nums`.</p>\n<p>Add `multipliers[i] * x` to your score.</p>\n<p>Remove `x` from the array `nums`.</p>\n<p>Return the maximum score after performing `m` operations.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_score_from_performing_multiplication_operations(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3], multipliers = [3,2,1]",
        "output": "14",
        "explanation": "An optimal solution is as follows:"
      },
      {
        "input": "nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6]",
        "output": "102",
        "explanation": "An optimal solution is as follows:"
      }
    ],
    "constraints": [
      "n == nums.length",
      "m == multipliers.length",
      "1 <= m <= 103",
      "m <= n <= 105 ",
      "-1000 <= nums[i], multipliers[i] <= 1000"
    ]
  },
  {
    "questionId": 1772,
    "title": "Sort Features by Popularity",
    "titleSlug": "sort-features-by-popularity",
    "content": "<p>You are given a string array `features` where `features[i]` is a single word that represents the name of a feature of the latest product you are working on. You have made a survey where users have reported which features they like. You are given a string array `responses`, where each `responses[i]` is a string containing space-separated words.</p>\n<p>The popularity of a feature is the number of `responses[i]` that contain the feature. You want to sort the features in non-increasing order by their popularity. If two features have the same popularity, order them by their original index in `features`. Notice that one response could contain the same feature multiple times; this feature is only counted once in its popularity.</p>\n<p>Return the features in sorted order.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sort_features_by_popularity(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "features = [\"cooler\",\"lock\",\"touch\"], responses = [\"i like cooler cooler\",\"lock touch cool\",\"locker like touch\"]",
        "output": "[\"touch\",\"cooler\",\"lock\"]",
        "explanation": "appearances(\"cooler\") = 1, appearances(\"lock\") = 1, appearances(\"touch\") = 2. Since \"cooler\" and \"lock\" both had 1 appearance, \"cooler\" comes first because \"cooler\" came first in the features array."
      },
      {
        "input": "features = [\"a\",\"aa\",\"b\",\"c\"], responses = [\"a\",\"a aa\",\"a a a a a\",\"b a\"]",
        "output": "[\"a\",\"aa\",\"b\",\"c\"]"
      }
    ],
    "constraints": [
      "1 <= features.length <= 104",
      "1 <= features[i].length <= 10",
      "features contains no duplicates.",
      "features[i] consists of lowercase letters.",
      "1 <= responses.length <= 102",
      "1 <= responses[i].length <= 103",
      "responses[i] consists of lowercase letters and spaces.",
      "responses[i] contains no two consecutive spaces.",
      "responses[i] has no leading or trailing spaces."
    ]
  },
  {
    "questionId": 1773,
    "title": "Count Items Matching a Rule",
    "titleSlug": "count-items-matching-a-rule",
    "content": "<p>You are given an array `items`, where each `items[i] = [typei, colori, namei]` describes the type, color, and name of the `ith` item. You are also given a rule represented by two strings, `ruleKey` and `ruleValue`.</p>\n<p>The `ith` item is said to match the rule if one of the following is true:\n`ruleKey == \"type\"` and `ruleValue == typei`.</p>\n<p>`ruleKey == \"color\"` and `ruleValue == colori`.</p>\n<p>`ruleKey == \"name\"` and `ruleValue == namei`.</p>\n<p>Return the number of items that match the given rule.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_items_matching_a_rule(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"lenovo\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"color\", ruleValue = \"silver\"",
        "output": "1",
        "explanation": "There is only one item matching the given rule, which is [\"computer\",\"silver\",\"lenovo\"]."
      },
      {
        "input": "items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"phone\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"type\", ruleValue = \"phone\"",
        "output": "2",
        "explanation": "There are only two items matching the given rule, which are [\"phone\",\"blue\",\"pixel\"] and [\"phone\",\"gold\",\"iphone\"]. Note that the item [\"computer\",\"silver\",\"phone\"] does not match."
      }
    ],
    "constraints": [
      "1 <= items.length <= 104",
      "1 <= typei.length, colori.length, namei.length, ruleValue.length <= 10",
      "ruleKey is equal to either \"type\", \"color\", or \"name\".",
      "All strings consist only of lowercase letters."
    ]
  },
  {
    "questionId": 1774,
    "title": "Closest Dessert Cost",
    "titleSlug": "closest-dessert-cost",
    "content": "<p>You would like to make dessert and are preparing to buy the ingredients. You have `n` ice cream base flavors and `m` types of toppings to choose from. You must follow these rules when making your dessert:\nThere must be exactly one ice cream base.</p>\n<p>You can add one or more types of topping or have no toppings at all.</p>\n<p>There are at most two of each type of topping.</p>\n<p>You are given three inputs:\n`baseCosts`, an integer array of length `n`, where each `baseCosts[i]` represents the price of the `ith` ice cream base flavor.</p>\n<p>`toppingCosts`, an integer array of length `m`, where each `toppingCosts[i]` is the price of one of the `ith` topping.</p>\n<p>`target`, an integer representing your target price for dessert.</p>\n<p>You want to make a dessert with a total cost as close to `target` as possible.</p>\n<p>Return the closest possible cost of the dessert to `target`. If there are multiple, return the lower one.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def closest_dessert_cost(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "baseCosts = [1,7], toppingCosts = [3,4], target = 10",
        "output": "10",
        "explanation": "Consider the following combination (all 0-indexed):"
      },
      {
        "input": "baseCosts = [2,3], toppingCosts = [4,5,100], target = 18",
        "output": "17",
        "explanation": "Consider the following combination (all 0-indexed):"
      },
      {
        "input": "baseCosts = [3,10], toppingCosts = [2,5], target = 9",
        "output": "8",
        "explanation": "It is possible to make desserts with cost 8 and 10. Return 8 as it is the lower cost."
      },
      {
        "input": "baseCosts = [10], toppingCosts = [1], target = 1",
        "output": "10",
        "explanation": "Notice that you don't have to have any toppings, but you must have exactly one base."
      }
    ],
    "constraints": [
      "n == baseCosts.length",
      "m == toppingCosts.length",
      "1 <= n, m <= 10",
      "1 <= baseCosts[i], toppingCosts[i] <= 104",
      "1 <= target <= 104"
    ]
  },
  {
    "questionId": 1775,
    "title": "Equal Sum Arrays With Minimum Number of Operations",
    "titleSlug": "equal-sum-arrays-with-minimum-number-of-operations",
    "content": "<p>You are given two arrays of integers `nums1` and `nums2`, possibly of different lengths. The values in the arrays are between `1` and `6`, inclusive.</p>\n<p>In one operation, you can change any integer's value in any of the arrays to any value between `1` and `6`, inclusive.</p>\n<p>Return the minimum number of operations required to make the sum of values in `nums1` equal to the sum of values in `nums2`. Return `-1`\u200b\u200b\u200b\u200b\u200b if it is not possible to make the sum of the two arrays equal.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def equal_sum_arrays_with_minimum_number_of_operations(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]",
        "output": "3",
        "explanation": "You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed."
      },
      {
        "input": "nums1 = [1,1,1,1,1,1,1], nums2 = [6]",
        "output": "-1",
        "explanation": "There is no way to decrease the sum of nums1 or to increase the sum of nums2 to make them equal."
      },
      {
        "input": "nums1 = [6,6], nums2 = [1]",
        "output": "3",
        "explanation": "You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed."
      }
    ],
    "constraints": [
      "1 <= nums1.length, nums2.length <= 105",
      "1 <= nums1[i], nums2[i] <= 6"
    ]
  },
  {
    "questionId": 1778,
    "title": "Shortest Path in a Hidden Grid",
    "titleSlug": "shortest-path-in-a-hidden-grid",
    "content": "<p>This is an interactive problem.</p>\n<p>There is a robot in a hidden grid, and you are trying to get it from its starting cell to the target cell in this grid. The grid is of size `m x n`, and each cell in the grid is either empty or blocked. It is guaranteed that the starting cell and the target cell are different, and neither of them is blocked.</p>\n<p>You want to find the minimum distance to the target cell. However, you do not know the grid's dimensions, the starting cell, nor the target cell. You are only allowed to ask queries to the `GridMaster` object.</p>\n<p>Thr `GridMaster` class has the following functions:\n`boolean canMove(char direction)` Returns `true` if the robot can move in that direction. Otherwise, it returns `false`.</p>\n<p>`void move(char direction)` Moves the robot in that direction. If this move would move the robot to a blocked cell or off the grid, the move will be ignored, and the robot will remain in the same position.</p>\n<p>`boolean isTarget()` Returns `true` if the robot is currently on the target cell. Otherwise, it returns `false`.</p>\n<p>Note that `direction` in the above functions should be a character from `{'U','D','L','R'}`, representing the directions up, down, left, and right, respectively.</p>\n<p>Return the minimum distance between the robot's initial starting cell and the target cell. If there is no valid path between the cells, return `-1`.</p>\n<p>Custom testing:\nThe test input is read as a 2D matrix `grid` of size `m x n` where:\n`grid[i][j] == -1` indicates that the robot is in cell `(i, j)` (the starting cell).</p>\n<p>`grid[i][j] == 0` indicates that the cell `(i, j)` is blocked.</p>\n<p>`grid[i][j] == 1` indicates that the cell `(i, j)` is empty.</p>\n<p>`grid[i][j] == 2` indicates that the cell `(i, j)` is the target cell.</p>\n<p>There is exactly one `-1` and `2` in `grid`. Remember that you will not have this information in your code.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def shortest_path_in_a_hidden_grid(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "grid = [[1,2],[-1,0]]",
        "output": "2",
        "explanation": "One possible interaction is described below:"
      },
      {
        "input": "grid = [[0,0,-1],[1,1,1],[2,0,0]]",
        "output": "4",
        "explanation": "The minimum distance between the robot and the target cell is 4."
      },
      {
        "input": "grid = [[-1,0],[0,2]]",
        "output": "-1",
        "explanation": "There is no path from the robot to the target cell."
      }
    ],
    "constraints": [
      "1 <= n, m <= 500",
      "m == grid.length",
      "n == grid[i].length",
      "grid[i][j] is either -1, 0, 1, or 2.",
      "There is exactly one -1 in grid.",
      "There is exactly one 2 in grid."
    ]
  },
  {
    "questionId": 1779,
    "title": "Find Nearest Point That Has the Same X or Y Coordinate",
    "titleSlug": "find-nearest-point-that-has-the-same-x-or-y-coordinate",
    "content": "<p>You are given two integers, `x` and `y`, which represent your current location on a Cartesian grid: `(x, y)`. You are also given an array `points` where each `points[i] = [ai, bi]` represents that a point exists at `(ai, bi)`. A point is valid if it shares the same x-coordinate or the same y-coordinate as your location.</p>\n<p>Return the index (0-indexed) of the valid point with the smallest Manhattan distance from your current location. If there are multiple, return the valid point with the smallest index. If there are no valid points, return `-1`.</p>\n<p>The Manhattan distance between two points `(x1, y1)` and `(x2, y2)` is `abs(x1 - x2) + abs(y1 - y2)`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_nearest_point_that_has_the_same_x_or_y_coordinate(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]",
        "output": "2",
        "explanation": "Of all the points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, [2,4] and [4,4] have the smallest Manhattan distance from your current location, with a distance of 1. [2,4] has the smallest index, so return 2."
      },
      {
        "input": "x = 3, y = 4, points = [[3,4]]",
        "output": "0",
        "explanation": "The answer is allowed to be on the same location as your current location."
      },
      {
        "input": "x = 3, y = 4, points = [[2,3]]",
        "output": "-1",
        "explanation": "There are no valid points."
      }
    ],
    "constraints": [
      "1 <= points.length <= 104",
      "points[i].length == 2",
      "1 <= x, y, ai, bi <= 104"
    ]
  },
  {
    "questionId": 1780,
    "title": "Check if Number is a Sum of Powers of Three",
    "titleSlug": "check-if-number-is-a-sum-of-powers-of-three",
    "content": "<p>Given an integer `n`, return `true` if it is possible to represent `n` as the sum of distinct powers of three. Otherwise, return `false`.</p>\n<p>An integer `y` is a power of three if there exists an integer `x` such that `y == 3x`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def check_if_number_is_a_sum_of_powers_of_three(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 12",
        "output": "true",
        "explanation": "12 = 31 + 32"
      },
      {
        "input": "n = 91",
        "output": "true",
        "explanation": "91 = 30 + 32 + 34"
      },
      {
        "input": "n = 21",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= n <= 107"
    ]
  },
  {
    "questionId": 1781,
    "title": "Sum of Beauty of All Substrings",
    "titleSlug": "sum-of-beauty-of-all-substrings",
    "content": "<p>The beauty of a string is the difference in frequencies between the most frequent and least frequent characters.</p>\n<p>For example, the beauty of `\"abaacc\"` is `3 - 1 = 2`.</p>\n<p>Given a string `s`, return the sum of beauty of all of its substrings.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sum_of_beauty_of_all_substrings(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"aabcb\"",
        "output": "5",
        "explanation": "The substrings with non-zero beauty are [\"aab\",\"aabc\",\"aabcb\",\"abcb\",\"bcb\"], each with beauty equal to 1."
      },
      {
        "input": "s = \"aabcbaa\"",
        "output": "17"
      }
    ],
    "constraints": [
      "1 <= s.length <= 500",
      "s consists of only lowercase English letters."
    ]
  },
  {
    "questionId": 1784,
    "title": "Check if Binary String Has at Most One Segment of Ones",
    "titleSlug": "check-if-binary-string-has-at-most-one-segment-of-ones",
    "content": "<p>Given a binary string `s` \u200b\u200b\u200b\u200b\u200bwithout leading zeros, return `true`\u200b\u200b\u200b if `s` contains at most one contiguous segment of ones. Otherwise, return `false`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def check_if_binary_string_has_at_most_one_segment_of_ones(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"1001\"",
        "output": "false",
        "explanation": "The ones do not form a contiguous segment."
      },
      {
        "input": "s = \"110\"",
        "output": "true"
      }
    ],
    "constraints": [
      "1 <= s.length <= 100",
      "s[i]\u200b\u200b\u200b\u200b is either '0' or '1'.",
      "s[0] is '1'."
    ]
  },
  {
    "questionId": 1785,
    "title": "Minimum Elements to Add to Form a Given Sum",
    "titleSlug": "minimum-elements-to-add-to-form-a-given-sum",
    "content": "<p>You are given an integer array `nums` and two integers `limit` and `goal`. The array `nums` has an interesting property that `abs(nums[i]) <= limit`.</p>\n<p>Return the minimum number of elements you need to add to make the sum of the array equal to `goal`. The array must maintain its property that `abs(nums[i]) <= limit`.</p>\n<p>Note that `abs(x)` equals `x` if `x >= 0`, and `-x` otherwise.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_elements_to_add_to_form_a_given_sum(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [1,-1,1], limit = 3, goal = -4",
        "output": "2",
        "explanation": "You can add -2 and -3, then the sum of the array will be 1 - 1 + 1 - 2 - 3 = -4."
      },
      {
        "input": "nums = [1,-10,9,1], limit = 100, goal = 0",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 105",
      "1 <= limit <= 106",
      "-limit <= nums[i] <= limit",
      "-109 <= goal <= 109"
    ]
  },
  {
    "questionId": 1786,
    "title": "Number of Restricted Paths From First to Last Node",
    "titleSlug": "number-of-restricted-paths-from-first-to-last-node",
    "content": "<p>There is an undirected weighted connected graph. You are given a positive integer `n` which denotes that the graph has `n` nodes labeled from `1` to `n`, and an array `edges` where each `edges[i] = [ui, vi, weighti]` denotes that there is an edge between nodes `ui` and `vi` with weight equal to `weighti`.</p>\n<p>A path from node `start` to node `end` is a sequence of nodes `[z0, z1, z2, ..., zk]` such that `z0 = start` and `zk = end` and there is an edge between `zi` and `zi+1` where `0 <= i <= k-1`.</p>\n<p>The distance of a path is the sum of the weights on the edges of the path. Let `distanceToLastNode(x)` denote the shortest distance of a path between node `n` and node `x`. A restricted path is a path that also satisfies that `distanceToLastNode(zi) > distanceToLastNode(zi+1)` where `0 <= i <= k-1`.</p>\n<p>Return the number of restricted paths from node `1` to node `n`. Since that number may be too large, return it modulo `109 + 7`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_restricted_paths_from_first_to_last_node(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 5, edges = [[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]]",
        "output": "3",
        "explanation": "Each circle contains the node number in black and its `distanceToLastNode value in blue. `The three restricted paths are:"
      },
      {
        "input": "n = 7, edges = [[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[6,7,2],[7,5,3],[2,6,4]]",
        "output": "1",
        "explanation": "Each circle contains the node number in black and its `distanceToLastNode value in blue. `The only restricted path is 1 --> 3 --> 7."
      }
    ],
    "constraints": [
      "1 <= n <= 2 * 104",
      "n - 1 <= edges.length <= 4 * 104",
      "edges[i].length == 3",
      "1 <= ui, vi <= n",
      "ui != vi",
      "1 <= weighti <= 105",
      "There is at most one edge between any two nodes.",
      "There is at least one path between any two nodes."
    ]
  },
  {
    "questionId": 1790,
    "title": "Check if One String Swap Can Make Strings Equal",
    "titleSlug": "check-if-one-string-swap-can-make-strings-equal",
    "content": "<p>You are given two strings `s1` and `s2` of equal length. A string swap is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices.</p>\n<p>Return `true` if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings. Otherwise, return `false`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def check_if_one_string_swap_can_make_strings_equal(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s1 = \"bank\", s2 = \"kanb\"",
        "output": "true",
        "explanation": "For example, swap the first character with the last character of s2 to make \"bank\"."
      },
      {
        "input": "s1 = \"attack\", s2 = \"defend\"",
        "output": "false",
        "explanation": "It is impossible to make them equal with one string swap."
      },
      {
        "input": "s1 = \"kelb\", s2 = \"kelb\"",
        "output": "true",
        "explanation": "The two strings are already equal, so no string swap operation is required."
      },
      {
        "input": "s1 = \"abcd\", s2 = \"dcba\"",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= s1.length, s2.length <= 100",
      "s1.length == s2.length",
      "s1 and s2 consist of only lowercase English letters."
    ]
  },
  {
    "questionId": 1791,
    "title": "Find Center of Star Graph",
    "titleSlug": "find-center-of-star-graph",
    "content": "<p>There is an undirected star graph consisting of `n` nodes labeled from `1` to `n`. A star graph is a graph where there is one center node and exactly `n - 1` edges that connect the center node with every other node.</p>\n<p>You are given a 2D integer array `edges` where each `edges[i] = [ui, vi]` indicates that there is an edge between the nodes `ui` and `vi`. Return the center of the given star graph.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_center_of_star_graph(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "edges = [[1,2],[2,3],[4,2]]",
        "output": "2",
        "explanation": "As shown in the figure above, node 2 is connected to every other node, so 2 is the center."
      },
      {
        "input": "edges = [[1,2],[5,1],[1,3],[1,4]]",
        "output": "1"
      }
    ],
    "constraints": [
      "3 <= n <= 105",
      "edges.length == n - 1",
      "edges[i].length == 2",
      "1 <= ui, vi <= n",
      "ui != vi",
      "The given edges represent a valid star graph."
    ]
  },
  {
    "questionId": 1792,
    "title": "Maximum Average Pass Ratio",
    "titleSlug": "maximum-average-pass-ratio",
    "content": "<p>There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array `classes`, where `classes[i] = [passi, totali]`. You know beforehand that in the `ith` class, there are `totali` total students, but only `passi` number of students will pass the exam.</p>\n<p>You are also given an integer `extraStudents`. There are another `extraStudents` brilliant students that are guaranteed to pass the exam of any class they are assigned to. You want to assign each of the `extraStudents` students to a class in a way that maximizes the average pass ratio across all the classes.</p>\n<p>The pass ratio of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. The average pass ratio is the sum of pass ratios of all the classes divided by the number of the classes.</p>\n<p>Return the maximum possible average pass ratio after assigning the `extraStudents` students. Answers within `10-5` of the actual answer will be accepted.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_average_pass_ratio(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "classes = [[1,2],[3,5],[2,2]], `extraStudents` = 2",
        "output": "0.78333",
        "explanation": "You can assign the two extra students to the first class. The average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333."
      },
      {
        "input": "classes = [[2,4],[3,9],[4,5],[2,10]], `extraStudents` = 4",
        "output": "0.53485"
      }
    ],
    "constraints": [
      "1 <= classes.length <= 105",
      "classes[i].length == 2",
      "1 <= passi <= totali <= 105",
      "1 <= extraStudents <= 105"
    ]
  },
  {
    "questionId": 1794,
    "title": "Count Pairs of Equal Substrings With Minimum Difference",
    "titleSlug": "count-pairs-of-equal-substrings-with-minimum-difference",
    "content": "<p>You are given two strings `firstString` and `secondString` that are 0-indexed and consist only of lowercase English letters. Count the number of index quadruples `(i,j,a,b)` that satisfy the following conditions:\n`0 <= i <= j < firstString.length`\n`0 <= a <= b < secondString.length`\nThe substring of `firstString` that starts at the `ith` character and ends at the `jth` character (inclusive) is equal to the substring of `secondString` that starts at the `ath` character and ends at the `bth` character (inclusive).</p>\n<p>`j - a` is the minimum possible value among all quadruples that satisfy the previous conditions.</p>\n<p>Return the number of such quadruples.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_pairs_of_equal_substrings_with_minimum_difference(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "firstString = \"abcd\", secondString = \"bccda\"",
        "output": "1",
        "explanation": "The quadruple (0,0,4,4) is the only one that satisfies all the conditions and minimizes j - a."
      },
      {
        "input": "firstString = \"ab\", secondString = \"cd\"",
        "output": "0",
        "explanation": "There are no quadruples satisfying all the conditions."
      }
    ],
    "constraints": [
      "1 <= firstString.length, secondString.length <= 2 * 105",
      "Both strings consist only of lowercase English letters."
    ]
  },
  {
    "questionId": 1796,
    "title": "Second Largest Digit in a String",
    "titleSlug": "second-largest-digit-in-a-string",
    "content": "<p>Given an alphanumeric string `s`, return the second largest numerical digit that appears in `s`, or `-1` if it does not exist.</p>\n<p>An alphanumeric string is a string consisting of lowercase English letters and digits.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def second_largest_digit_in_a_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"dfa12321afd\"",
        "output": "2",
        "explanation": "The digits that appear in s are [1, 2, 3]. The second largest digit is 2."
      },
      {
        "input": "s = \"abc1111\"",
        "output": "-1",
        "explanation": "The digits that appear in s are [1]. There is no second largest digit."
      }
    ],
    "constraints": [
      "1 <= s.length <= 500",
      "s consists of only lowercase English letters and/or digits."
    ]
  },
  {
    "questionId": 1797,
    "title": "Design Authentication Manager",
    "titleSlug": "design-authentication-manager",
    "content": "<p>There is an authentication system that works with authentication tokens. For each session, the user will receive a new authentication token that will expire `timeToLive` seconds after the `currentTime`. If the token is renewed, the expiry time will be extended to expire `timeToLive` seconds after the (potentially different) `currentTime`.</p>\n<p>Implement the `AuthenticationManager` class:\n`AuthenticationManager(int timeToLive)` constructs the `AuthenticationManager` and sets the `timeToLive`.</p>\n<p>`generate(string tokenId, int currentTime)` generates a new token with the given `tokenId` at the given `currentTime` in seconds.</p>\n<p>`renew(string tokenId, int currentTime)` renews the unexpired token with the given `tokenId` at the given `currentTime` in seconds. If there are no unexpired tokens with the given `tokenId`, the request is ignored, and nothing happens.</p>\n<p>`countUnexpiredTokens(int currentTime)` returns the number of unexpired tokens at the given currentTime.</p>\n<p>Note that if a token expires at time `t`, and another action happens on time `t` (`renew` or `countUnexpiredTokens`), the expiration takes place before the other actions.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def design_authentication_manager(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= timeToLive <= 108",
      "1 <= currentTime <= 108",
      "1 <= tokenId.length <= 5",
      "tokenId consists only of lowercase letters.",
      "All calls to generate will contain unique values of tokenId.",
      "The values of currentTime across all the function calls will be strictly increasing.",
      "At most 2000 calls will be made to all functions combined."
    ]
  },
  {
    "questionId": 1798,
    "title": "Maximum Number of Consecutive Values You Can Make",
    "titleSlug": "maximum-number-of-consecutive-values-you-can-make",
    "content": "<p>You are given an integer array `coins` of length `n` which represents the `n` coins that you own. The value of the `ith` coin is `coins[i]`. You can make some value `x` if you can choose some of your `n` coins such that their values sum up to `x`.</p>\n<p>Return the maximum number of consecutive integer values that you can make with your coins starting from and including `0`.</p>\n<p>Note that you may have multiple coins of the same value.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_number_of_consecutive_values_you_can_make(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "coins = [1,3]",
        "output": "2",
        "explanation": "You can make the following values:"
      },
      {
        "input": "coins = [1,1,1,4]",
        "output": "8",
        "explanation": "You can make the following values:"
      },
      {
        "input": "nums = [1,4,10,3,1]",
        "output": "20"
      }
    ],
    "constraints": [
      "coins.length == n",
      "1 <= n <= 4 * 104",
      "1 <= coins[i] <= 4 * 104"
    ]
  },
  {
    "questionId": 1800,
    "title": "Maximum Ascending Subarray Sum",
    "titleSlug": "maximum-ascending-subarray-sum",
    "content": "<p>Given an array of positive integers `nums`, return the maximum possible sum of an ascending subarray in `nums`.</p>\n<p>A subarray is defined as a contiguous sequence of numbers in an array.</p>\n<p>A subarray `[numsl, numsl+1, ..., numsr-1, numsr]` is ascending if for all `i` where `l <= i < r`, `numsi  < numsi+1`. Note that a subarray of size `1` is ascending.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_ascending_subarray_sum(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [10,20,30,5,10,50]",
        "output": "65",
        "explanation": "[5,10,50] is the ascending subarray with the maximum sum of 65."
      },
      {
        "input": "nums = [10,20,30,40,50]",
        "output": "150",
        "explanation": "[10,20,30,40,50] is the ascending subarray with the maximum sum of 150."
      },
      {
        "input": "nums = [12,17,15,13,10,11,12]",
        "output": "33",
        "explanation": "[10,11,12] is the ascending subarray with the maximum sum of 33."
      },
      {
        "input": "nums = [100,10,1]",
        "output": "100"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 100",
      "1 <= nums[i] <= 100"
    ]
  },
  {
    "questionId": 1801,
    "title": "Number of Orders in the Backlog",
    "titleSlug": "number-of-orders-in-the-backlog",
    "content": "<p>You are given a 2D integer array `orders`, where each `orders[i] = [pricei, amounti, orderTypei]` denotes that `amounti` orders have been placed of type `orderTypei` at the price `pricei`. The `orderTypei` is:\n`0` if it is a batch of `buy` orders, or\n`1` if it is a batch of `sell` orders.</p>\n<p>Note that `orders[i]` represents a batch of `amounti` independent orders with the same price and order type. All orders represented by `orders[i]` will be placed before all orders represented by `orders[i+1]` for all valid `i`.</p>\n<p>There is a backlog that consists of orders that have not been executed. The backlog is initially empty. When an order is placed, the following happens:\nIf the order is a `buy` order, you look at the `sell` order with the smallest price in the backlog. If that `sell` order's price is smaller than or equal to the current `buy` order's price, they will match and be executed, and that `sell` order will be removed from the backlog. Else, the `buy` order is added to the backlog.</p>\n<p>Vice versa, if the order is a `sell` order, you look at the `buy` order with the largest price in the backlog. If that `buy` order's price is larger than or equal to the current `sell` order's price, they will match and be executed, and that `buy` order will be removed from the backlog. Else, the `sell` order is added to the backlog.</p>\n<p>Return the total amount of orders in the backlog after placing all the orders from the input. Since this number can be large, return it modulo `109 + 7`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_orders_in_the_backlog(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]",
        "output": "6",
        "explanation": "Here is what happens with the orders:"
      },
      {
        "input": "orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]",
        "output": "999999984",
        "explanation": "Here is what happens with the orders:"
      }
    ],
    "constraints": [
      "1 <= orders.length <= 105",
      "orders[i].length == 3",
      "1 <= pricei, amounti <= 109",
      "orderTypei is either 0 or 1."
    ]
  },
  {
    "questionId": 1802,
    "title": "Maximum Value at a Given Index in a Bounded Array",
    "titleSlug": "maximum-value-at-a-given-index-in-a-bounded-array",
    "content": "<p>You are given three positive integers: `n`, `index`, and `maxSum`. You want to construct an array `nums` (0-indexed) that satisfies the following conditions:\n`nums.length == n`\n`nums[i]` is a positive integer where `0 <= i < n`.</p>\n<p>`abs(nums[i] - nums[i+1]) <= 1` where `0 <= i < n-1`.</p>\n<p>The sum of all the elements of `nums` does not exceed `maxSum`.</p>\n<p>`nums[index]` is maximized.</p>\n<p>Return `nums[index]` of the constructed array.</p>\n<p>Note that `abs(x)` equals `x` if `x >= 0`, and `-x` otherwise.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_value_at_a_given_index_in_a_bounded_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 4, index = 2,  maxSum = 6",
        "output": "2",
        "explanation": "nums = [1,2,2,1] is one array that satisfies all the conditions."
      },
      {
        "input": "n = 6, index = 1,  maxSum = 10",
        "output": "3"
      }
    ],
    "constraints": [
      "1 <= n <= maxSum <= 109",
      "0 <= index < n"
    ]
  },
  {
    "questionId": 1804,
    "title": "Implement Trie II (Prefix Tree)",
    "titleSlug": "implement-trie-ii-prefix-tree",
    "content": "<p>A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.</p>\n<p>Implement the Trie class:\n`Trie()` Initializes the trie object.</p>\n<p>`void insert(String word)` Inserts the string `word` into the trie.</p>\n<p>`int countWordsEqualTo(String word)` Returns the number of instances of the string `word` in the trie.</p>\n<p>`int countWordsStartingWith(String prefix)` Returns the number of strings in the trie that have the string `prefix` as a prefix.</p>\n<p>`void erase(String word)` Erases the string `word` from the trie.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def implement_trie_ii_prefix_tree(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [],
    "constraints": [
      "1 <= word.length, prefix.length <= 2000",
      "word and prefix consist only of lowercase English letters.",
      "At most 3 * 104 calls in total will be made to insert, countWordsEqualTo, countWordsStartingWith, and erase.",
      "It is guaranteed that for any function call to erase, the string word will exist in the trie."
    ]
  },
  {
    "questionId": 1805,
    "title": "Number of Different Integers in a String",
    "titleSlug": "number-of-different-integers-in-a-string",
    "content": "<p>You are given a string `word` that consists of digits and lowercase English letters.</p>\n<p>You will replace every non-digit character with a space. For example, `\"a123bc34d8ef34\"` will become `\" 123  34 8  34\"`. Notice that you are left with some integers that are separated by at least one space: `\"123\"`, `\"34\"`, `\"8\"`, and `\"34\"`.</p>\n<p>Return the number of different integers after performing the replacement operations on `word`.</p>\n<p>Two integers are considered different if their decimal representations without any leading zeros are different.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def number_of_different_integers_in_a_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "word = \"a123bc34d8ef34\"",
        "output": "3",
        "explanation": "The three different integers are \"123\", \"34\", and \"8\". Notice that \"34\" is only counted once."
      },
      {
        "input": "word = \"leet1234code234\"",
        "output": "2"
      },
      {
        "input": "word = \"a1b01c001\"",
        "output": "1",
        "explanation": "The three integers \"1\", \"01\", and \"001\" all represent the same integer because"
      }
    ],
    "constraints": [
      "1 <= word.length <= 1000",
      "word consists of digits and lowercase English letters."
    ]
  },
  {
    "questionId": 1806,
    "title": "Minimum Number of Operations to Reinitialize a Permutation",
    "titleSlug": "minimum-number-of-operations-to-reinitialize-a-permutation",
    "content": "<p>You are given an even integer `n`\u200b\u200b\u200b\u200b\u200b\u200b. You initially have a permutation `perm` of size `n`\u200b\u200b where `perm[i] == i`\u200b (0-indexed)\u200b\u200b\u200b\u200b.</p>\n<p>In one operation, you will create a new array `arr`, and for each `i`:\nIf `i % 2 == 0`, then `arr[i] = perm[i / 2]`.</p>\n<p>If `i % 2 == 1`, then `arr[i] = perm[n / 2 + (i - 1) / 2]`.</p>\n<p>You will then assign `arr`\u200b\u200b\u200b\u200b to `perm`.</p>\n<p>Return the minimum non-zero number of operations you need to perform on `perm` to return the permutation to its initial value.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_number_of_operations_to_reinitialize_a_permutation(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 2",
        "output": "1",
        "explanation": "perm = [0,1] initially."
      },
      {
        "input": "n = 4",
        "output": "2",
        "explanation": "perm = [0,1,2,3] initially."
      },
      {
        "input": "n = 6",
        "output": "4"
      }
    ],
    "constraints": [
      "2 <= n <= 1000",
      "n\u200b\u200b\u200b\u200b\u200b\u200b is even."
    ]
  },
  {
    "questionId": 1807,
    "title": "Evaluate the Bracket Pairs of a String",
    "titleSlug": "evaluate-the-bracket-pairs-of-a-string",
    "content": "<p>You are given a string `s` that contains some bracket pairs, with each pair containing a non-empty key.</p>\n<p>For example, in the string `\"(name)is(age)yearsold\"`, there are two bracket pairs that contain the keys `\"name\"` and `\"age\"`.</p>\n<p>You know the values of a wide range of keys. This is represented by a 2D string array `knowledge` where each `knowledge[i] = [keyi, valuei]` indicates that key `keyi` has a value of `valuei`.</p>\n<p>You are tasked to evaluate all of the bracket pairs. When you evaluate a bracket pair that contains some key `keyi`, you will:\nReplace `keyi` and the bracket pair with the key's corresponding `valuei`.</p>\n<p>If you do not know the value of the key, you will replace `keyi` and the bracket pair with a question mark `\"?\"` (without the quotation marks).</p>\n<p>Each key will appear at most once in your `knowledge`. There will not be any nested brackets in `s`.</p>\n<p>Return the resulting string after evaluating all of the bracket pairs.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def evaluate_the_bracket_pairs_of_a_string(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"(name)is(age)yearsold\", knowledge = [[\"name\",\"bob\"],[\"age\",\"two\"]]",
        "output": "\"bobistwoyearsold\"",
        "explanation": "The key \"name\" has a value of \"bob\", so replace \"(name)\" with \"bob\"."
      },
      {
        "input": "s = \"hi(name)\", knowledge = [[\"a\",\"b\"]]",
        "output": "\"hi?\"",
        "explanation": "As you do not know the value of the key \"name\", replace \"(name)\" with \"?\"."
      },
      {
        "input": "s = \"(a)(a)(a)aaa\", knowledge = [[\"a\",\"yes\"]]",
        "output": "\"yesyesyesaaa\"",
        "explanation": "The same key can appear multiple times."
      },
      {
        "input": "s = \"(a)(b)\", knowledge = [[\"a\",\"b\"],[\"b\",\"a\"]]",
        "output": "\"ba\""
      }
    ],
    "constraints": [
      "1 <= s.length <= 105",
      "0 <= knowledge.length <= 105",
      "knowledge[i].length == 2",
      "1 <= keyi.length, valuei.length <= 10",
      "s consists of lowercase English letters and round brackets '(' and ')'.",
      "Every open bracket '(' in s will have a corresponding close bracket ')'.",
      "The key in each bracket pair of s will be non-empty.",
      "There will not be any nested bracket pairs in s.",
      "keyi and valuei consist of lowercase English letters.",
      "Each keyi in knowledge is unique."
    ]
  },
  {
    "questionId": 1810,
    "title": "Minimum Path Cost in a Hidden Grid",
    "titleSlug": "minimum-path-cost-in-a-hidden-grid",
    "content": "<p>This is an interactive problem.</p>\n<p>There is a robot in a hidden grid, and you are trying to get it from its starting cell to the target cell in this grid. The grid is of size `m x n`, and each cell in the grid is either empty or blocked. It is guaranteed that the starting cell and the target cell are different, and neither of them is blocked.</p>\n<p>Each cell has a cost that you need to pay each time you move to the cell. The starting cell's cost is not applied before the robot moves.</p>\n<p>You want to find the minimum total cost to move the robot to the target cell. However, you do not know the grid's dimensions, the starting cell, nor the target cell. You are only allowed to ask queries to the `GridMaster` object.</p>\n<p>The `GridMaster` class has the following functions:\n`boolean canMove(char direction)` Returns `true` if the robot can move in that direction. Otherwise, it returns `false`.</p>\n<p>`int move(char direction)` Moves the robot in that direction and returns the cost of moving to that cell. If this move would move the robot to a blocked cell or off the grid, the move will be ignored, the robot will remain in the same position, and the function will return `-1`.</p>\n<p>`boolean isTarget()` Returns `true` if the robot is currently on the target cell. Otherwise, it returns `false`.</p>\n<p>Note that `direction` in the above functions should be a character from `{'U','D','L','R'}`, representing the directions up, down, left, and right, respectively.</p>\n<p>Return the minimum total cost to get the robot from its initial starting cell to the target cell. If there is no valid path between the cells, return `-1`.</p>\n<p>Custom testing:\nThe test input is read as a 2D matrix `grid` of size `m x n` and four integers `r1`, `c1`, `r2`, and `c2` where:\n`grid[i][j] == 0` indicates that the cell `(i, j)` is blocked.</p>\n<p>`grid[i][j] >= 1` indicates that the cell `(i, j)` is empty and `grid[i][j]` is the cost to move to that cell.</p>\n<p>`(r1, c1)` is the starting cell of the robot.</p>\n<p>`(r2, c2)` is the target cell of the robot.</p>\n<p>Remember that you will not have this information in your code.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_path_cost_in_a_hidden_grid(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "grid = [[2,3],[1,1]], r1 = 0, c1 = 1, r2 = 1, c2 = 0",
        "output": "2",
        "explanation": "One possible interaction is described below:"
      },
      {
        "input": "grid = [[0,3,1],[3,4,2],[1,2,0]], r1 = 2, c1 = 0, r2 = 0, c2 = 2",
        "output": "9",
        "explanation": "The minimum cost path is (2,0) -> (2,1) -> (1,1) -> (1,2) -> (0,2)."
      },
      {
        "input": "grid = [[1,0],[0,1]], r1 = 0, c1 = 0, r2 = 1, c2 = 1",
        "output": "-1",
        "explanation": "There is no path from the robot to the target cell."
      }
    ],
    "constraints": [
      "1 <= n, m <= 100",
      "m == grid.length",
      "n == grid[i].length",
      "0 <= grid[i][j] <= 100"
    ]
  },
  {
    "questionId": 1812,
    "title": "Determine Color of a Chessboard Square",
    "titleSlug": "determine-color-of-a-chessboard-square",
    "content": "<p>You are given `coordinates`, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.</p>\n<p>Return `true` if the square is white, and `false` if the square is black.</p>\n<p>The coordinate will always represent a valid chessboard square. The coordinate will always have the letter first, and the number second.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def determine_color_of_a_chessboard_square(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "coordinates = \"a1\"",
        "output": "false",
        "explanation": "From the chessboard above, the square with coordinates \"a1\" is black, so return false."
      },
      {
        "input": "coordinates = \"h3\"",
        "output": "true",
        "explanation": "From the chessboard above, the square with coordinates \"h3\" is white, so return true."
      },
      {
        "input": "coordinates = \"c7\"",
        "output": "false"
      }
    ],
    "constraints": [
      "coordinates.length == 2",
      "'a' <= coordinates[0] <= 'h'",
      "'1' <= coordinates[1] <= '8'"
    ]
  },
  {
    "questionId": 1813,
    "title": "Sentence Similarity III",
    "titleSlug": "sentence-similarity-iii",
    "content": "<p>A sentence is a list of words that are separated by a single space with no leading or trailing spaces. For example, `\"Hello World\"`, `\"HELLO\"`, `\"hello world hello world\"` are all sentences. Words consist of only uppercase and lowercase English letters.</p>\n<p>Two sentences `sentence1` and `sentence2` are similar if it is possible to insert an arbitrary sentence (possibly empty) inside one of these sentences such that the two sentences become equal. For example, `sentence1 = \"Hello my name is Jane\"` and `sentence2 = \"Hello Jane\"` can be made equal by inserting `\"my name is\"` between `\"Hello\"` and `\"Jane\"` in `sentence2`.</p>\n<p>Given two sentences `sentence1` and `sentence2`, return `true` if `sentence1` and `sentence2` are similar. Otherwise, return `false`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sentence_similarity_iii(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "sentence1 = \"My name is Haley\", sentence2 = \"My Haley\"",
        "output": "true",
        "explanation": "sentence2 can be turned to sentence1 by inserting \"name is\" between \"My\" and \"Haley\"."
      },
      {
        "input": "sentence1 = \"of\", sentence2 = \"A lot of words\"",
        "output": "false",
        "explanation": "No single sentence can be inserted inside one of the sentences to make it equal to the other."
      },
      {
        "input": "sentence1 = \"Eating right now\", sentence2 = \"Eating\"",
        "output": "true",
        "explanation": "sentence2 can be turned to sentence1 by inserting \"right now\" at the end of the sentence."
      },
      {
        "input": "sentence1 = \"Luky\", sentence2 = \"Lucccky\"",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= sentence1.length, sentence2.length <= 100",
      "sentence1 and sentence2 consist of lowercase and uppercase English letters and spaces.",
      "The words in sentence1 and sentence2 are separated by a single space."
    ]
  },
  {
    "questionId": 1814,
    "title": "Count Nice Pairs in an Array",
    "titleSlug": "count-nice-pairs-in-an-array",
    "content": "<p>You are given an array `nums` that consists of non-negative integers. Let us define `rev(x)` as the reverse of the non-negative integer `x`. For example, `rev(123) = 321`, and `rev(120) = 21`. A pair of indices `(i, j)` is nice if it satisfies all of the following conditions:\n`0 <= i < j < nums.length`\n`nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])`\nReturn the number of nice pairs of indices. Since that number can be too large, return it modulo `109 + 7`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def count_nice_pairs_in_an_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [42,11,1,97]",
        "output": "2",
        "explanation": "The two pairs are:"
      },
      {
        "input": "nums = [13,10,35,24,76]",
        "output": "4"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 105",
      "0 <= nums[i] <= 109"
    ]
  },
  {
    "questionId": 1816,
    "title": "Truncate Sentence",
    "titleSlug": "truncate-sentence",
    "content": "<p>A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each of the words consists of only uppercase and lowercase English letters (no punctuation).</p>\n<p>For example, `\"Hello World\"`, `\"HELLO\"`, and `\"hello world hello world\"` are all sentences.</p>\n<p>You are given a sentence `s`\u200b\u200b\u200b\u200b\u200b\u200b and an integer `k`\u200b\u200b\u200b\u200b\u200b\u200b. You want to truncate `s`\u200b\u200b\u200b\u200b\u200b\u200b such that it contains only the first `k`\u200b\u200b\u200b\u200b\u200b\u200b words. Return `s`\u200b\u200b\u200b\u200b\u200b\u200b after truncating it.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def truncate_sentence(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "s = \"Hello how are you Contestant\", k = 4",
        "output": "\"Hello how are you\"",
        "explanation": "The words in s are [\"Hello\", \"how\" \"are\", \"you\", \"Contestant\"]."
      },
      {
        "input": "s = \"What is the solution to this problem\", k = 4",
        "output": "\"What is the solution\"",
        "explanation": "The words in s are [\"What\", \"is\" \"the\", \"solution\", \"to\", \"this\", \"problem\"]."
      },
      {
        "input": "s = \"chopper is not a tanuki\", k = 5",
        "output": "\"chopper is not a tanuki\""
      }
    ],
    "constraints": [
      "1 <= s.length <= 500",
      "k is in the range [1, the number of words in s].",
      "s consist of only lowercase and uppercase English letters and spaces.",
      "The words in s are separated by a single space.",
      "There are no leading or trailing spaces."
    ]
  },
  {
    "questionId": 1817,
    "title": "Finding the Users Active Minutes",
    "titleSlug": "finding-the-users-active-minutes",
    "content": "<p>You are given the logs for users' actions on LeetCode, and an integer `k`. The logs are represented by a 2D integer array `logs` where each `logs[i] = [IDi, timei]` indicates that the user with `IDi` performed an action at the minute `timei`.</p>\n<p>Multiple users can perform actions simultaneously, and a single user can perform multiple actions in the same minute.</p>\n<p>The user active minutes (UAM) for a given user is defined as the number of unique minutes in which the user performed an action on LeetCode. A minute can only be counted once, even if multiple actions occur during it.</p>\n<p>You are to calculate a 1-indexed array `answer` of size `k` such that, for each `j` (`1 <= j <= k`), `answer[j]` is the number of users whose UAM equals `j`.</p>\n<p>Return the array `answer` as described above.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def finding_the_users_active_minutes(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "logs = [[0,5],[1,2],[0,2],[0,5],[1,3]], k = 5",
        "output": "[0,2,0,0,0]",
        "explanation": "The user with ID=0 performed actions at minutes 5, 2, and 5 again. Hence, they have a UAM of 2 (minute 5 is only counted once)."
      },
      {
        "input": "logs = [[1,1],[2,2],[2,3]], k = 4",
        "output": "[1,1,0,0]",
        "explanation": "The user with ID=1 performed a single action at minute 1. Hence, they have a UAM of 1."
      }
    ],
    "constraints": [
      "1 <= logs.length <= 104",
      "0 <= IDi <= 109",
      "1 <= timei <= 105",
      "k is in the range [The maximum UAM for a user, 105]."
    ]
  },
  {
    "questionId": 1818,
    "title": "Minimum Absolute Sum Difference",
    "titleSlug": "minimum-absolute-sum-difference",
    "content": "<p>You are given two positive integer arrays `nums1` and `nums2`, both of length `n`.</p>\n<p>The absolute sum difference of arrays `nums1` and `nums2` is defined as the sum of `|nums1[i] - nums2[i]|` for each `0 <= i < n` (0-indexed).</p>\n<p>You can replace at most one element of `nums1` with any other element in `nums1` to minimize the absolute sum difference.</p>\n<p>Return the minimum absolute sum difference after replacing at most one element in the array `nums1`. Since the answer may be large, return it modulo `109 + 7`.</p>\n<p>`|x|` is defined as:\n`x` if `x >= 0`, or\n`-x` if `x < 0`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_absolute_sum_difference(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums1 = [1,7,5], nums2 = [2,3,5]",
        "output": "3",
        "explanation": "There are two possible optimal solutions:"
      },
      {
        "input": "nums1 = [2,4,6,8,10], nums2 = [2,4,6,8,10]",
        "output": "0",
        "explanation": "nums1 is equal to nums2 so no replacement is needed. This will result in an"
      },
      {
        "input": "nums1 = [1,10,4,4,2,7], nums2 = [9,3,5,1,7,4]",
        "output": "20",
        "explanation": "Replace the first element with the second: [1,10,4,4,2,7] => [10,10,4,4,2,7]."
      }
    ],
    "constraints": [
      "n == nums1.length",
      "n == nums2.length",
      "1 <= n <= 105",
      "1 <= nums1[i], nums2[i] <= 105"
    ]
  },
  {
    "questionId": 1820,
    "title": "Maximum Number of Accepted Invitations",
    "titleSlug": "maximum-number-of-accepted-invitations",
    "content": "<p>There are `m` boys and `n` girls in a class attending an upcoming party.</p>\n<p>You are given an `m x n` integer matrix `grid`, where `grid[i][j]` equals `0` or `1`. If `grid[i][j] == 1`, then that means the `ith` boy can invite the `jth` girl to the party. A boy can invite at most one girl, and a girl can accept at most one invitation from a boy.</p>\n<p>Return the maximum possible number of accepted invitations.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximum_number_of_accepted_invitations(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "grid = [[1,1,1],",
        "output": "3",
        "explanation": "The invitations are sent as follows:"
      },
      {
        "input": "grid = [[1,0,1,0],",
        "output": "3",
        "explanation": "The invitations are sent as follows:"
      }
    ],
    "constraints": [
      "grid.length == m",
      "grid[i].length == n",
      "1 <= m, n <= 200",
      "grid[i][j] is either 0 or 1."
    ]
  },
  {
    "questionId": 1822,
    "title": "Sign of the Product of an Array",
    "titleSlug": "sign-of-the-product-of-an-array",
    "content": "<p>There is a function `signFunc(x)` that returns:\n`1` if `x` is positive.</p>\n<p>`-1` if `x` is negative.</p>\n<p>`0` if `x` is equal to `0`.</p>\n<p>You are given an integer array `nums`. Let `product` be the product of all values in the array `nums`.</p>\n<p>Return `signFunc(product)`.</p>",
    "difficulty": "Easy",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sign_of_the_product_of_an_array(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "nums = [-1,-2,-3,-4,3,2,1]",
        "output": "1",
        "explanation": "The product of all values in the array is 144, and signFunc(144) = 1"
      },
      {
        "input": "nums = [1,5,0,2,-3]",
        "output": "0",
        "explanation": "The product of all values in the array is 0, and signFunc(0) = 0"
      },
      {
        "input": "nums = [-1,1,-1,1,-1]",
        "output": "-1",
        "explanation": "The product of all values in the array is -1, and signFunc(-1) = -1"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 1000",
      "-100 <= nums[i] <= 100"
    ]
  },
  {
    "questionId": 1823,
    "title": "Find the Winner of the Circular Game",
    "titleSlug": "find-the-winner-of-the-circular-game",
    "content": "<p>There are `n` friends that are playing a game. The friends are sitting in a circle and are numbered from `1` to `n` in clockwise order. More formally, moving clockwise from the `ith` friend brings you to the `(i+1)th` friend for `1 <= i < n`, and moving clockwise from the `nth` friend brings you to the `1st` friend.</p>\n<p>The rules of the game are as follows:\nStart at the `1st` friend.</p>\n<p>Count the next `k` friends in the clockwise direction including the friend you started at. The counting wraps around the circle and may count some friends more than once.</p>\n<p>The last friend you counted leaves the circle and loses the game.</p>\n<p>If there is still more than one friend in the circle, go back to step `2` starting from the friend immediately clockwise of the friend who just lost and repeat.</p>\n<p>Else, the last friend in the circle wins the game.</p>\n<p>Given the number of friends, `n`, and an integer `k`, return the winner of the game.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find_the_winner_of_the_circular_game(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "n = 5, k = 2",
        "output": "3",
        "explanation": "Here are the steps of the game:"
      },
      {
        "input": "n = 6, k = 5",
        "output": "1",
        "explanation": "The friends leave in this order: 5, 4, 6, 2, 3. The winner is friend 1."
      }
    ],
    "constraints": [
      "1 <= k <= n <= 500"
    ]
  },
  {
    "questionId": 1824,
    "title": "Minimum Sideway Jumps",
    "titleSlug": "minimum-sideway-jumps",
    "content": "<p>There is a 3 lane road of length `n` that consists of `n + 1` points labeled from `0` to `n`. A frog starts at point `0` in the second lane and wants to jump to point `n`. However, there could be obstacles along the way.</p>\n<p>You are given an array `obstacles` of length `n + 1` where each `obstacles[i]` (ranging from 0 to 3) describes an obstacle on the lane `obstacles[i]` at point `i`. If `obstacles[i] == 0`, there are no obstacles at point `i`. There will be at most one obstacle in the 3 lanes at each point.</p>\n<p>For example, if `obstacles[2] == 1`, then there is an obstacle on lane 1 at point 2.</p>\n<p>The frog can only travel from point `i` to point `i + 1` on the same lane if there is not an obstacle on the lane at point `i + 1`. To avoid obstacles, the frog can also perform a side jump to jump to another lane (even if they are not adjacent) at the same point if there is no obstacle on the new lane.</p>\n<p>For example, the frog can jump from lane 3 at point 3 to lane 1 at point 3.</p>\n<p>Return the minimum number of side jumps the frog needs to reach any lane at point n starting from lane `2` at point 0.</p>\n<p>Note: There will be no obstacles on points `0` and `n`.</p>",
    "difficulty": "Medium",
    "codeSnippets": [
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minimum_sideway_jumps(self, ...):\n        # Write your solution here\n        pass"
      }
    ],
    "examples": [
      {
        "input": "obstacles = [0,1,2,3,0]",
        "output": "2",
        "explanation": "The optimal solution is shown by the arrows above. There are 2 side jumps (red arrows)."
      },
      {
        "input": "obstacles = [0,1,1,3,3,0]",
        "output": "0",
        "explanation": "There are no obstacles on lane 2. No side jumps are required."
      },
      {
        "input": "obstacles = [0,2,1,0,3,0]",
        "output": "2",
        "explanation": "The optimal solution is shown by the arrows above. There are 2 side jumps."
      }
    ],
    "constraints": [
      "obstacles.length == n + 1",
      "1 <= n <= 5 * 105",
      "0 <= obstacles[i] <= 3",
      "obstacles[0] == obstacles[n] == 0"
    ]
  }
];